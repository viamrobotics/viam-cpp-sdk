// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/model/v1/model.proto

#include "app/model/v1/model.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace app {
namespace model {
namespace v1 {
PROTOBUF_CONSTEXPR FileData::FileData(
    ::_pbi::ConstantInitialized)
  : data_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct FileDataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDataDefaultTypeInternal() {}
  union {
    FileData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDataDefaultTypeInternal _FileData_default_instance_;
PROTOBUF_CONSTEXPR File::File(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , size_bytes_(int64_t{0}){}
struct FileDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FileDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~FileDefaultTypeInternal() {}
  union {
    File _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FileDefaultTypeInternal _File_default_instance_;
PROTOBUF_CONSTEXPR UploadMetadata::UploadMetadata(
    ::_pbi::ConstantInitialized)
  : files_()
  , org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , associated_dataset_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct UploadMetadataDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadMetadataDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadMetadataDefaultTypeInternal() {}
  union {
    UploadMetadata _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadMetadataDefaultTypeInternal _UploadMetadata_default_instance_;
PROTOBUF_CONSTEXPR UploadRequest::UploadRequest(
    ::_pbi::ConstantInitialized)
  : _oneof_case_{}{}
struct UploadRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadRequestDefaultTypeInternal() {}
  union {
    UploadRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadRequestDefaultTypeInternal _UploadRequest_default_instance_;
PROTOBUF_CONSTEXPR DeleteRequest::DeleteRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DeleteRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteRequestDefaultTypeInternal() {}
  union {
    DeleteRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteRequestDefaultTypeInternal _DeleteRequest_default_instance_;
PROTOBUF_CONSTEXPR DeployRequest::DeployRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DeployRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeployRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeployRequestDefaultTypeInternal() {}
  union {
    DeployRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeployRequestDefaultTypeInternal _DeployRequest_default_instance_;
PROTOBUF_CONSTEXPR Model::Model(
    ::_pbi::ConstantInitialized)
  : files_()
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , time_created_(nullptr)
  , size_bytes_(int64_t{0}){}
struct ModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ModelDefaultTypeInternal() {}
  union {
    Model _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ModelDefaultTypeInternal _Model_default_instance_;
PROTOBUF_CONSTEXPR InfoRequest::InfoRequest(
    ::_pbi::ConstantInitialized)
  : org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct InfoRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoRequestDefaultTypeInternal() {}
  union {
    InfoRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoRequestDefaultTypeInternal _InfoRequest_default_instance_;
PROTOBUF_CONSTEXPR InfoResponse::InfoResponse(
    ::_pbi::ConstantInitialized)
  : model_(){}
struct InfoResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InfoResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InfoResponseDefaultTypeInternal() {}
  union {
    InfoResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InfoResponseDefaultTypeInternal _InfoResponse_default_instance_;
PROTOBUF_CONSTEXPR UploadResponse::UploadResponse(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
{}
struct UploadResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadResponseDefaultTypeInternal() {}
  union {
    UploadResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadResponseDefaultTypeInternal _UploadResponse_default_instance_;
PROTOBUF_CONSTEXPR DeleteResponse::DeleteResponse(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
{}
struct DeleteResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeleteResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeleteResponseDefaultTypeInternal() {}
  union {
    DeleteResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeleteResponseDefaultTypeInternal _DeleteResponse_default_instance_;
PROTOBUF_CONSTEXPR DeployResponse::DeployResponse(
    ::_pbi::ConstantInitialized)
  : message_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(0)
{}
struct DeployResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DeployResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DeployResponseDefaultTypeInternal() {}
  union {
    DeployResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DeployResponseDefaultTypeInternal _DeployResponse_default_instance_;
PROTOBUF_CONSTEXPR SyncedModel::SyncedModel(
    ::_pbi::ConstantInitialized)
  : files_()
  , org_id_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , model_name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , associated_dataset_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , blob_path_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , sync_time_(nullptr)
  , size_bytes_(int64_t{0}){}
struct SyncedModelDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SyncedModelDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SyncedModelDefaultTypeInternal() {}
  union {
    SyncedModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SyncedModelDefaultTypeInternal _SyncedModel_default_instance_;
}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam
static ::_pb::Metadata file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[13];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_app_2fmodel_2fv1_2fmodel_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_app_2fmodel_2fv1_2fmodel_2eproto = nullptr;

const uint32_t TableStruct_app_2fmodel_2fv1_2fmodel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::FileData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::FileData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::File, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::File, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::File, size_bytes_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadMetadata, org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadMetadata, model_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadMetadata, associated_dataset_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadMetadata, files_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadRequest, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadRequest, upload_packet_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeleteRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeleteRequest, org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeleteRequest, model_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeployRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeployRequest, org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeployRequest, model_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::Model, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::Model, name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::Model, size_bytes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::Model, files_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::Model, time_created_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::InfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::InfoRequest, org_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::InfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::InfoResponse, model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadResponse, message_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::UploadResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeleteResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeleteResponse, message_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeleteResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeployResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeployResponse, message_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::DeployResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, org_id_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, model_name_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, associated_dataset_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, files_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, size_bytes_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, blob_path_),
  PROTOBUF_FIELD_OFFSET(::viam::app::model::v1::SyncedModel, sync_time_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::app::model::v1::FileData)},
  { 7, -1, -1, sizeof(::viam::app::model::v1::File)},
  { 15, -1, -1, sizeof(::viam::app::model::v1::UploadMetadata)},
  { 25, -1, -1, sizeof(::viam::app::model::v1::UploadRequest)},
  { 34, -1, -1, sizeof(::viam::app::model::v1::DeleteRequest)},
  { 42, -1, -1, sizeof(::viam::app::model::v1::DeployRequest)},
  { 50, -1, -1, sizeof(::viam::app::model::v1::Model)},
  { 60, -1, -1, sizeof(::viam::app::model::v1::InfoRequest)},
  { 67, -1, -1, sizeof(::viam::app::model::v1::InfoResponse)},
  { 74, -1, -1, sizeof(::viam::app::model::v1::UploadResponse)},
  { 82, -1, -1, sizeof(::viam::app::model::v1::DeleteResponse)},
  { 90, -1, -1, sizeof(::viam::app::model::v1::DeployResponse)},
  { 98, -1, -1, sizeof(::viam::app::model::v1::SyncedModel)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::app::model::v1::_FileData_default_instance_._instance,
  &::viam::app::model::v1::_File_default_instance_._instance,
  &::viam::app::model::v1::_UploadMetadata_default_instance_._instance,
  &::viam::app::model::v1::_UploadRequest_default_instance_._instance,
  &::viam::app::model::v1::_DeleteRequest_default_instance_._instance,
  &::viam::app::model::v1::_DeployRequest_default_instance_._instance,
  &::viam::app::model::v1::_Model_default_instance_._instance,
  &::viam::app::model::v1::_InfoRequest_default_instance_._instance,
  &::viam::app::model::v1::_InfoResponse_default_instance_._instance,
  &::viam::app::model::v1::_UploadResponse_default_instance_._instance,
  &::viam::app::model::v1::_DeleteResponse_default_instance_._instance,
  &::viam::app::model::v1::_DeployResponse_default_instance_._instance,
  &::viam::app::model::v1::_SyncedModel_default_instance_._instance,
};

const char descriptor_table_protodef_app_2fmodel_2fv1_2fmodel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030app/model/v1/model.proto\022\021viam.app.mod"
  "el.v1\032\034google/api/annotations.proto\032\037goo"
  "gle/protobuf/timestamp.proto\032\026tagger/v1/"
  "tagger.proto\"\036\n\010FileData\022\022\n\004data\030\001 \001(\014R\004"
  "data\"\201\001\n\004File\0220\n\004name\030\001 \001(\tB\034\232\204\236\003\027bson:\""
  "name\" json:\"name\"R\004name\022G\n\nsize_bytes\030\002 "
  "\001(\003B(\232\204\236\003#bson:\"size_bytes\" json:\"size_b"
  "ytes\"R\tsizeBytes\"\244\001\n\016UploadMetadata\022\025\n\006o"
  "rg_id\030\001 \001(\tR\005orgId\022\035\n\nmodel_name\030\002 \001(\tR\t"
  "modelName\022-\n\022associated_dataset\030\003 \001(\tR\021a"
  "ssociatedDataset\022-\n\005files\030\004 \003(\0132\027.viam.a"
  "pp.model.v1.FileR\005files\"\245\001\n\rUploadReques"
  "t\022\?\n\010metadata\030\001 \001(\0132!.viam.app.model.v1."
  "UploadMetadataH\000R\010metadata\022B\n\rfile_conte"
  "nts\030\002 \001(\0132\033.viam.app.model.v1.FileDataH\000"
  "R\014fileContentsB\017\n\rupload_packet\"E\n\rDelet"
  "eRequest\022\025\n\006org_id\030\001 \001(\tR\005orgId\022\035\n\nmodel"
  "_name\030\002 \001(\tR\tmodelName\"E\n\rDeployRequest\022"
  "\025\n\006org_id\030\001 \001(\tR\005orgId\022\035\n\nmodel_name\030\002 \001"
  "(\tR\tmodelName\"\250\001\n\005Model\022\022\n\004name\030\001 \001(\tR\004n"
  "ame\022\035\n\nsize_bytes\030\002 \001(\003R\tsizeBytes\022-\n\005fi"
  "les\030\003 \003(\0132\027.viam.app.model.v1.FileR\005file"
  "s\022=\n\014time_created\030\004 \001(\0132\032.google.protobu"
  "f.TimestampR\013timeCreated\"$\n\013InfoRequest\022"
  "\025\n\006org_id\030\001 \001(\tR\005orgId\">\n\014InfoResponse\022."
  "\n\005model\030\001 \003(\0132\030.viam.app.model.v1.ModelR"
  "\005model\"]\n\016UploadResponse\022\030\n\007message\030\001 \001("
  "\tR\007message\0221\n\006status\030\002 \001(\0162\031.viam.app.mo"
  "del.v1.StatusR\006status\"]\n\016DeleteResponse\022"
  "\030\n\007message\030\001 \001(\tR\007message\0221\n\006status\030\002 \001("
  "\0162\031.viam.app.model.v1.StatusR\006status\"]\n\016"
  "DeployResponse\022\030\n\007message\030\001 \001(\tR\007message"
  "\0221\n\006status\030\002 \001(\0162\031.viam.app.model.v1.Sta"
  "tusR\006status\"\266\004\n\013SyncedModel\0227\n\006org_id\030\001 "
  "\001(\tB \232\204\236\003\033bson:\"org_id\" json:\"org_id\"R\005o"
  "rgId\022G\n\nmodel_name\030\002 \001(\tB(\232\204\236\003#bson:\"mod"
  "el_name\" json:\"model_name\"R\tmodelName\022g\n"
  "\022associated_dataset\030\003 \001(\tB8\232\204\236\0033bson:\"as"
  "sociated_dataset\" json:\"associated_datas"
  "et\"R\021associatedDataset\022M\n\005files\030\004 \003(\0132\027."
  "viam.app.model.v1.FileB\036\232\204\236\003\031bson:\"files"
  "\" json:\"files\"R\005files\022G\n\nsize_bytes\030\005 \001("
  "\003B(\232\204\236\003#bson:\"size_bytes\" json:\"size_byt"
  "es\"R\tsizeBytes\022C\n\tblob_path\030\006 \001(\tB&\232\204\236\003!"
  "bson:\"blob_path\" json:\"blob_path\"R\010blobP"
  "ath\022_\n\tsync_time\030\007 \001(\0132\032.google.protobuf"
  ".TimestampB&\232\204\236\003!bson:\"sync_time\" json:\""
  "sync_time\"R\010syncTime*+\n\006Status\022\017\n\013UNSPEC"
  "IFIED\020\000\022\010\n\004FAIL\020\001\022\006\n\002OK\020\0022\254\003\n\014ModelServi"
  "ce\022i\n\006Upload\022 .viam.app.model.v1.UploadR"
  "equest\032!.viam.app.model.v1.UploadRespons"
  "e\"\030\202\323\344\223\002\022\"\020/model/v1/upload(\001\022g\n\006Delete\022"
  " .viam.app.model.v1.DeleteRequest\032!.viam"
  ".app.model.v1.DeleteResponse\"\030\202\323\344\223\002\022*\020/m"
  "odel/v1/delete\022g\n\006Deploy\022 .viam.app.mode"
  "l.v1.DeployRequest\032!.viam.app.model.v1.D"
  "eployResponse\"\030\202\323\344\223\002\022\"\020/model/v1/deploy\022"
  "_\n\004Info\022\036.viam.app.model.v1.InfoRequest\032"
  "\037.viam.app.model.v1.InfoResponse\"\026\202\323\344\223\002\020"
  "\022\016/model/v1/infoB\036Z\034go.viam.com/api/app/"
  "model/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tagger_2fv1_2ftagger_2eproto,
};
static ::_pbi::once_flag descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto = {
    false, false, 2416, descriptor_table_protodef_app_2fmodel_2fv1_2fmodel_2eproto,
    "app/model/v1/model.proto",
    &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once, descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_deps, 3, 13,
    schemas, file_default_instances, TableStruct_app_2fmodel_2fv1_2fmodel_2eproto::offsets,
    file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto, file_level_enum_descriptors_app_2fmodel_2fv1_2fmodel_2eproto,
    file_level_service_descriptors_app_2fmodel_2fv1_2fmodel_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter() {
  return &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_app_2fmodel_2fv1_2fmodel_2eproto(&descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto);
namespace viam {
namespace app {
namespace model {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto);
  return file_level_enum_descriptors_app_2fmodel_2fv1_2fmodel_2eproto[0];
}
bool Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FileData::_Internal {
 public:
};

FileData::FileData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.FileData)
}
FileData::FileData(const FileData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    data_.Set(from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.FileData)
}

inline void FileData::SharedCtor() {
data_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  data_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

FileData::~FileData() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.FileData)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void FileData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.Destroy();
}

void FileData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FileData::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.FileData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FileData::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FileData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.FileData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.FileData)
  return target;
}

size_t FileData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.FileData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FileData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FileData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FileData::GetClassData() const { return &_class_data_; }

void FileData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FileData *>(to)->MergeFrom(
      static_cast<const FileData &>(from));
}


void FileData::MergeFrom(const FileData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.FileData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _internal_set_data(from._internal_data());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FileData::CopyFrom(const FileData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.FileData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileData::IsInitialized() const {
  return true;
}

void FileData::InternalSwap(FileData* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &data_, lhs_arena,
      &other->data_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FileData::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[0]);
}

// ===================================================================

class File::_Internal {
 public:
};

File::File(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.File)
}
File::File(const File& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  size_bytes_ = from.size_bytes_;
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.File)
}

inline void File::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
size_bytes_ = int64_t{0};
}

File::~File() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.File)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void File::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void File::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void File::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.File)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  size_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* File::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name", (.tagger.v1.tags) = "bson:\"name\" json:\"name\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.File.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 size_bytes = 2 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* File::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.File)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name", (.tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.File.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 size_bytes = 2 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
  if (this->_internal_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size_bytes(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.File)
  return target;
}

size_t File::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.File)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name", (.tagger.v1.tags) = "bson:\"name\" json:\"name\""];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int64 size_bytes = 2 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
  if (this->_internal_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData File::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    File::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*File::GetClassData() const { return &_class_data_; }

void File::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<File *>(to)->MergeFrom(
      static_cast<const File &>(from));
}


void File::MergeFrom(const File& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.File)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_size_bytes() != 0) {
    _internal_set_size_bytes(from._internal_size_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void File::CopyFrom(const File& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.File)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool File::IsInitialized() const {
  return true;
}

void File::InternalSwap(File* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(size_bytes_, other->size_bytes_);
}

::PROTOBUF_NAMESPACE_ID::Metadata File::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[1]);
}

// ===================================================================

class UploadMetadata::_Internal {
 public:
};

UploadMetadata::UploadMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.UploadMetadata)
}
UploadMetadata::UploadMetadata(const UploadMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  associated_dataset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    associated_dataset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_associated_dataset().empty()) {
    associated_dataset_.Set(from._internal_associated_dataset(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.UploadMetadata)
}

inline void UploadMetadata::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
associated_dataset_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  associated_dataset_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

UploadMetadata::~UploadMetadata() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.UploadMetadata)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
  model_name_.Destroy();
  associated_dataset_.Destroy();
}

void UploadMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.UploadMetadata)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  org_id_.ClearToEmpty();
  model_name_.ClearToEmpty();
  associated_dataset_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadMetadata::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.UploadMetadata.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 2 [json_name = "modelName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.UploadMetadata.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string associated_dataset = 3 [json_name = "associatedDataset"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_associated_dataset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.UploadMetadata.associated_dataset"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.model.v1.File files = 4 [json_name = "files"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadMetadata::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.UploadMetadata)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.UploadMetadata.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string model_name = 2 [json_name = "modelName"];
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.UploadMetadata.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  // string associated_dataset = 3 [json_name = "associatedDataset"];
  if (!this->_internal_associated_dataset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_associated_dataset().data(), static_cast<int>(this->_internal_associated_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.UploadMetadata.associated_dataset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_associated_dataset(), target);
  }

  // repeated .viam.app.model.v1.File files = 4 [json_name = "files"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.UploadMetadata)
  return target;
}

size_t UploadMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.UploadMetadata)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.model.v1.File files = 4 [json_name = "files"];
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string model_name = 2 [json_name = "modelName"];
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string associated_dataset = 3 [json_name = "associatedDataset"];
  if (!this->_internal_associated_dataset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_associated_dataset());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadMetadata::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadMetadata::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadMetadata::GetClassData() const { return &_class_data_; }

void UploadMetadata::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UploadMetadata *>(to)->MergeFrom(
      static_cast<const UploadMetadata &>(from));
}


void UploadMetadata::MergeFrom(const UploadMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.UploadMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_model_name().empty()) {
    _internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_associated_dataset().empty()) {
    _internal_set_associated_dataset(from._internal_associated_dataset());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadMetadata::CopyFrom(const UploadMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.UploadMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadMetadata::IsInitialized() const {
  return true;
}

void UploadMetadata::InternalSwap(UploadMetadata* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_name_, lhs_arena,
      &other->model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &associated_dataset_, lhs_arena,
      &other->associated_dataset_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadMetadata::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[2]);
}

// ===================================================================

class UploadRequest::_Internal {
 public:
  static const ::viam::app::model::v1::UploadMetadata& metadata(const UploadRequest* msg);
  static const ::viam::app::model::v1::FileData& file_contents(const UploadRequest* msg);
};

const ::viam::app::model::v1::UploadMetadata&
UploadRequest::_Internal::metadata(const UploadRequest* msg) {
  return *msg->upload_packet_.metadata_;
}
const ::viam::app::model::v1::FileData&
UploadRequest::_Internal::file_contents(const UploadRequest* msg) {
  return *msg->upload_packet_.file_contents_;
}
void UploadRequest::set_allocated_metadata(::viam::app::model::v1::UploadMetadata* metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload_packet();
  if (metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(metadata);
    if (message_arena != submessage_arena) {
      metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metadata, submessage_arena);
    }
    set_has_metadata();
    upload_packet_.metadata_ = metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadRequest.metadata)
}
void UploadRequest::set_allocated_file_contents(::viam::app::model::v1::FileData* file_contents) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_upload_packet();
  if (file_contents) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(file_contents);
    if (message_arena != submessage_arena) {
      file_contents = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, file_contents, submessage_arena);
    }
    set_has_file_contents();
    upload_packet_.file_contents_ = file_contents;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.app.model.v1.UploadRequest.file_contents)
}
UploadRequest::UploadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.UploadRequest)
}
UploadRequest::UploadRequest(const UploadRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_upload_packet();
  switch (from.upload_packet_case()) {
    case kMetadata: {
      _internal_mutable_metadata()->::viam::app::model::v1::UploadMetadata::MergeFrom(from._internal_metadata());
      break;
    }
    case kFileContents: {
      _internal_mutable_file_contents()->::viam::app::model::v1::FileData::MergeFrom(from._internal_file_contents());
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.UploadRequest)
}

inline void UploadRequest::SharedCtor() {
clear_has_upload_packet();
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.UploadRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_upload_packet()) {
    clear_upload_packet();
  }
}

void UploadRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadRequest::clear_upload_packet() {
// @@protoc_insertion_point(one_of_clear_start:viam.app.model.v1.UploadRequest)
  switch (upload_packet_case()) {
    case kMetadata: {
      if (GetArenaForAllocation() == nullptr) {
        delete upload_packet_.metadata_;
      }
      break;
    }
    case kFileContents: {
      if (GetArenaForAllocation() == nullptr) {
        delete upload_packet_.file_contents_;
      }
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = UPLOAD_PACKET_NOT_SET;
}


void UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.UploadRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_upload_packet();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_metadata(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_file_contents(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.UploadRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
  if (_internal_has_metadata()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::metadata(this),
        _Internal::metadata(this).GetCachedSize(), target, stream);
  }

  // .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
  if (_internal_has_file_contents()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::file_contents(this),
        _Internal::file_contents(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.UploadRequest)
  return target;
}

size_t UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.UploadRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (upload_packet_case()) {
    // .viam.app.model.v1.UploadMetadata metadata = 1 [json_name = "metadata"];
    case kMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upload_packet_.metadata_);
      break;
    }
    // .viam.app.model.v1.FileData file_contents = 2 [json_name = "fileContents"];
    case kFileContents: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *upload_packet_.file_contents_);
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadRequest::GetClassData() const { return &_class_data_; }

void UploadRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UploadRequest *>(to)->MergeFrom(
      static_cast<const UploadRequest &>(from));
}


void UploadRequest::MergeFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.UploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.upload_packet_case()) {
    case kMetadata: {
      _internal_mutable_metadata()->::viam::app::model::v1::UploadMetadata::MergeFrom(from._internal_metadata());
      break;
    }
    case kFileContents: {
      _internal_mutable_file_contents()->::viam::app::model::v1::FileData::MergeFrom(from._internal_file_contents());
      break;
    }
    case UPLOAD_PACKET_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  return true;
}

void UploadRequest::InternalSwap(UploadRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(upload_packet_, other->upload_packet_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[3]);
}

// ===================================================================

class DeleteRequest::_Internal {
 public:
};

DeleteRequest::DeleteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.DeleteRequest)
}
DeleteRequest::DeleteRequest(const DeleteRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.DeleteRequest)
}

inline void DeleteRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeleteRequest::~DeleteRequest() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.DeleteRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
  model_name_.Destroy();
}

void DeleteRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.DeleteRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  model_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.DeleteRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 2 [json_name = "modelName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.DeleteRequest.model_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.DeleteRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.DeleteRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string model_name = 2 [json_name = "modelName"];
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.DeleteRequest.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.DeleteRequest)
  return target;
}

size_t DeleteRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.DeleteRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string model_name = 2 [json_name = "modelName"];
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteRequest::GetClassData() const { return &_class_data_; }

void DeleteRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteRequest *>(to)->MergeFrom(
      static_cast<const DeleteRequest &>(from));
}


void DeleteRequest::MergeFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.DeleteRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_model_name().empty()) {
    _internal_set_model_name(from._internal_model_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteRequest::CopyFrom(const DeleteRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.DeleteRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteRequest::IsInitialized() const {
  return true;
}

void DeleteRequest::InternalSwap(DeleteRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_name_, lhs_arena,
      &other->model_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[4]);
}

// ===================================================================

class DeployRequest::_Internal {
 public:
};

DeployRequest::DeployRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.DeployRequest)
}
DeployRequest::DeployRequest(const DeployRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.DeployRequest)
}

inline void DeployRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DeployRequest::~DeployRequest() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.DeployRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeployRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
  model_name_.Destroy();
}

void DeployRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.DeployRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  model_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.DeployRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 2 [json_name = "modelName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.DeployRequest.model_name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.DeployRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.DeployRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string model_name = 2 [json_name = "modelName"];
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.DeployRequest.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.DeployRequest)
  return target;
}

size_t DeployRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.DeployRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string model_name = 2 [json_name = "modelName"];
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployRequest::GetClassData() const { return &_class_data_; }

void DeployRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployRequest *>(to)->MergeFrom(
      static_cast<const DeployRequest &>(from));
}


void DeployRequest::MergeFrom(const DeployRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.DeployRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_model_name().empty()) {
    _internal_set_model_name(from._internal_model_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployRequest::CopyFrom(const DeployRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.DeployRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployRequest::IsInitialized() const {
  return true;
}

void DeployRequest::InternalSwap(DeployRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_name_, lhs_arena,
      &other->model_name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[5]);
}

// ===================================================================

class Model::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time_created(const Model* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Model::_Internal::time_created(const Model* msg) {
  return *msg->time_created_;
}
void Model::clear_time_created() {
  if (GetArenaForAllocation() == nullptr && time_created_ != nullptr) {
    delete time_created_;
  }
  time_created_ = nullptr;
}
Model::Model(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.Model)
}
Model::Model(const Model& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_time_created()) {
    time_created_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_created_);
  } else {
    time_created_ = nullptr;
  }
  size_bytes_ = from.size_bytes_;
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.Model)
}

inline void Model::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_created_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_bytes_) -
    reinterpret_cast<char*>(&time_created_)) + sizeof(size_bytes_));
}

Model::~Model() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.Model)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Model::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete time_created_;
}

void Model::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Model::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.Model)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && time_created_ != nullptr) {
    delete time_created_;
  }
  time_created_ = nullptr;
  size_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Model::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.Model.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 size_bytes = 2 [json_name = "sizeBytes"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.model.v1.File files = 3 [json_name = "files"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp time_created = 4 [json_name = "timeCreated"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_time_created(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Model::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.Model)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.Model.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 size_bytes = 2 [json_name = "sizeBytes"];
  if (this->_internal_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_size_bytes(), target);
  }

  // repeated .viam.app.model.v1.File files = 3 [json_name = "files"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  // .google.protobuf.Timestamp time_created = 4 [json_name = "timeCreated"];
  if (this->_internal_has_time_created()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::time_created(this),
        _Internal::time_created(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.Model)
  return target;
}

size_t Model::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.Model)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.model.v1.File files = 3 [json_name = "files"];
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Timestamp time_created = 4 [json_name = "timeCreated"];
  if (this->_internal_has_time_created()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_created_);
  }

  // int64 size_bytes = 2 [json_name = "sizeBytes"];
  if (this->_internal_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Model::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Model::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Model::GetClassData() const { return &_class_data_; }

void Model::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Model *>(to)->MergeFrom(
      static_cast<const Model &>(from));
}


void Model::MergeFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.Model)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_time_created()) {
    _internal_mutable_time_created()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time_created());
  }
  if (from._internal_size_bytes() != 0) {
    _internal_set_size_bytes(from._internal_size_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Model::CopyFrom(const Model& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.Model)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Model::IsInitialized() const {
  return true;
}

void Model::InternalSwap(Model* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Model, size_bytes_)
      + sizeof(Model::size_bytes_)
      - PROTOBUF_FIELD_OFFSET(Model, time_created_)>(
          reinterpret_cast<char*>(&time_created_),
          reinterpret_cast<char*>(&other->time_created_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Model::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[6]);
}

// ===================================================================

class InfoRequest::_Internal {
 public:
};

InfoRequest::InfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.InfoRequest)
}
InfoRequest::InfoRequest(const InfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.InfoRequest)
}

inline void InfoRequest::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

InfoRequest::~InfoRequest() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.InfoRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
}

void InfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.InfoRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.InfoRequest.org_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.InfoRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.InfoRequest.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.InfoRequest)
  return target;
}

size_t InfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.InfoRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId"];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InfoRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoRequest::GetClassData() const { return &_class_data_; }

void InfoRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InfoRequest *>(to)->MergeFrom(
      static_cast<const InfoRequest &>(from));
}


void InfoRequest::MergeFrom(const InfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.InfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoRequest::CopyFrom(const InfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.InfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoRequest::IsInitialized() const {
  return true;
}

void InfoRequest::InternalSwap(InfoRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[7]);
}

// ===================================================================

class InfoResponse::_Internal {
 public:
};

InfoResponse::InfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  model_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.InfoResponse)
}
InfoResponse::InfoResponse(const InfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      model_(from.model_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.InfoResponse)
}

inline void InfoResponse::SharedCtor() {
}

InfoResponse::~InfoResponse() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.InfoResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InfoResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.InfoResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  model_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InfoResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.app.model.v1.Model model = 1 [json_name = "model"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_model(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InfoResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.InfoResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.app.model.v1.Model model = 1 [json_name = "model"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_model_size()); i < n; i++) {
    const auto& repfield = this->_internal_model(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.InfoResponse)
  return target;
}

size_t InfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.InfoResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.model.v1.Model model = 1 [json_name = "model"];
  total_size += 1UL * this->_internal_model_size();
  for (const auto& msg : this->model_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InfoResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InfoResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InfoResponse::GetClassData() const { return &_class_data_; }

void InfoResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InfoResponse *>(to)->MergeFrom(
      static_cast<const InfoResponse &>(from));
}


void InfoResponse::MergeFrom(const InfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.InfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  model_.MergeFrom(from.model_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InfoResponse::CopyFrom(const InfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.InfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InfoResponse::IsInitialized() const {
  return true;
}

void InfoResponse::InternalSwap(InfoResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  model_.InternalSwap(&other->model_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InfoResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[8]);
}

// ===================================================================

class UploadResponse::_Internal {
 public:
};

UploadResponse::UploadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.UploadResponse)
}
UploadResponse::UploadResponse(const UploadResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.UploadResponse)
}

inline void UploadResponse::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

UploadResponse::~UploadResponse() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.UploadResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void UploadResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void UploadResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UploadResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.UploadResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UploadResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1 [json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.UploadResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.model.v1.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::viam::app::model::v1::Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UploadResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.UploadResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.UploadResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.UploadResponse)
  return target;
}

size_t UploadResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.UploadResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UploadResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UploadResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UploadResponse::GetClassData() const { return &_class_data_; }

void UploadResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UploadResponse *>(to)->MergeFrom(
      static_cast<const UploadResponse &>(from));
}


void UploadResponse::MergeFrom(const UploadResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.UploadResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UploadResponse::CopyFrom(const UploadResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.UploadResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadResponse::IsInitialized() const {
  return true;
}

void UploadResponse::InternalSwap(UploadResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UploadResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[9]);
}

// ===================================================================

class DeleteResponse::_Internal {
 public:
};

DeleteResponse::DeleteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.DeleteResponse)
}
DeleteResponse::DeleteResponse(const DeleteResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.DeleteResponse)
}

inline void DeleteResponse::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

DeleteResponse::~DeleteResponse() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.DeleteResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeleteResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void DeleteResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.DeleteResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1 [json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.DeleteResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.model.v1.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::viam::app::model::v1::Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.DeleteResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.DeleteResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.DeleteResponse)
  return target;
}

size_t DeleteResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.DeleteResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteResponse::GetClassData() const { return &_class_data_; }

void DeleteResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteResponse *>(to)->MergeFrom(
      static_cast<const DeleteResponse &>(from));
}


void DeleteResponse::MergeFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.DeleteResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteResponse::CopyFrom(const DeleteResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.DeleteResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteResponse::IsInitialized() const {
  return true;
}

void DeleteResponse::InternalSwap(DeleteResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[10]);
}

// ===================================================================

class DeployResponse::_Internal {
 public:
};

DeployResponse::DeployResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.DeployResponse)
}
DeployResponse::DeployResponse(const DeployResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(from._internal_message(), 
      GetArenaForAllocation());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.DeployResponse)
}

inline void DeployResponse::SharedCtor() {
message_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_ = 0;
}

DeployResponse::~DeployResponse() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.DeployResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DeployResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  message_.Destroy();
}

void DeployResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeployResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.DeployResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeployResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string message = 1 [json_name = "message"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.DeployResponse.message"));
        } else
          goto handle_unusual;
        continue;
      // .viam.app.model.v1.Status status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::viam::app::model::v1::Status>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeployResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.DeployResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.DeployResponse.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.DeployResponse)
  return target;
}

size_t DeployResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.DeployResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message = 1 [json_name = "message"];
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .viam.app.model.v1.Status status = 2 [json_name = "status"];
  if (this->_internal_status() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeployResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeployResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeployResponse::GetClassData() const { return &_class_data_; }

void DeployResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeployResponse *>(to)->MergeFrom(
      static_cast<const DeployResponse &>(from));
}


void DeployResponse::MergeFrom(const DeployResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.DeployResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_status() != 0) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeployResponse::CopyFrom(const DeployResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.DeployResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeployResponse::IsInitialized() const {
  return true;
}

void DeployResponse::InternalSwap(DeployResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeployResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[11]);
}

// ===================================================================

class SyncedModel::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& sync_time(const SyncedModel* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
SyncedModel::_Internal::sync_time(const SyncedModel* msg) {
  return *msg->sync_time_;
}
void SyncedModel::clear_sync_time() {
  if (GetArenaForAllocation() == nullptr && sync_time_ != nullptr) {
    delete sync_time_;
  }
  sync_time_ = nullptr;
}
SyncedModel::SyncedModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  files_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.app.model.v1.SyncedModel)
}
SyncedModel::SyncedModel(const SyncedModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      files_(from.files_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    org_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_org_id().empty()) {
    org_id_.Set(from._internal_org_id(), 
      GetArenaForAllocation());
  }
  model_name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model_name().empty()) {
    model_name_.Set(from._internal_model_name(), 
      GetArenaForAllocation());
  }
  associated_dataset_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    associated_dataset_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_associated_dataset().empty()) {
    associated_dataset_.Set(from._internal_associated_dataset(), 
      GetArenaForAllocation());
  }
  blob_path_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    blob_path_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_blob_path().empty()) {
    blob_path_.Set(from._internal_blob_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sync_time()) {
    sync_time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.sync_time_);
  } else {
    sync_time_ = nullptr;
  }
  size_bytes_ = from.size_bytes_;
  // @@protoc_insertion_point(copy_constructor:viam.app.model.v1.SyncedModel)
}

inline void SyncedModel::SharedCtor() {
org_id_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  org_id_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
associated_dataset_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  associated_dataset_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
blob_path_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  blob_path_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sync_time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&size_bytes_) -
    reinterpret_cast<char*>(&sync_time_)) + sizeof(size_bytes_));
}

SyncedModel::~SyncedModel() {
  // @@protoc_insertion_point(destructor:viam.app.model.v1.SyncedModel)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SyncedModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  org_id_.Destroy();
  model_name_.Destroy();
  associated_dataset_.Destroy();
  blob_path_.Destroy();
  if (this != internal_default_instance()) delete sync_time_;
}

void SyncedModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SyncedModel::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.app.model.v1.SyncedModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  files_.Clear();
  org_id_.ClearToEmpty();
  model_name_.ClearToEmpty();
  associated_dataset_.ClearToEmpty();
  blob_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sync_time_ != nullptr) {
    delete sync_time_;
  }
  sync_time_ = nullptr;
  size_bytes_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SyncedModel::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string org_id = 1 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.SyncedModel.org_id"));
        } else
          goto handle_unusual;
        continue;
      // string model_name = 2 [json_name = "modelName", (.tagger.v1.tags) = "bson:\"model_name\" json:\"model_name\""];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_model_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.SyncedModel.model_name"));
        } else
          goto handle_unusual;
        continue;
      // string associated_dataset = 3 [json_name = "associatedDataset", (.tagger.v1.tags) = "bson:\"associated_dataset\" json:\"associated_dataset\""];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_associated_dataset();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.SyncedModel.associated_dataset"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.app.model.v1.File files = 4 [json_name = "files", (.tagger.v1.tags) = "bson:\"files\" json:\"files\""];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_files(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int64 size_bytes = 5 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          size_bytes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string blob_path = 6 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_blob_path();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.app.model.v1.SyncedModel.blob_path"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sync_time = 7 [json_name = "syncTime", (.tagger.v1.tags) = "bson:\"sync_time\" json:\"sync_time\""];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SyncedModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.app.model.v1.SyncedModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  if (!this->_internal_org_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.SyncedModel.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string model_name = 2 [json_name = "modelName", (.tagger.v1.tags) = "bson:\"model_name\" json:\"model_name\""];
  if (!this->_internal_model_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model_name().data(), static_cast<int>(this->_internal_model_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.SyncedModel.model_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_model_name(), target);
  }

  // string associated_dataset = 3 [json_name = "associatedDataset", (.tagger.v1.tags) = "bson:\"associated_dataset\" json:\"associated_dataset\""];
  if (!this->_internal_associated_dataset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_associated_dataset().data(), static_cast<int>(this->_internal_associated_dataset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.SyncedModel.associated_dataset");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_associated_dataset(), target);
  }

  // repeated .viam.app.model.v1.File files = 4 [json_name = "files", (.tagger.v1.tags) = "bson:\"files\" json:\"files\""];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_files_size()); i < n; i++) {
    const auto& repfield = this->_internal_files(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(4, repfield, repfield.GetCachedSize(), target, stream);
  }

  // int64 size_bytes = 5 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
  if (this->_internal_size_bytes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(5, this->_internal_size_bytes(), target);
  }

  // string blob_path = 6 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  if (!this->_internal_blob_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_blob_path().data(), static_cast<int>(this->_internal_blob_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.app.model.v1.SyncedModel.blob_path");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_blob_path(), target);
  }

  // .google.protobuf.Timestamp sync_time = 7 [json_name = "syncTime", (.tagger.v1.tags) = "bson:\"sync_time\" json:\"sync_time\""];
  if (this->_internal_has_sync_time()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::sync_time(this),
        _Internal::sync_time(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.app.model.v1.SyncedModel)
  return target;
}

size_t SyncedModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.app.model.v1.SyncedModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.app.model.v1.File files = 4 [json_name = "files", (.tagger.v1.tags) = "bson:\"files\" json:\"files\""];
  total_size += 1UL * this->_internal_files_size();
  for (const auto& msg : this->files_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string org_id = 1 [json_name = "orgId", (.tagger.v1.tags) = "bson:\"org_id\" json:\"org_id\""];
  if (!this->_internal_org_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string model_name = 2 [json_name = "modelName", (.tagger.v1.tags) = "bson:\"model_name\" json:\"model_name\""];
  if (!this->_internal_model_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model_name());
  }

  // string associated_dataset = 3 [json_name = "associatedDataset", (.tagger.v1.tags) = "bson:\"associated_dataset\" json:\"associated_dataset\""];
  if (!this->_internal_associated_dataset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_associated_dataset());
  }

  // string blob_path = 6 [json_name = "blobPath", (.tagger.v1.tags) = "bson:\"blob_path\" json:\"blob_path\""];
  if (!this->_internal_blob_path().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_blob_path());
  }

  // .google.protobuf.Timestamp sync_time = 7 [json_name = "syncTime", (.tagger.v1.tags) = "bson:\"sync_time\" json:\"sync_time\""];
  if (this->_internal_has_sync_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_time_);
  }

  // int64 size_bytes = 5 [json_name = "sizeBytes", (.tagger.v1.tags) = "bson:\"size_bytes\" json:\"size_bytes\""];
  if (this->_internal_size_bytes() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_size_bytes());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SyncedModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SyncedModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SyncedModel::GetClassData() const { return &_class_data_; }

void SyncedModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SyncedModel *>(to)->MergeFrom(
      static_cast<const SyncedModel &>(from));
}


void SyncedModel::MergeFrom(const SyncedModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.app.model.v1.SyncedModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  files_.MergeFrom(from.files_);
  if (!from._internal_org_id().empty()) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (!from._internal_model_name().empty()) {
    _internal_set_model_name(from._internal_model_name());
  }
  if (!from._internal_associated_dataset().empty()) {
    _internal_set_associated_dataset(from._internal_associated_dataset());
  }
  if (!from._internal_blob_path().empty()) {
    _internal_set_blob_path(from._internal_blob_path());
  }
  if (from._internal_has_sync_time()) {
    _internal_mutable_sync_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sync_time());
  }
  if (from._internal_size_bytes() != 0) {
    _internal_set_size_bytes(from._internal_size_bytes());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SyncedModel::CopyFrom(const SyncedModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.app.model.v1.SyncedModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncedModel::IsInitialized() const {
  return true;
}

void SyncedModel::InternalSwap(SyncedModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  files_.InternalSwap(&other->files_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &org_id_, lhs_arena,
      &other->org_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_name_, lhs_arena,
      &other->model_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &associated_dataset_, lhs_arena,
      &other->associated_dataset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &blob_path_, lhs_arena,
      &other->blob_path_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SyncedModel, size_bytes_)
      + sizeof(SyncedModel::size_bytes_)
      - PROTOBUF_FIELD_OFFSET(SyncedModel, sync_time_)>(
          reinterpret_cast<char*>(&sync_time_),
          reinterpret_cast<char*>(&other->sync_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SyncedModel::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_getter, &descriptor_table_app_2fmodel_2fv1_2fmodel_2eproto_once,
      file_level_metadata_app_2fmodel_2fv1_2fmodel_2eproto[12]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace model
}  // namespace app
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::FileData*
Arena::CreateMaybeMessage< ::viam::app::model::v1::FileData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::FileData >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::File*
Arena::CreateMaybeMessage< ::viam::app::model::v1::File >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::File >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::UploadMetadata*
Arena::CreateMaybeMessage< ::viam::app::model::v1::UploadMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::UploadMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::UploadRequest*
Arena::CreateMaybeMessage< ::viam::app::model::v1::UploadRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::UploadRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::DeleteRequest*
Arena::CreateMaybeMessage< ::viam::app::model::v1::DeleteRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::DeleteRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::DeployRequest*
Arena::CreateMaybeMessage< ::viam::app::model::v1::DeployRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::DeployRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::Model*
Arena::CreateMaybeMessage< ::viam::app::model::v1::Model >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::Model >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::InfoRequest*
Arena::CreateMaybeMessage< ::viam::app::model::v1::InfoRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::InfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::InfoResponse*
Arena::CreateMaybeMessage< ::viam::app::model::v1::InfoResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::InfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::UploadResponse*
Arena::CreateMaybeMessage< ::viam::app::model::v1::UploadResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::UploadResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::DeleteResponse*
Arena::CreateMaybeMessage< ::viam::app::model::v1::DeleteResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::DeleteResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::DeployResponse*
Arena::CreateMaybeMessage< ::viam::app::model::v1::DeployResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::DeployResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::app::model::v1::SyncedModel*
Arena::CreateMaybeMessage< ::viam::app::model::v1::SyncedModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::app::model::v1::SyncedModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
