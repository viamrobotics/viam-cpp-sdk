// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/common.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2fcommon_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2fcommon_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/descriptor.pb.h>
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_common_2fv1_2fcommon_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_common_2fv1_2fcommon_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_common_2fv1_2fcommon_2eproto;
namespace viam {
namespace common {
namespace v1 {
class ActuatorStatus;
struct ActuatorStatusDefaultTypeInternal;
extern ActuatorStatusDefaultTypeInternal _ActuatorStatus_default_instance_;
class AnalogStatus;
struct AnalogStatusDefaultTypeInternal;
extern AnalogStatusDefaultTypeInternal _AnalogStatus_default_instance_;
class BoardStatus;
struct BoardStatusDefaultTypeInternal;
extern BoardStatusDefaultTypeInternal _BoardStatus_default_instance_;
class BoardStatus_AnalogsEntry_DoNotUse;
struct BoardStatus_AnalogsEntry_DoNotUseDefaultTypeInternal;
extern BoardStatus_AnalogsEntry_DoNotUseDefaultTypeInternal _BoardStatus_AnalogsEntry_DoNotUse_default_instance_;
class BoardStatus_DigitalInterruptsEntry_DoNotUse;
struct BoardStatus_DigitalInterruptsEntry_DoNotUseDefaultTypeInternal;
extern BoardStatus_DigitalInterruptsEntry_DoNotUseDefaultTypeInternal _BoardStatus_DigitalInterruptsEntry_DoNotUse_default_instance_;
class Capsule;
struct CapsuleDefaultTypeInternal;
extern CapsuleDefaultTypeInternal _Capsule_default_instance_;
class DigitalInterruptStatus;
struct DigitalInterruptStatusDefaultTypeInternal;
extern DigitalInterruptStatusDefaultTypeInternal _DigitalInterruptStatus_default_instance_;
class DoCommandRequest;
struct DoCommandRequestDefaultTypeInternal;
extern DoCommandRequestDefaultTypeInternal _DoCommandRequest_default_instance_;
class DoCommandResponse;
struct DoCommandResponseDefaultTypeInternal;
extern DoCommandResponseDefaultTypeInternal _DoCommandResponse_default_instance_;
class GeoPoint;
struct GeoPointDefaultTypeInternal;
extern GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
class GeometriesInFrame;
struct GeometriesInFrameDefaultTypeInternal;
extern GeometriesInFrameDefaultTypeInternal _GeometriesInFrame_default_instance_;
class Geometry;
struct GeometryDefaultTypeInternal;
extern GeometryDefaultTypeInternal _Geometry_default_instance_;
class Orientation;
struct OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class PointCloudObject;
struct PointCloudObjectDefaultTypeInternal;
extern PointCloudObjectDefaultTypeInternal _PointCloudObject_default_instance_;
class Pose;
struct PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
class PoseInFrame;
struct PoseInFrameDefaultTypeInternal;
extern PoseInFrameDefaultTypeInternal _PoseInFrame_default_instance_;
class RectangularPrism;
struct RectangularPrismDefaultTypeInternal;
extern RectangularPrismDefaultTypeInternal _RectangularPrism_default_instance_;
class ResourceName;
struct ResourceNameDefaultTypeInternal;
extern ResourceNameDefaultTypeInternal _ResourceName_default_instance_;
class Sphere;
struct SphereDefaultTypeInternal;
extern SphereDefaultTypeInternal _Sphere_default_instance_;
class Transform;
struct TransformDefaultTypeInternal;
extern TransformDefaultTypeInternal _Transform_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
class WorldState;
struct WorldStateDefaultTypeInternal;
extern WorldStateDefaultTypeInternal _WorldState_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::common::v1::ActuatorStatus* Arena::CreateMaybeMessage<::viam::common::v1::ActuatorStatus>(Arena*);
template<> ::viam::common::v1::AnalogStatus* Arena::CreateMaybeMessage<::viam::common::v1::AnalogStatus>(Arena*);
template<> ::viam::common::v1::BoardStatus* Arena::CreateMaybeMessage<::viam::common::v1::BoardStatus>(Arena*);
template<> ::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse* Arena::CreateMaybeMessage<::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse>(Arena*);
template<> ::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse* Arena::CreateMaybeMessage<::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse>(Arena*);
template<> ::viam::common::v1::Capsule* Arena::CreateMaybeMessage<::viam::common::v1::Capsule>(Arena*);
template<> ::viam::common::v1::DigitalInterruptStatus* Arena::CreateMaybeMessage<::viam::common::v1::DigitalInterruptStatus>(Arena*);
template<> ::viam::common::v1::DoCommandRequest* Arena::CreateMaybeMessage<::viam::common::v1::DoCommandRequest>(Arena*);
template<> ::viam::common::v1::DoCommandResponse* Arena::CreateMaybeMessage<::viam::common::v1::DoCommandResponse>(Arena*);
template<> ::viam::common::v1::GeoPoint* Arena::CreateMaybeMessage<::viam::common::v1::GeoPoint>(Arena*);
template<> ::viam::common::v1::GeometriesInFrame* Arena::CreateMaybeMessage<::viam::common::v1::GeometriesInFrame>(Arena*);
template<> ::viam::common::v1::Geometry* Arena::CreateMaybeMessage<::viam::common::v1::Geometry>(Arena*);
template<> ::viam::common::v1::Orientation* Arena::CreateMaybeMessage<::viam::common::v1::Orientation>(Arena*);
template<> ::viam::common::v1::PointCloudObject* Arena::CreateMaybeMessage<::viam::common::v1::PointCloudObject>(Arena*);
template<> ::viam::common::v1::Pose* Arena::CreateMaybeMessage<::viam::common::v1::Pose>(Arena*);
template<> ::viam::common::v1::PoseInFrame* Arena::CreateMaybeMessage<::viam::common::v1::PoseInFrame>(Arena*);
template<> ::viam::common::v1::RectangularPrism* Arena::CreateMaybeMessage<::viam::common::v1::RectangularPrism>(Arena*);
template<> ::viam::common::v1::ResourceName* Arena::CreateMaybeMessage<::viam::common::v1::ResourceName>(Arena*);
template<> ::viam::common::v1::Sphere* Arena::CreateMaybeMessage<::viam::common::v1::Sphere>(Arena*);
template<> ::viam::common::v1::Transform* Arena::CreateMaybeMessage<::viam::common::v1::Transform>(Arena*);
template<> ::viam::common::v1::Vector3* Arena::CreateMaybeMessage<::viam::common::v1::Vector3>(Arena*);
template<> ::viam::common::v1::WorldState* Arena::CreateMaybeMessage<::viam::common::v1::WorldState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace common {
namespace v1 {

// ===================================================================

class ResourceName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.ResourceName) */ {
 public:
  inline ResourceName() : ResourceName(nullptr) {}
  ~ResourceName() override;
  explicit PROTOBUF_CONSTEXPR ResourceName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourceName(const ResourceName& from);
  ResourceName(ResourceName&& from) noexcept
    : ResourceName() {
    *this = ::std::move(from);
  }

  inline ResourceName& operator=(const ResourceName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourceName& operator=(ResourceName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourceName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourceName* internal_default_instance() {
    return reinterpret_cast<const ResourceName*>(
               &_ResourceName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ResourceName& a, ResourceName& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourceName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourceName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResourceName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResourceName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourceName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourceName& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.ResourceName";
  }
  protected:
  explicit ResourceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNamespaceFieldNumber = 1,
    kTypeFieldNumber = 2,
    kSubtypeFieldNumber = 3,
    kNameFieldNumber = 4,
  };
  // string namespace = 1 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_NODISCARD std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string type = 2 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string subtype = 3 [json_name = "subtype"];
  void clear_subtype();
  const std::string& subtype() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_subtype(ArgT0&& arg0, ArgT... args);
  std::string* mutable_subtype();
  PROTOBUF_NODISCARD std::string* release_subtype();
  void set_allocated_subtype(std::string* subtype);
  private:
  const std::string& _internal_subtype() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subtype(const std::string& value);
  std::string* _internal_mutable_subtype();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.ResourceName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subtype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class BoardStatus_AnalogsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BoardStatus_AnalogsEntry_DoNotUse, 
    std::string, ::viam::common::v1::AnalogStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BoardStatus_AnalogsEntry_DoNotUse, 
    std::string, ::viam::common::v1::AnalogStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  BoardStatus_AnalogsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BoardStatus_AnalogsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BoardStatus_AnalogsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BoardStatus_AnalogsEntry_DoNotUse& other);
  static const BoardStatus_AnalogsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BoardStatus_AnalogsEntry_DoNotUse*>(&_BoardStatus_AnalogsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "viam.common.v1.BoardStatus.AnalogsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};

// -------------------------------------------------------------------

class BoardStatus_DigitalInterruptsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BoardStatus_DigitalInterruptsEntry_DoNotUse, 
    std::string, ::viam::common::v1::DigitalInterruptStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BoardStatus_DigitalInterruptsEntry_DoNotUse, 
    std::string, ::viam::common::v1::DigitalInterruptStatus,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  BoardStatus_DigitalInterruptsEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR BoardStatus_DigitalInterruptsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BoardStatus_DigitalInterruptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BoardStatus_DigitalInterruptsEntry_DoNotUse& other);
  static const BoardStatus_DigitalInterruptsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BoardStatus_DigitalInterruptsEntry_DoNotUse*>(&_BoardStatus_DigitalInterruptsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "viam.common.v1.BoardStatus.DigitalInterruptsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};

// -------------------------------------------------------------------

class BoardStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.BoardStatus) */ {
 public:
  inline BoardStatus() : BoardStatus(nullptr) {}
  ~BoardStatus() override;
  explicit PROTOBUF_CONSTEXPR BoardStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BoardStatus(const BoardStatus& from);
  BoardStatus(BoardStatus&& from) noexcept
    : BoardStatus() {
    *this = ::std::move(from);
  }

  inline BoardStatus& operator=(const BoardStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoardStatus& operator=(BoardStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BoardStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const BoardStatus* internal_default_instance() {
    return reinterpret_cast<const BoardStatus*>(
               &_BoardStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BoardStatus& a, BoardStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(BoardStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoardStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BoardStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BoardStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BoardStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BoardStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoardStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.BoardStatus";
  }
  protected:
  explicit BoardStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAnalogsFieldNumber = 1,
    kDigitalInterruptsFieldNumber = 2,
  };
  // map<string, .viam.common.v1.AnalogStatus> analogs = 1 [json_name = "analogs"];
  int analogs_size() const;
  private:
  int _internal_analogs_size() const;
  public:
  void clear_analogs();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >&
      _internal_analogs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >*
      _internal_mutable_analogs();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >&
      analogs() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >*
      mutable_analogs();

  // map<string, .viam.common.v1.DigitalInterruptStatus> digital_interrupts = 2 [json_name = "digitalInterrupts"];
  int digital_interrupts_size() const;
  private:
  int _internal_digital_interrupts_size() const;
  public:
  void clear_digital_interrupts();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >&
      _internal_digital_interrupts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >*
      _internal_mutable_digital_interrupts();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >&
      digital_interrupts() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >*
      mutable_digital_interrupts();

  // @@protoc_insertion_point(class_scope:viam.common.v1.BoardStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BoardStatus_AnalogsEntry_DoNotUse,
      std::string, ::viam::common::v1::AnalogStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> analogs_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BoardStatus_DigitalInterruptsEntry_DoNotUse,
      std::string, ::viam::common::v1::DigitalInterruptStatus,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> digital_interrupts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class AnalogStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.AnalogStatus) */ {
 public:
  inline AnalogStatus() : AnalogStatus(nullptr) {}
  ~AnalogStatus() override;
  explicit PROTOBUF_CONSTEXPR AnalogStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AnalogStatus(const AnalogStatus& from);
  AnalogStatus(AnalogStatus&& from) noexcept
    : AnalogStatus() {
    *this = ::std::move(from);
  }

  inline AnalogStatus& operator=(const AnalogStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AnalogStatus& operator=(AnalogStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AnalogStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AnalogStatus* internal_default_instance() {
    return reinterpret_cast<const AnalogStatus*>(
               &_AnalogStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AnalogStatus& a, AnalogStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AnalogStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AnalogStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AnalogStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AnalogStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AnalogStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AnalogStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AnalogStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.AnalogStatus";
  }
  protected:
  explicit AnalogStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1 [json_name = "value"];
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.AnalogStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class DigitalInterruptStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.DigitalInterruptStatus) */ {
 public:
  inline DigitalInterruptStatus() : DigitalInterruptStatus(nullptr) {}
  ~DigitalInterruptStatus() override;
  explicit PROTOBUF_CONSTEXPR DigitalInterruptStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DigitalInterruptStatus(const DigitalInterruptStatus& from);
  DigitalInterruptStatus(DigitalInterruptStatus&& from) noexcept
    : DigitalInterruptStatus() {
    *this = ::std::move(from);
  }

  inline DigitalInterruptStatus& operator=(const DigitalInterruptStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DigitalInterruptStatus& operator=(DigitalInterruptStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DigitalInterruptStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const DigitalInterruptStatus* internal_default_instance() {
    return reinterpret_cast<const DigitalInterruptStatus*>(
               &_DigitalInterruptStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DigitalInterruptStatus& a, DigitalInterruptStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DigitalInterruptStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DigitalInterruptStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DigitalInterruptStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DigitalInterruptStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DigitalInterruptStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DigitalInterruptStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DigitalInterruptStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.DigitalInterruptStatus";
  }
  protected:
  explicit DigitalInterruptStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1 [json_name = "value"];
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.DigitalInterruptStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Pose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Pose) */ {
 public:
  inline Pose() : Pose(nullptr) {}
  ~Pose() override;
  explicit PROTOBUF_CONSTEXPR Pose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pose(const Pose& from);
  Pose(Pose&& from) noexcept
    : Pose() {
    *this = ::std::move(from);
  }

  inline Pose& operator=(const Pose& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose& operator=(Pose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pose& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pose* internal_default_instance() {
    return reinterpret_cast<const Pose*>(
               &_Pose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Pose& a, Pose& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Pose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Pose>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pose& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pose& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Pose";
  }
  protected:
  explicit Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
    kOXFieldNumber = 4,
    kOYFieldNumber = 5,
    kOZFieldNumber = 6,
    kThetaFieldNumber = 7,
  };
  // double x = 1 [json_name = "x"];
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2 [json_name = "y"];
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3 [json_name = "z"];
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // double o_x = 4 [json_name = "oX"];
  void clear_o_x();
  double o_x() const;
  void set_o_x(double value);
  private:
  double _internal_o_x() const;
  void _internal_set_o_x(double value);
  public:

  // double o_y = 5 [json_name = "oY"];
  void clear_o_y();
  double o_y() const;
  void set_o_y(double value);
  private:
  double _internal_o_y() const;
  void _internal_set_o_y(double value);
  public:

  // double o_z = 6 [json_name = "oZ"];
  void clear_o_z();
  double o_z() const;
  void set_o_z(double value);
  private:
  double _internal_o_z() const;
  void _internal_set_o_z(double value);
  public:

  // double theta = 7 [json_name = "theta"];
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.Pose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  double o_x_;
  double o_y_;
  double o_z_;
  double theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Orientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  ~Orientation() override;
  explicit PROTOBUF_CONSTEXPR Orientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Orientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Orientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Orientation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOXFieldNumber = 1,
    kOYFieldNumber = 2,
    kOZFieldNumber = 3,
    kThetaFieldNumber = 4,
  };
  // double o_x = 1 [json_name = "oX"];
  void clear_o_x();
  double o_x() const;
  void set_o_x(double value);
  private:
  double _internal_o_x() const;
  void _internal_set_o_x(double value);
  public:

  // double o_y = 2 [json_name = "oY"];
  void clear_o_y();
  double o_y() const;
  void set_o_y(double value);
  private:
  double _internal_o_y() const;
  void _internal_set_o_y(double value);
  public:

  // double o_z = 3 [json_name = "oZ"];
  void clear_o_z();
  double o_z() const;
  void set_o_z(double value);
  private:
  double _internal_o_z() const;
  void _internal_set_o_z(double value);
  public:

  // double theta = 4 [json_name = "theta"];
  void clear_theta();
  double theta() const;
  void set_theta(double value);
  private:
  double _internal_theta() const;
  void _internal_set_theta(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.Orientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double o_x_;
  double o_y_;
  double o_z_;
  double theta_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class PoseInFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.PoseInFrame) */ {
 public:
  inline PoseInFrame() : PoseInFrame(nullptr) {}
  ~PoseInFrame() override;
  explicit PROTOBUF_CONSTEXPR PoseInFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PoseInFrame(const PoseInFrame& from);
  PoseInFrame(PoseInFrame&& from) noexcept
    : PoseInFrame() {
    *this = ::std::move(from);
  }

  inline PoseInFrame& operator=(const PoseInFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline PoseInFrame& operator=(PoseInFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PoseInFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const PoseInFrame* internal_default_instance() {
    return reinterpret_cast<const PoseInFrame*>(
               &_PoseInFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PoseInFrame& a, PoseInFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(PoseInFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PoseInFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PoseInFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PoseInFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PoseInFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PoseInFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PoseInFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.PoseInFrame";
  }
  protected:
  explicit PoseInFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFrameFieldNumber = 1,
    kPoseFieldNumber = 2,
  };
  // string reference_frame = 1 [json_name = "referenceFrame"];
  void clear_reference_frame();
  const std::string& reference_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference_frame();
  PROTOBUF_NODISCARD std::string* release_reference_frame();
  void set_allocated_reference_frame(std::string* reference_frame);
  private:
  const std::string& _internal_reference_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_frame(const std::string& value);
  std::string* _internal_mutable_reference_frame();
  public:

  // .viam.common.v1.Pose pose = 2 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::viam::common::v1::Pose& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_pose();
  ::viam::common::v1::Pose* mutable_pose();
  void set_allocated_pose(::viam::common::v1::Pose* pose);
  private:
  const ::viam::common::v1::Pose& _internal_pose() const;
  ::viam::common::v1::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::viam::common::v1::Pose* pose);
  ::viam::common::v1::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:viam.common.v1.PoseInFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_frame_;
  ::viam::common::v1::Pose* pose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit PROTOBUF_CONSTEXPR Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Vector3& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Vector3& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // double x = 1 [json_name = "x"];
  void clear_x();
  double x() const;
  void set_x(double value);
  private:
  double _internal_x() const;
  void _internal_set_x(double value);
  public:

  // double y = 2 [json_name = "y"];
  void clear_y();
  double y() const;
  void set_y(double value);
  private:
  double _internal_y() const;
  void _internal_set_y(double value);
  public:

  // double z = 3 [json_name = "z"];
  void clear_z();
  double z() const;
  void set_z(double value);
  private:
  double _internal_z() const;
  void _internal_set_z(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_;
  double y_;
  double z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Sphere final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Sphere) */ {
 public:
  inline Sphere() : Sphere(nullptr) {}
  ~Sphere() override;
  explicit PROTOBUF_CONSTEXPR Sphere(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sphere(const Sphere& from);
  Sphere(Sphere&& from) noexcept
    : Sphere() {
    *this = ::std::move(from);
  }

  inline Sphere& operator=(const Sphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sphere& operator=(Sphere&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sphere& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sphere* internal_default_instance() {
    return reinterpret_cast<const Sphere*>(
               &_Sphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Sphere& a, Sphere& b) {
    a.Swap(&b);
  }
  inline void Swap(Sphere* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sphere* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sphere>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sphere& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sphere& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sphere* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Sphere";
  }
  protected:
  explicit Sphere(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusMmFieldNumber = 1,
  };
  // double radius_mm = 1 [json_name = "radiusMm"];
  void clear_radius_mm();
  double radius_mm() const;
  void set_radius_mm(double value);
  private:
  double _internal_radius_mm() const;
  void _internal_set_radius_mm(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.Sphere)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double radius_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Capsule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Capsule) */ {
 public:
  inline Capsule() : Capsule(nullptr) {}
  ~Capsule() override;
  explicit PROTOBUF_CONSTEXPR Capsule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Capsule(const Capsule& from);
  Capsule(Capsule&& from) noexcept
    : Capsule() {
    *this = ::std::move(from);
  }

  inline Capsule& operator=(const Capsule& from) {
    CopyFrom(from);
    return *this;
  }
  inline Capsule& operator=(Capsule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Capsule& default_instance() {
    return *internal_default_instance();
  }
  static inline const Capsule* internal_default_instance() {
    return reinterpret_cast<const Capsule*>(
               &_Capsule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Capsule& a, Capsule& b) {
    a.Swap(&b);
  }
  inline void Swap(Capsule* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Capsule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Capsule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Capsule>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Capsule& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Capsule& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Capsule* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Capsule";
  }
  protected:
  explicit Capsule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusMmFieldNumber = 1,
    kLengthMmFieldNumber = 2,
  };
  // double radius_mm = 1 [json_name = "radiusMm"];
  void clear_radius_mm();
  double radius_mm() const;
  void set_radius_mm(double value);
  private:
  double _internal_radius_mm() const;
  void _internal_set_radius_mm(double value);
  public:

  // double length_mm = 2 [json_name = "lengthMm"];
  void clear_length_mm();
  double length_mm() const;
  void set_length_mm(double value);
  private:
  double _internal_length_mm() const;
  void _internal_set_length_mm(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.Capsule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double radius_mm_;
  double length_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class RectangularPrism final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.RectangularPrism) */ {
 public:
  inline RectangularPrism() : RectangularPrism(nullptr) {}
  ~RectangularPrism() override;
  explicit PROTOBUF_CONSTEXPR RectangularPrism(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RectangularPrism(const RectangularPrism& from);
  RectangularPrism(RectangularPrism&& from) noexcept
    : RectangularPrism() {
    *this = ::std::move(from);
  }

  inline RectangularPrism& operator=(const RectangularPrism& from) {
    CopyFrom(from);
    return *this;
  }
  inline RectangularPrism& operator=(RectangularPrism&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RectangularPrism& default_instance() {
    return *internal_default_instance();
  }
  static inline const RectangularPrism* internal_default_instance() {
    return reinterpret_cast<const RectangularPrism*>(
               &_RectangularPrism_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RectangularPrism& a, RectangularPrism& b) {
    a.Swap(&b);
  }
  inline void Swap(RectangularPrism* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RectangularPrism* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RectangularPrism* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RectangularPrism>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RectangularPrism& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RectangularPrism& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RectangularPrism* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.RectangularPrism";
  }
  protected:
  explicit RectangularPrism(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDimsMmFieldNumber = 1,
  };
  // .viam.common.v1.Vector3 dims_mm = 1 [json_name = "dimsMm"];
  bool has_dims_mm() const;
  private:
  bool _internal_has_dims_mm() const;
  public:
  void clear_dims_mm();
  const ::viam::common::v1::Vector3& dims_mm() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Vector3* release_dims_mm();
  ::viam::common::v1::Vector3* mutable_dims_mm();
  void set_allocated_dims_mm(::viam::common::v1::Vector3* dims_mm);
  private:
  const ::viam::common::v1::Vector3& _internal_dims_mm() const;
  ::viam::common::v1::Vector3* _internal_mutable_dims_mm();
  public:
  void unsafe_arena_set_allocated_dims_mm(
      ::viam::common::v1::Vector3* dims_mm);
  ::viam::common::v1::Vector3* unsafe_arena_release_dims_mm();

  // @@protoc_insertion_point(class_scope:viam.common.v1.RectangularPrism)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::common::v1::Vector3* dims_mm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Geometry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Geometry) */ {
 public:
  inline Geometry() : Geometry(nullptr) {}
  ~Geometry() override;
  explicit PROTOBUF_CONSTEXPR Geometry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Geometry(const Geometry& from);
  Geometry(Geometry&& from) noexcept
    : Geometry() {
    *this = ::std::move(from);
  }

  inline Geometry& operator=(const Geometry& from) {
    CopyFrom(from);
    return *this;
  }
  inline Geometry& operator=(Geometry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Geometry& default_instance() {
    return *internal_default_instance();
  }
  enum GeometryTypeCase {
    kSphere = 2,
    kBox = 3,
    kCapsule = 5,
    GEOMETRY_TYPE_NOT_SET = 0,
  };

  static inline const Geometry* internal_default_instance() {
    return reinterpret_cast<const Geometry*>(
               &_Geometry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Geometry& a, Geometry& b) {
    a.Swap(&b);
  }
  inline void Swap(Geometry* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Geometry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Geometry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Geometry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Geometry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Geometry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Geometry* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Geometry";
  }
  protected:
  explicit Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLabelFieldNumber = 4,
    kCenterFieldNumber = 1,
    kSphereFieldNumber = 2,
    kBoxFieldNumber = 3,
    kCapsuleFieldNumber = 5,
  };
  // string label = 4 [json_name = "label"];
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // .viam.common.v1.Pose center = 1 [json_name = "center"];
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::viam::common::v1::Pose& center() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_center();
  ::viam::common::v1::Pose* mutable_center();
  void set_allocated_center(::viam::common::v1::Pose* center);
  private:
  const ::viam::common::v1::Pose& _internal_center() const;
  ::viam::common::v1::Pose* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::viam::common::v1::Pose* center);
  ::viam::common::v1::Pose* unsafe_arena_release_center();

  // .viam.common.v1.Sphere sphere = 2 [json_name = "sphere"];
  bool has_sphere() const;
  private:
  bool _internal_has_sphere() const;
  public:
  void clear_sphere();
  const ::viam::common::v1::Sphere& sphere() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Sphere* release_sphere();
  ::viam::common::v1::Sphere* mutable_sphere();
  void set_allocated_sphere(::viam::common::v1::Sphere* sphere);
  private:
  const ::viam::common::v1::Sphere& _internal_sphere() const;
  ::viam::common::v1::Sphere* _internal_mutable_sphere();
  public:
  void unsafe_arena_set_allocated_sphere(
      ::viam::common::v1::Sphere* sphere);
  ::viam::common::v1::Sphere* unsafe_arena_release_sphere();

  // .viam.common.v1.RectangularPrism box = 3 [json_name = "box"];
  bool has_box() const;
  private:
  bool _internal_has_box() const;
  public:
  void clear_box();
  const ::viam::common::v1::RectangularPrism& box() const;
  PROTOBUF_NODISCARD ::viam::common::v1::RectangularPrism* release_box();
  ::viam::common::v1::RectangularPrism* mutable_box();
  void set_allocated_box(::viam::common::v1::RectangularPrism* box);
  private:
  const ::viam::common::v1::RectangularPrism& _internal_box() const;
  ::viam::common::v1::RectangularPrism* _internal_mutable_box();
  public:
  void unsafe_arena_set_allocated_box(
      ::viam::common::v1::RectangularPrism* box);
  ::viam::common::v1::RectangularPrism* unsafe_arena_release_box();

  // .viam.common.v1.Capsule capsule = 5 [json_name = "capsule"];
  bool has_capsule() const;
  private:
  bool _internal_has_capsule() const;
  public:
  void clear_capsule();
  const ::viam::common::v1::Capsule& capsule() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Capsule* release_capsule();
  ::viam::common::v1::Capsule* mutable_capsule();
  void set_allocated_capsule(::viam::common::v1::Capsule* capsule);
  private:
  const ::viam::common::v1::Capsule& _internal_capsule() const;
  ::viam::common::v1::Capsule* _internal_mutable_capsule();
  public:
  void unsafe_arena_set_allocated_capsule(
      ::viam::common::v1::Capsule* capsule);
  ::viam::common::v1::Capsule* unsafe_arena_release_capsule();

  void clear_geometry_type();
  GeometryTypeCase geometry_type_case() const;
  // @@protoc_insertion_point(class_scope:viam.common.v1.Geometry)
 private:
  class _Internal;
  void set_has_sphere();
  void set_has_box();
  void set_has_capsule();

  inline bool has_geometry_type() const;
  inline void clear_has_geometry_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::viam::common::v1::Pose* center_;
  union GeometryTypeUnion {
    constexpr GeometryTypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::viam::common::v1::Sphere* sphere_;
    ::viam::common::v1::RectangularPrism* box_;
    ::viam::common::v1::Capsule* capsule_;
  } geometry_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class GeometriesInFrame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.GeometriesInFrame) */ {
 public:
  inline GeometriesInFrame() : GeometriesInFrame(nullptr) {}
  ~GeometriesInFrame() override;
  explicit PROTOBUF_CONSTEXPR GeometriesInFrame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeometriesInFrame(const GeometriesInFrame& from);
  GeometriesInFrame(GeometriesInFrame&& from) noexcept
    : GeometriesInFrame() {
    *this = ::std::move(from);
  }

  inline GeometriesInFrame& operator=(const GeometriesInFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeometriesInFrame& operator=(GeometriesInFrame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeometriesInFrame& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeometriesInFrame* internal_default_instance() {
    return reinterpret_cast<const GeometriesInFrame*>(
               &_GeometriesInFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GeometriesInFrame& a, GeometriesInFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(GeometriesInFrame* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeometriesInFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeometriesInFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeometriesInFrame>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeometriesInFrame& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GeometriesInFrame& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeometriesInFrame* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.GeometriesInFrame";
  }
  protected:
  explicit GeometriesInFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGeometriesFieldNumber = 2,
    kReferenceFrameFieldNumber = 1,
  };
  // repeated .viam.common.v1.Geometry geometries = 2 [json_name = "geometries"];
  int geometries_size() const;
  private:
  int _internal_geometries_size() const;
  public:
  void clear_geometries();
  ::viam::common::v1::Geometry* mutable_geometries(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Geometry >*
      mutable_geometries();
  private:
  const ::viam::common::v1::Geometry& _internal_geometries(int index) const;
  ::viam::common::v1::Geometry* _internal_add_geometries();
  public:
  const ::viam::common::v1::Geometry& geometries(int index) const;
  ::viam::common::v1::Geometry* add_geometries();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Geometry >&
      geometries() const;

  // string reference_frame = 1 [json_name = "referenceFrame"];
  void clear_reference_frame();
  const std::string& reference_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference_frame();
  PROTOBUF_NODISCARD std::string* release_reference_frame();
  void set_allocated_reference_frame(std::string* reference_frame);
  private:
  const std::string& _internal_reference_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_frame(const std::string& value);
  std::string* _internal_mutable_reference_frame();
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.GeometriesInFrame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Geometry > geometries_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_frame_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class PointCloudObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.PointCloudObject) */ {
 public:
  inline PointCloudObject() : PointCloudObject(nullptr) {}
  ~PointCloudObject() override;
  explicit PROTOBUF_CONSTEXPR PointCloudObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PointCloudObject(const PointCloudObject& from);
  PointCloudObject(PointCloudObject&& from) noexcept
    : PointCloudObject() {
    *this = ::std::move(from);
  }

  inline PointCloudObject& operator=(const PointCloudObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PointCloudObject& operator=(PointCloudObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PointCloudObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const PointCloudObject* internal_default_instance() {
    return reinterpret_cast<const PointCloudObject*>(
               &_PointCloudObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PointCloudObject& a, PointCloudObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PointCloudObject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PointCloudObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PointCloudObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PointCloudObject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PointCloudObject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PointCloudObject& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PointCloudObject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.PointCloudObject";
  }
  protected:
  explicit PointCloudObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointCloudFieldNumber = 1,
    kGeometriesFieldNumber = 2,
  };
  // bytes point_cloud = 1 [json_name = "pointCloud"];
  void clear_point_cloud();
  const std::string& point_cloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_cloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_cloud();
  PROTOBUF_NODISCARD std::string* release_point_cloud();
  void set_allocated_point_cloud(std::string* point_cloud);
  private:
  const std::string& _internal_point_cloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud(const std::string& value);
  std::string* _internal_mutable_point_cloud();
  public:

  // .viam.common.v1.GeometriesInFrame geometries = 2 [json_name = "geometries"];
  bool has_geometries() const;
  private:
  bool _internal_has_geometries() const;
  public:
  void clear_geometries();
  const ::viam::common::v1::GeometriesInFrame& geometries() const;
  PROTOBUF_NODISCARD ::viam::common::v1::GeometriesInFrame* release_geometries();
  ::viam::common::v1::GeometriesInFrame* mutable_geometries();
  void set_allocated_geometries(::viam::common::v1::GeometriesInFrame* geometries);
  private:
  const ::viam::common::v1::GeometriesInFrame& _internal_geometries() const;
  ::viam::common::v1::GeometriesInFrame* _internal_mutable_geometries();
  public:
  void unsafe_arena_set_allocated_geometries(
      ::viam::common::v1::GeometriesInFrame* geometries);
  ::viam::common::v1::GeometriesInFrame* unsafe_arena_release_geometries();

  // @@protoc_insertion_point(class_scope:viam.common.v1.PointCloudObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_cloud_;
  ::viam::common::v1::GeometriesInFrame* geometries_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class GeoPoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.GeoPoint) */ {
 public:
  inline GeoPoint() : GeoPoint(nullptr) {}
  ~GeoPoint() override;
  explicit PROTOBUF_CONSTEXPR GeoPoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GeoPoint(const GeoPoint& from);
  GeoPoint(GeoPoint&& from) noexcept
    : GeoPoint() {
    *this = ::std::move(from);
  }

  inline GeoPoint& operator=(const GeoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline GeoPoint& operator=(GeoPoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GeoPoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const GeoPoint* internal_default_instance() {
    return reinterpret_cast<const GeoPoint*>(
               &_GeoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GeoPoint& a, GeoPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(GeoPoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GeoPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GeoPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GeoPoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GeoPoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GeoPoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeoPoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.GeoPoint";
  }
  protected:
  explicit GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // double latitude = 1 [json_name = "latitude"];
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2 [json_name = "longitude"];
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.GeoPoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_;
  double longitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class Transform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.Transform) */ {
 public:
  inline Transform() : Transform(nullptr) {}
  ~Transform() override;
  explicit PROTOBUF_CONSTEXPR Transform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Transform(const Transform& from);
  Transform(Transform&& from) noexcept
    : Transform() {
    *this = ::std::move(from);
  }

  inline Transform& operator=(const Transform& from) {
    CopyFrom(from);
    return *this;
  }
  inline Transform& operator=(Transform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Transform& default_instance() {
    return *internal_default_instance();
  }
  static inline const Transform* internal_default_instance() {
    return reinterpret_cast<const Transform*>(
               &_Transform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(Transform& a, Transform& b) {
    a.Swap(&b);
  }
  inline void Swap(Transform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Transform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Transform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Transform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Transform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Transform& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Transform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.Transform";
  }
  protected:
  explicit Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReferenceFrameFieldNumber = 1,
    kPoseInObserverFrameFieldNumber = 2,
    kPhysicalObjectFieldNumber = 3,
  };
  // string reference_frame = 1 [json_name = "referenceFrame"];
  void clear_reference_frame();
  const std::string& reference_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reference_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reference_frame();
  PROTOBUF_NODISCARD std::string* release_reference_frame();
  void set_allocated_reference_frame(std::string* reference_frame);
  private:
  const std::string& _internal_reference_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reference_frame(const std::string& value);
  std::string* _internal_mutable_reference_frame();
  public:

  // .viam.common.v1.PoseInFrame pose_in_observer_frame = 2 [json_name = "poseInObserverFrame"];
  bool has_pose_in_observer_frame() const;
  private:
  bool _internal_has_pose_in_observer_frame() const;
  public:
  void clear_pose_in_observer_frame();
  const ::viam::common::v1::PoseInFrame& pose_in_observer_frame() const;
  PROTOBUF_NODISCARD ::viam::common::v1::PoseInFrame* release_pose_in_observer_frame();
  ::viam::common::v1::PoseInFrame* mutable_pose_in_observer_frame();
  void set_allocated_pose_in_observer_frame(::viam::common::v1::PoseInFrame* pose_in_observer_frame);
  private:
  const ::viam::common::v1::PoseInFrame& _internal_pose_in_observer_frame() const;
  ::viam::common::v1::PoseInFrame* _internal_mutable_pose_in_observer_frame();
  public:
  void unsafe_arena_set_allocated_pose_in_observer_frame(
      ::viam::common::v1::PoseInFrame* pose_in_observer_frame);
  ::viam::common::v1::PoseInFrame* unsafe_arena_release_pose_in_observer_frame();

  // optional .viam.common.v1.Geometry physical_object = 3 [json_name = "physicalObject"];
  bool has_physical_object() const;
  private:
  bool _internal_has_physical_object() const;
  public:
  void clear_physical_object();
  const ::viam::common::v1::Geometry& physical_object() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Geometry* release_physical_object();
  ::viam::common::v1::Geometry* mutable_physical_object();
  void set_allocated_physical_object(::viam::common::v1::Geometry* physical_object);
  private:
  const ::viam::common::v1::Geometry& _internal_physical_object() const;
  ::viam::common::v1::Geometry* _internal_mutable_physical_object();
  public:
  void unsafe_arena_set_allocated_physical_object(
      ::viam::common::v1::Geometry* physical_object);
  ::viam::common::v1::Geometry* unsafe_arena_release_physical_object();

  // @@protoc_insertion_point(class_scope:viam.common.v1.Transform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reference_frame_;
  ::viam::common::v1::PoseInFrame* pose_in_observer_frame_;
  ::viam::common::v1::Geometry* physical_object_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class WorldState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.WorldState) */ {
 public:
  inline WorldState() : WorldState(nullptr) {}
  ~WorldState() override;
  explicit PROTOBUF_CONSTEXPR WorldState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WorldState(const WorldState& from);
  WorldState(WorldState&& from) noexcept
    : WorldState() {
    *this = ::std::move(from);
  }

  inline WorldState& operator=(const WorldState& from) {
    CopyFrom(from);
    return *this;
  }
  inline WorldState& operator=(WorldState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WorldState& default_instance() {
    return *internal_default_instance();
  }
  static inline const WorldState* internal_default_instance() {
    return reinterpret_cast<const WorldState*>(
               &_WorldState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WorldState& a, WorldState& b) {
    a.Swap(&b);
  }
  inline void Swap(WorldState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WorldState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WorldState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WorldState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WorldState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WorldState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorldState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.WorldState";
  }
  protected:
  explicit WorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObstaclesFieldNumber = 1,
    kTransformsFieldNumber = 3,
  };
  // repeated .viam.common.v1.GeometriesInFrame obstacles = 1 [json_name = "obstacles"];
  int obstacles_size() const;
  private:
  int _internal_obstacles_size() const;
  public:
  void clear_obstacles();
  ::viam::common::v1::GeometriesInFrame* mutable_obstacles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::GeometriesInFrame >*
      mutable_obstacles();
  private:
  const ::viam::common::v1::GeometriesInFrame& _internal_obstacles(int index) const;
  ::viam::common::v1::GeometriesInFrame* _internal_add_obstacles();
  public:
  const ::viam::common::v1::GeometriesInFrame& obstacles(int index) const;
  ::viam::common::v1::GeometriesInFrame* add_obstacles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::GeometriesInFrame >&
      obstacles() const;

  // repeated .viam.common.v1.Transform transforms = 3 [json_name = "transforms"];
  int transforms_size() const;
  private:
  int _internal_transforms_size() const;
  public:
  void clear_transforms();
  ::viam::common::v1::Transform* mutable_transforms(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
      mutable_transforms();
  private:
  const ::viam::common::v1::Transform& _internal_transforms(int index) const;
  ::viam::common::v1::Transform* _internal_add_transforms();
  public:
  const ::viam::common::v1::Transform& transforms(int index) const;
  ::viam::common::v1::Transform* add_transforms();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
      transforms() const;

  // @@protoc_insertion_point(class_scope:viam.common.v1.WorldState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::GeometriesInFrame > obstacles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform > transforms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class ActuatorStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.ActuatorStatus) */ {
 public:
  inline ActuatorStatus() : ActuatorStatus(nullptr) {}
  ~ActuatorStatus() override;
  explicit PROTOBUF_CONSTEXPR ActuatorStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActuatorStatus(const ActuatorStatus& from);
  ActuatorStatus(ActuatorStatus&& from) noexcept
    : ActuatorStatus() {
    *this = ::std::move(from);
  }

  inline ActuatorStatus& operator=(const ActuatorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActuatorStatus& operator=(ActuatorStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActuatorStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActuatorStatus* internal_default_instance() {
    return reinterpret_cast<const ActuatorStatus*>(
               &_ActuatorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ActuatorStatus& a, ActuatorStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ActuatorStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActuatorStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActuatorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActuatorStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActuatorStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActuatorStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActuatorStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.ActuatorStatus";
  }
  protected:
  explicit ActuatorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIsMovingFieldNumber = 1,
  };
  // bool is_moving = 1 [json_name = "isMoving"];
  void clear_is_moving();
  bool is_moving() const;
  void set_is_moving(bool value);
  private:
  bool _internal_is_moving() const;
  void _internal_set_is_moving(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.common.v1.ActuatorStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool is_moving_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class DoCommandRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.DoCommandRequest) */ {
 public:
  inline DoCommandRequest() : DoCommandRequest(nullptr) {}
  ~DoCommandRequest() override;
  explicit PROTOBUF_CONSTEXPR DoCommandRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoCommandRequest(const DoCommandRequest& from);
  DoCommandRequest(DoCommandRequest&& from) noexcept
    : DoCommandRequest() {
    *this = ::std::move(from);
  }

  inline DoCommandRequest& operator=(const DoCommandRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoCommandRequest& operator=(DoCommandRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoCommandRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoCommandRequest* internal_default_instance() {
    return reinterpret_cast<const DoCommandRequest*>(
               &_DoCommandRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DoCommandRequest& a, DoCommandRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DoCommandRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoCommandRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoCommandRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoCommandRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoCommandRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoCommandRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoCommandRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.DoCommandRequest";
  }
  protected:
  explicit DoCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct command = 2 [json_name = "command"];
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::PROTOBUF_NAMESPACE_ID::Struct& command() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_command();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_command();
  void set_allocated_command(::PROTOBUF_NAMESPACE_ID::Struct* command);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_command() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::PROTOBUF_NAMESPACE_ID::Struct* command);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:viam.common.v1.DoCommandRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Struct* command_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// -------------------------------------------------------------------

class DoCommandResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.common.v1.DoCommandResponse) */ {
 public:
  inline DoCommandResponse() : DoCommandResponse(nullptr) {}
  ~DoCommandResponse() override;
  explicit PROTOBUF_CONSTEXPR DoCommandResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DoCommandResponse(const DoCommandResponse& from);
  DoCommandResponse(DoCommandResponse&& from) noexcept
    : DoCommandResponse() {
    *this = ::std::move(from);
  }

  inline DoCommandResponse& operator=(const DoCommandResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DoCommandResponse& operator=(DoCommandResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DoCommandResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DoCommandResponse* internal_default_instance() {
    return reinterpret_cast<const DoCommandResponse*>(
               &_DoCommandResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(DoCommandResponse& a, DoCommandResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DoCommandResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DoCommandResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DoCommandResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DoCommandResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DoCommandResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DoCommandResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DoCommandResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.common.v1.DoCommandResponse";
  }
  protected:
  explicit DoCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 1,
  };
  // .google.protobuf.Struct result = 1 [json_name = "result"];
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::PROTOBUF_NAMESPACE_ID::Struct& result() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_result();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_result();
  void set_allocated_result(::PROTOBUF_NAMESPACE_ID::Struct* result);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_result() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::PROTOBUF_NAMESPACE_ID::Struct* result);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:viam.common.v1.DoCommandResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Struct* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_common_2fv1_2fcommon_2eproto;
};
// ===================================================================

static const int kSafetyHeartbeatMonitoredFieldNumber = 84260;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false >
  safety_heartbeat_monitored;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ResourceName

// string namespace = 1 [json_name = "namespace"];
inline void ResourceName::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& ResourceName::namespace_() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.ResourceName.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceName::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.ResourceName.namespace)
}
inline std::string* ResourceName::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.ResourceName.namespace)
  return _s;
}
inline const std::string& ResourceName::_internal_namespace_() const {
  return namespace__.Get();
}
inline void ResourceName::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceName::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceName::release_namespace_() {
  // @@protoc_insertion_point(field_release:viam.common.v1.ResourceName.namespace)
  return namespace__.Release();
}
inline void ResourceName::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(namespace_, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (namespace__.IsDefault()) {
    namespace__.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.ResourceName.namespace)
}

// string type = 2 [json_name = "type"];
inline void ResourceName::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& ResourceName::type() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.ResourceName.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceName::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.ResourceName.type)
}
inline std::string* ResourceName::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.ResourceName.type)
  return _s;
}
inline const std::string& ResourceName::_internal_type() const {
  return type_.Get();
}
inline void ResourceName::_internal_set_type(const std::string& value) {
  
  type_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceName::_internal_mutable_type() {
  
  return type_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceName::release_type() {
  // @@protoc_insertion_point(field_release:viam.common.v1.ResourceName.type)
  return type_.Release();
}
inline void ResourceName::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault()) {
    type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.ResourceName.type)
}

// string subtype = 3 [json_name = "subtype"];
inline void ResourceName::clear_subtype() {
  subtype_.ClearToEmpty();
}
inline const std::string& ResourceName::subtype() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.ResourceName.subtype)
  return _internal_subtype();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceName::set_subtype(ArgT0&& arg0, ArgT... args) {
 
 subtype_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.ResourceName.subtype)
}
inline std::string* ResourceName::mutable_subtype() {
  std::string* _s = _internal_mutable_subtype();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.ResourceName.subtype)
  return _s;
}
inline const std::string& ResourceName::_internal_subtype() const {
  return subtype_.Get();
}
inline void ResourceName::_internal_set_subtype(const std::string& value) {
  
  subtype_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceName::_internal_mutable_subtype() {
  
  return subtype_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceName::release_subtype() {
  // @@protoc_insertion_point(field_release:viam.common.v1.ResourceName.subtype)
  return subtype_.Release();
}
inline void ResourceName::set_allocated_subtype(std::string* subtype) {
  if (subtype != nullptr) {
    
  } else {
    
  }
  subtype_.SetAllocated(subtype, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (subtype_.IsDefault()) {
    subtype_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.ResourceName.subtype)
}

// string name = 4 [json_name = "name"];
inline void ResourceName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ResourceName::name() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.ResourceName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResourceName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.ResourceName.name)
}
inline std::string* ResourceName::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.ResourceName.name)
  return _s;
}
inline const std::string& ResourceName::_internal_name() const {
  return name_.Get();
}
inline void ResourceName::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ResourceName::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ResourceName::release_name() {
  // @@protoc_insertion_point(field_release:viam.common.v1.ResourceName.name)
  return name_.Release();
}
inline void ResourceName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.ResourceName.name)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BoardStatus

// map<string, .viam.common.v1.AnalogStatus> analogs = 1 [json_name = "analogs"];
inline int BoardStatus::_internal_analogs_size() const {
  return analogs_.size();
}
inline int BoardStatus::analogs_size() const {
  return _internal_analogs_size();
}
inline void BoardStatus::clear_analogs() {
  analogs_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >&
BoardStatus::_internal_analogs() const {
  return analogs_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >&
BoardStatus::analogs() const {
  // @@protoc_insertion_point(field_map:viam.common.v1.BoardStatus.analogs)
  return _internal_analogs();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >*
BoardStatus::_internal_mutable_analogs() {
  return analogs_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >*
BoardStatus::mutable_analogs() {
  // @@protoc_insertion_point(field_mutable_map:viam.common.v1.BoardStatus.analogs)
  return _internal_mutable_analogs();
}

// map<string, .viam.common.v1.DigitalInterruptStatus> digital_interrupts = 2 [json_name = "digitalInterrupts"];
inline int BoardStatus::_internal_digital_interrupts_size() const {
  return digital_interrupts_.size();
}
inline int BoardStatus::digital_interrupts_size() const {
  return _internal_digital_interrupts_size();
}
inline void BoardStatus::clear_digital_interrupts() {
  digital_interrupts_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >&
BoardStatus::_internal_digital_interrupts() const {
  return digital_interrupts_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >&
BoardStatus::digital_interrupts() const {
  // @@protoc_insertion_point(field_map:viam.common.v1.BoardStatus.digital_interrupts)
  return _internal_digital_interrupts();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >*
BoardStatus::_internal_mutable_digital_interrupts() {
  return digital_interrupts_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >*
BoardStatus::mutable_digital_interrupts() {
  // @@protoc_insertion_point(field_mutable_map:viam.common.v1.BoardStatus.digital_interrupts)
  return _internal_mutable_digital_interrupts();
}

// -------------------------------------------------------------------

// AnalogStatus

// int32 value = 1 [json_name = "value"];
inline void AnalogStatus::clear_value() {
  value_ = 0;
}
inline int32_t AnalogStatus::_internal_value() const {
  return value_;
}
inline int32_t AnalogStatus::value() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.AnalogStatus.value)
  return _internal_value();
}
inline void AnalogStatus::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void AnalogStatus::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.AnalogStatus.value)
}

// -------------------------------------------------------------------

// DigitalInterruptStatus

// int64 value = 1 [json_name = "value"];
inline void DigitalInterruptStatus::clear_value() {
  value_ = int64_t{0};
}
inline int64_t DigitalInterruptStatus::_internal_value() const {
  return value_;
}
inline int64_t DigitalInterruptStatus::value() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.DigitalInterruptStatus.value)
  return _internal_value();
}
inline void DigitalInterruptStatus::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void DigitalInterruptStatus::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.DigitalInterruptStatus.value)
}

// -------------------------------------------------------------------

// Pose

// double x = 1 [json_name = "x"];
inline void Pose::clear_x() {
  x_ = 0;
}
inline double Pose::_internal_x() const {
  return x_;
}
inline double Pose::x() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.x)
  return _internal_x();
}
inline void Pose::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Pose::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.x)
}

// double y = 2 [json_name = "y"];
inline void Pose::clear_y() {
  y_ = 0;
}
inline double Pose::_internal_y() const {
  return y_;
}
inline double Pose::y() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.y)
  return _internal_y();
}
inline void Pose::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Pose::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.y)
}

// double z = 3 [json_name = "z"];
inline void Pose::clear_z() {
  z_ = 0;
}
inline double Pose::_internal_z() const {
  return z_;
}
inline double Pose::z() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.z)
  return _internal_z();
}
inline void Pose::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Pose::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.z)
}

// double o_x = 4 [json_name = "oX"];
inline void Pose::clear_o_x() {
  o_x_ = 0;
}
inline double Pose::_internal_o_x() const {
  return o_x_;
}
inline double Pose::o_x() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.o_x)
  return _internal_o_x();
}
inline void Pose::_internal_set_o_x(double value) {
  
  o_x_ = value;
}
inline void Pose::set_o_x(double value) {
  _internal_set_o_x(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.o_x)
}

// double o_y = 5 [json_name = "oY"];
inline void Pose::clear_o_y() {
  o_y_ = 0;
}
inline double Pose::_internal_o_y() const {
  return o_y_;
}
inline double Pose::o_y() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.o_y)
  return _internal_o_y();
}
inline void Pose::_internal_set_o_y(double value) {
  
  o_y_ = value;
}
inline void Pose::set_o_y(double value) {
  _internal_set_o_y(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.o_y)
}

// double o_z = 6 [json_name = "oZ"];
inline void Pose::clear_o_z() {
  o_z_ = 0;
}
inline double Pose::_internal_o_z() const {
  return o_z_;
}
inline double Pose::o_z() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.o_z)
  return _internal_o_z();
}
inline void Pose::_internal_set_o_z(double value) {
  
  o_z_ = value;
}
inline void Pose::set_o_z(double value) {
  _internal_set_o_z(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.o_z)
}

// double theta = 7 [json_name = "theta"];
inline void Pose::clear_theta() {
  theta_ = 0;
}
inline double Pose::_internal_theta() const {
  return theta_;
}
inline double Pose::theta() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Pose.theta)
  return _internal_theta();
}
inline void Pose::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Pose::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Pose.theta)
}

// -------------------------------------------------------------------

// Orientation

// double o_x = 1 [json_name = "oX"];
inline void Orientation::clear_o_x() {
  o_x_ = 0;
}
inline double Orientation::_internal_o_x() const {
  return o_x_;
}
inline double Orientation::o_x() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Orientation.o_x)
  return _internal_o_x();
}
inline void Orientation::_internal_set_o_x(double value) {
  
  o_x_ = value;
}
inline void Orientation::set_o_x(double value) {
  _internal_set_o_x(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Orientation.o_x)
}

// double o_y = 2 [json_name = "oY"];
inline void Orientation::clear_o_y() {
  o_y_ = 0;
}
inline double Orientation::_internal_o_y() const {
  return o_y_;
}
inline double Orientation::o_y() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Orientation.o_y)
  return _internal_o_y();
}
inline void Orientation::_internal_set_o_y(double value) {
  
  o_y_ = value;
}
inline void Orientation::set_o_y(double value) {
  _internal_set_o_y(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Orientation.o_y)
}

// double o_z = 3 [json_name = "oZ"];
inline void Orientation::clear_o_z() {
  o_z_ = 0;
}
inline double Orientation::_internal_o_z() const {
  return o_z_;
}
inline double Orientation::o_z() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Orientation.o_z)
  return _internal_o_z();
}
inline void Orientation::_internal_set_o_z(double value) {
  
  o_z_ = value;
}
inline void Orientation::set_o_z(double value) {
  _internal_set_o_z(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Orientation.o_z)
}

// double theta = 4 [json_name = "theta"];
inline void Orientation::clear_theta() {
  theta_ = 0;
}
inline double Orientation::_internal_theta() const {
  return theta_;
}
inline double Orientation::theta() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Orientation.theta)
  return _internal_theta();
}
inline void Orientation::_internal_set_theta(double value) {
  
  theta_ = value;
}
inline void Orientation::set_theta(double value) {
  _internal_set_theta(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Orientation.theta)
}

// -------------------------------------------------------------------

// PoseInFrame

// string reference_frame = 1 [json_name = "referenceFrame"];
inline void PoseInFrame::clear_reference_frame() {
  reference_frame_.ClearToEmpty();
}
inline const std::string& PoseInFrame::reference_frame() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.PoseInFrame.reference_frame)
  return _internal_reference_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PoseInFrame::set_reference_frame(ArgT0&& arg0, ArgT... args) {
 
 reference_frame_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.PoseInFrame.reference_frame)
}
inline std::string* PoseInFrame::mutable_reference_frame() {
  std::string* _s = _internal_mutable_reference_frame();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.PoseInFrame.reference_frame)
  return _s;
}
inline const std::string& PoseInFrame::_internal_reference_frame() const {
  return reference_frame_.Get();
}
inline void PoseInFrame::_internal_set_reference_frame(const std::string& value) {
  
  reference_frame_.Set(value, GetArenaForAllocation());
}
inline std::string* PoseInFrame::_internal_mutable_reference_frame() {
  
  return reference_frame_.Mutable(GetArenaForAllocation());
}
inline std::string* PoseInFrame::release_reference_frame() {
  // @@protoc_insertion_point(field_release:viam.common.v1.PoseInFrame.reference_frame)
  return reference_frame_.Release();
}
inline void PoseInFrame::set_allocated_reference_frame(std::string* reference_frame) {
  if (reference_frame != nullptr) {
    
  } else {
    
  }
  reference_frame_.SetAllocated(reference_frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reference_frame_.IsDefault()) {
    reference_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.PoseInFrame.reference_frame)
}

// .viam.common.v1.Pose pose = 2 [json_name = "pose"];
inline bool PoseInFrame::_internal_has_pose() const {
  return this != internal_default_instance() && pose_ != nullptr;
}
inline bool PoseInFrame::has_pose() const {
  return _internal_has_pose();
}
inline void PoseInFrame::clear_pose() {
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
}
inline const ::viam::common::v1::Pose& PoseInFrame::_internal_pose() const {
  const ::viam::common::v1::Pose* p = pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(
      ::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& PoseInFrame::pose() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.PoseInFrame.pose)
  return _internal_pose();
}
inline void PoseInFrame::unsafe_arena_set_allocated_pose(
    ::viam::common::v1::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_);
  }
  pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.PoseInFrame.pose)
}
inline ::viam::common::v1::Pose* PoseInFrame::release_pose() {
  
  ::viam::common::v1::Pose* temp = pose_;
  pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Pose* PoseInFrame::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:viam.common.v1.PoseInFrame.pose)
  
  ::viam::common::v1::Pose* temp = pose_;
  pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* PoseInFrame::_internal_mutable_pose() {
  
  if (pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArenaForAllocation());
    pose_ = p;
  }
  return pose_;
}
inline ::viam::common::v1::Pose* PoseInFrame::mutable_pose() {
  ::viam::common::v1::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.PoseInFrame.pose)
  return _msg;
}
inline void PoseInFrame::set_allocated_pose(::viam::common::v1::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_;
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose);
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.PoseInFrame.pose)
}

// -------------------------------------------------------------------

// Vector3

// double x = 1 [json_name = "x"];
inline void Vector3::clear_x() {
  x_ = 0;
}
inline double Vector3::_internal_x() const {
  return x_;
}
inline double Vector3::x() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(double value) {
  
  x_ = value;
}
inline void Vector3::set_x(double value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Vector3.x)
}

// double y = 2 [json_name = "y"];
inline void Vector3::clear_y() {
  y_ = 0;
}
inline double Vector3::_internal_y() const {
  return y_;
}
inline double Vector3::y() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(double value) {
  
  y_ = value;
}
inline void Vector3::set_y(double value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Vector3.y)
}

// double z = 3 [json_name = "z"];
inline void Vector3::clear_z() {
  z_ = 0;
}
inline double Vector3::_internal_z() const {
  return z_;
}
inline double Vector3::z() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(double value) {
  
  z_ = value;
}
inline void Vector3::set_z(double value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Vector3.z)
}

// -------------------------------------------------------------------

// Sphere

// double radius_mm = 1 [json_name = "radiusMm"];
inline void Sphere::clear_radius_mm() {
  radius_mm_ = 0;
}
inline double Sphere::_internal_radius_mm() const {
  return radius_mm_;
}
inline double Sphere::radius_mm() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Sphere.radius_mm)
  return _internal_radius_mm();
}
inline void Sphere::_internal_set_radius_mm(double value) {
  
  radius_mm_ = value;
}
inline void Sphere::set_radius_mm(double value) {
  _internal_set_radius_mm(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Sphere.radius_mm)
}

// -------------------------------------------------------------------

// Capsule

// double radius_mm = 1 [json_name = "radiusMm"];
inline void Capsule::clear_radius_mm() {
  radius_mm_ = 0;
}
inline double Capsule::_internal_radius_mm() const {
  return radius_mm_;
}
inline double Capsule::radius_mm() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Capsule.radius_mm)
  return _internal_radius_mm();
}
inline void Capsule::_internal_set_radius_mm(double value) {
  
  radius_mm_ = value;
}
inline void Capsule::set_radius_mm(double value) {
  _internal_set_radius_mm(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Capsule.radius_mm)
}

// double length_mm = 2 [json_name = "lengthMm"];
inline void Capsule::clear_length_mm() {
  length_mm_ = 0;
}
inline double Capsule::_internal_length_mm() const {
  return length_mm_;
}
inline double Capsule::length_mm() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Capsule.length_mm)
  return _internal_length_mm();
}
inline void Capsule::_internal_set_length_mm(double value) {
  
  length_mm_ = value;
}
inline void Capsule::set_length_mm(double value) {
  _internal_set_length_mm(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.Capsule.length_mm)
}

// -------------------------------------------------------------------

// RectangularPrism

// .viam.common.v1.Vector3 dims_mm = 1 [json_name = "dimsMm"];
inline bool RectangularPrism::_internal_has_dims_mm() const {
  return this != internal_default_instance() && dims_mm_ != nullptr;
}
inline bool RectangularPrism::has_dims_mm() const {
  return _internal_has_dims_mm();
}
inline void RectangularPrism::clear_dims_mm() {
  if (GetArenaForAllocation() == nullptr && dims_mm_ != nullptr) {
    delete dims_mm_;
  }
  dims_mm_ = nullptr;
}
inline const ::viam::common::v1::Vector3& RectangularPrism::_internal_dims_mm() const {
  const ::viam::common::v1::Vector3* p = dims_mm_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Vector3&>(
      ::viam::common::v1::_Vector3_default_instance_);
}
inline const ::viam::common::v1::Vector3& RectangularPrism::dims_mm() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.RectangularPrism.dims_mm)
  return _internal_dims_mm();
}
inline void RectangularPrism::unsafe_arena_set_allocated_dims_mm(
    ::viam::common::v1::Vector3* dims_mm) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dims_mm_);
  }
  dims_mm_ = dims_mm;
  if (dims_mm) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.RectangularPrism.dims_mm)
}
inline ::viam::common::v1::Vector3* RectangularPrism::release_dims_mm() {
  
  ::viam::common::v1::Vector3* temp = dims_mm_;
  dims_mm_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Vector3* RectangularPrism::unsafe_arena_release_dims_mm() {
  // @@protoc_insertion_point(field_release:viam.common.v1.RectangularPrism.dims_mm)
  
  ::viam::common::v1::Vector3* temp = dims_mm_;
  dims_mm_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Vector3* RectangularPrism::_internal_mutable_dims_mm() {
  
  if (dims_mm_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Vector3>(GetArenaForAllocation());
    dims_mm_ = p;
  }
  return dims_mm_;
}
inline ::viam::common::v1::Vector3* RectangularPrism::mutable_dims_mm() {
  ::viam::common::v1::Vector3* _msg = _internal_mutable_dims_mm();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.RectangularPrism.dims_mm)
  return _msg;
}
inline void RectangularPrism::set_allocated_dims_mm(::viam::common::v1::Vector3* dims_mm) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete dims_mm_;
  }
  if (dims_mm) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(dims_mm);
    if (message_arena != submessage_arena) {
      dims_mm = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dims_mm, submessage_arena);
    }
    
  } else {
    
  }
  dims_mm_ = dims_mm;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.RectangularPrism.dims_mm)
}

// -------------------------------------------------------------------

// Geometry

// .viam.common.v1.Pose center = 1 [json_name = "center"];
inline bool Geometry::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool Geometry::has_center() const {
  return _internal_has_center();
}
inline void Geometry::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::viam::common::v1::Pose& Geometry::_internal_center() const {
  const ::viam::common::v1::Pose* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(
      ::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& Geometry::center() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Geometry.center)
  return _internal_center();
}
inline void Geometry::unsafe_arena_set_allocated_center(
    ::viam::common::v1::Pose* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.Geometry.center)
}
inline ::viam::common::v1::Pose* Geometry::release_center() {
  
  ::viam::common::v1::Pose* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Pose* Geometry::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Geometry.center)
  
  ::viam::common::v1::Pose* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* Geometry::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::viam::common::v1::Pose* Geometry::mutable_center() {
  ::viam::common::v1::Pose* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Geometry.center)
  return _msg;
}
inline void Geometry::set_allocated_center(::viam::common::v1::Pose* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Geometry.center)
}

// .viam.common.v1.Sphere sphere = 2 [json_name = "sphere"];
inline bool Geometry::_internal_has_sphere() const {
  return geometry_type_case() == kSphere;
}
inline bool Geometry::has_sphere() const {
  return _internal_has_sphere();
}
inline void Geometry::set_has_sphere() {
  _oneof_case_[0] = kSphere;
}
inline void Geometry::clear_sphere() {
  if (_internal_has_sphere()) {
    if (GetArenaForAllocation() == nullptr) {
      delete geometry_type_.sphere_;
    }
    clear_has_geometry_type();
  }
}
inline ::viam::common::v1::Sphere* Geometry::release_sphere() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Geometry.sphere)
  if (_internal_has_sphere()) {
    clear_has_geometry_type();
    ::viam::common::v1::Sphere* temp = geometry_type_.sphere_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    geometry_type_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::common::v1::Sphere& Geometry::_internal_sphere() const {
  return _internal_has_sphere()
      ? *geometry_type_.sphere_
      : reinterpret_cast< ::viam::common::v1::Sphere&>(::viam::common::v1::_Sphere_default_instance_);
}
inline const ::viam::common::v1::Sphere& Geometry::sphere() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Geometry.sphere)
  return _internal_sphere();
}
inline ::viam::common::v1::Sphere* Geometry::unsafe_arena_release_sphere() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.common.v1.Geometry.sphere)
  if (_internal_has_sphere()) {
    clear_has_geometry_type();
    ::viam::common::v1::Sphere* temp = geometry_type_.sphere_;
    geometry_type_.sphere_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Geometry::unsafe_arena_set_allocated_sphere(::viam::common::v1::Sphere* sphere) {
  clear_geometry_type();
  if (sphere) {
    set_has_sphere();
    geometry_type_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.Geometry.sphere)
}
inline ::viam::common::v1::Sphere* Geometry::_internal_mutable_sphere() {
  if (!_internal_has_sphere()) {
    clear_geometry_type();
    set_has_sphere();
    geometry_type_.sphere_ = CreateMaybeMessage< ::viam::common::v1::Sphere >(GetArenaForAllocation());
  }
  return geometry_type_.sphere_;
}
inline ::viam::common::v1::Sphere* Geometry::mutable_sphere() {
  ::viam::common::v1::Sphere* _msg = _internal_mutable_sphere();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Geometry.sphere)
  return _msg;
}

// .viam.common.v1.RectangularPrism box = 3 [json_name = "box"];
inline bool Geometry::_internal_has_box() const {
  return geometry_type_case() == kBox;
}
inline bool Geometry::has_box() const {
  return _internal_has_box();
}
inline void Geometry::set_has_box() {
  _oneof_case_[0] = kBox;
}
inline void Geometry::clear_box() {
  if (_internal_has_box()) {
    if (GetArenaForAllocation() == nullptr) {
      delete geometry_type_.box_;
    }
    clear_has_geometry_type();
  }
}
inline ::viam::common::v1::RectangularPrism* Geometry::release_box() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Geometry.box)
  if (_internal_has_box()) {
    clear_has_geometry_type();
    ::viam::common::v1::RectangularPrism* temp = geometry_type_.box_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    geometry_type_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::common::v1::RectangularPrism& Geometry::_internal_box() const {
  return _internal_has_box()
      ? *geometry_type_.box_
      : reinterpret_cast< ::viam::common::v1::RectangularPrism&>(::viam::common::v1::_RectangularPrism_default_instance_);
}
inline const ::viam::common::v1::RectangularPrism& Geometry::box() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Geometry.box)
  return _internal_box();
}
inline ::viam::common::v1::RectangularPrism* Geometry::unsafe_arena_release_box() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.common.v1.Geometry.box)
  if (_internal_has_box()) {
    clear_has_geometry_type();
    ::viam::common::v1::RectangularPrism* temp = geometry_type_.box_;
    geometry_type_.box_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Geometry::unsafe_arena_set_allocated_box(::viam::common::v1::RectangularPrism* box) {
  clear_geometry_type();
  if (box) {
    set_has_box();
    geometry_type_.box_ = box;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.Geometry.box)
}
inline ::viam::common::v1::RectangularPrism* Geometry::_internal_mutable_box() {
  if (!_internal_has_box()) {
    clear_geometry_type();
    set_has_box();
    geometry_type_.box_ = CreateMaybeMessage< ::viam::common::v1::RectangularPrism >(GetArenaForAllocation());
  }
  return geometry_type_.box_;
}
inline ::viam::common::v1::RectangularPrism* Geometry::mutable_box() {
  ::viam::common::v1::RectangularPrism* _msg = _internal_mutable_box();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Geometry.box)
  return _msg;
}

// .viam.common.v1.Capsule capsule = 5 [json_name = "capsule"];
inline bool Geometry::_internal_has_capsule() const {
  return geometry_type_case() == kCapsule;
}
inline bool Geometry::has_capsule() const {
  return _internal_has_capsule();
}
inline void Geometry::set_has_capsule() {
  _oneof_case_[0] = kCapsule;
}
inline void Geometry::clear_capsule() {
  if (_internal_has_capsule()) {
    if (GetArenaForAllocation() == nullptr) {
      delete geometry_type_.capsule_;
    }
    clear_has_geometry_type();
  }
}
inline ::viam::common::v1::Capsule* Geometry::release_capsule() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Geometry.capsule)
  if (_internal_has_capsule()) {
    clear_has_geometry_type();
    ::viam::common::v1::Capsule* temp = geometry_type_.capsule_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    geometry_type_.capsule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::common::v1::Capsule& Geometry::_internal_capsule() const {
  return _internal_has_capsule()
      ? *geometry_type_.capsule_
      : reinterpret_cast< ::viam::common::v1::Capsule&>(::viam::common::v1::_Capsule_default_instance_);
}
inline const ::viam::common::v1::Capsule& Geometry::capsule() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Geometry.capsule)
  return _internal_capsule();
}
inline ::viam::common::v1::Capsule* Geometry::unsafe_arena_release_capsule() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.common.v1.Geometry.capsule)
  if (_internal_has_capsule()) {
    clear_has_geometry_type();
    ::viam::common::v1::Capsule* temp = geometry_type_.capsule_;
    geometry_type_.capsule_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Geometry::unsafe_arena_set_allocated_capsule(::viam::common::v1::Capsule* capsule) {
  clear_geometry_type();
  if (capsule) {
    set_has_capsule();
    geometry_type_.capsule_ = capsule;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.Geometry.capsule)
}
inline ::viam::common::v1::Capsule* Geometry::_internal_mutable_capsule() {
  if (!_internal_has_capsule()) {
    clear_geometry_type();
    set_has_capsule();
    geometry_type_.capsule_ = CreateMaybeMessage< ::viam::common::v1::Capsule >(GetArenaForAllocation());
  }
  return geometry_type_.capsule_;
}
inline ::viam::common::v1::Capsule* Geometry::mutable_capsule() {
  ::viam::common::v1::Capsule* _msg = _internal_mutable_capsule();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Geometry.capsule)
  return _msg;
}

// string label = 4 [json_name = "label"];
inline void Geometry::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Geometry::label() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Geometry.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Geometry::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.Geometry.label)
}
inline std::string* Geometry::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Geometry.label)
  return _s;
}
inline const std::string& Geometry::_internal_label() const {
  return label_.Get();
}
inline void Geometry::_internal_set_label(const std::string& value) {
  
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* Geometry::_internal_mutable_label() {
  
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* Geometry::release_label() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Geometry.label)
  return label_.Release();
}
inline void Geometry::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Geometry.label)
}

inline bool Geometry::has_geometry_type() const {
  return geometry_type_case() != GEOMETRY_TYPE_NOT_SET;
}
inline void Geometry::clear_has_geometry_type() {
  _oneof_case_[0] = GEOMETRY_TYPE_NOT_SET;
}
inline Geometry::GeometryTypeCase Geometry::geometry_type_case() const {
  return Geometry::GeometryTypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GeometriesInFrame

// string reference_frame = 1 [json_name = "referenceFrame"];
inline void GeometriesInFrame::clear_reference_frame() {
  reference_frame_.ClearToEmpty();
}
inline const std::string& GeometriesInFrame::reference_frame() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.GeometriesInFrame.reference_frame)
  return _internal_reference_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GeometriesInFrame::set_reference_frame(ArgT0&& arg0, ArgT... args) {
 
 reference_frame_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.GeometriesInFrame.reference_frame)
}
inline std::string* GeometriesInFrame::mutable_reference_frame() {
  std::string* _s = _internal_mutable_reference_frame();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.GeometriesInFrame.reference_frame)
  return _s;
}
inline const std::string& GeometriesInFrame::_internal_reference_frame() const {
  return reference_frame_.Get();
}
inline void GeometriesInFrame::_internal_set_reference_frame(const std::string& value) {
  
  reference_frame_.Set(value, GetArenaForAllocation());
}
inline std::string* GeometriesInFrame::_internal_mutable_reference_frame() {
  
  return reference_frame_.Mutable(GetArenaForAllocation());
}
inline std::string* GeometriesInFrame::release_reference_frame() {
  // @@protoc_insertion_point(field_release:viam.common.v1.GeometriesInFrame.reference_frame)
  return reference_frame_.Release();
}
inline void GeometriesInFrame::set_allocated_reference_frame(std::string* reference_frame) {
  if (reference_frame != nullptr) {
    
  } else {
    
  }
  reference_frame_.SetAllocated(reference_frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reference_frame_.IsDefault()) {
    reference_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.GeometriesInFrame.reference_frame)
}

// repeated .viam.common.v1.Geometry geometries = 2 [json_name = "geometries"];
inline int GeometriesInFrame::_internal_geometries_size() const {
  return geometries_.size();
}
inline int GeometriesInFrame::geometries_size() const {
  return _internal_geometries_size();
}
inline void GeometriesInFrame::clear_geometries() {
  geometries_.Clear();
}
inline ::viam::common::v1::Geometry* GeometriesInFrame::mutable_geometries(int index) {
  // @@protoc_insertion_point(field_mutable:viam.common.v1.GeometriesInFrame.geometries)
  return geometries_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Geometry >*
GeometriesInFrame::mutable_geometries() {
  // @@protoc_insertion_point(field_mutable_list:viam.common.v1.GeometriesInFrame.geometries)
  return &geometries_;
}
inline const ::viam::common::v1::Geometry& GeometriesInFrame::_internal_geometries(int index) const {
  return geometries_.Get(index);
}
inline const ::viam::common::v1::Geometry& GeometriesInFrame::geometries(int index) const {
  // @@protoc_insertion_point(field_get:viam.common.v1.GeometriesInFrame.geometries)
  return _internal_geometries(index);
}
inline ::viam::common::v1::Geometry* GeometriesInFrame::_internal_add_geometries() {
  return geometries_.Add();
}
inline ::viam::common::v1::Geometry* GeometriesInFrame::add_geometries() {
  ::viam::common::v1::Geometry* _add = _internal_add_geometries();
  // @@protoc_insertion_point(field_add:viam.common.v1.GeometriesInFrame.geometries)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Geometry >&
GeometriesInFrame::geometries() const {
  // @@protoc_insertion_point(field_list:viam.common.v1.GeometriesInFrame.geometries)
  return geometries_;
}

// -------------------------------------------------------------------

// PointCloudObject

// bytes point_cloud = 1 [json_name = "pointCloud"];
inline void PointCloudObject::clear_point_cloud() {
  point_cloud_.ClearToEmpty();
}
inline const std::string& PointCloudObject::point_cloud() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.PointCloudObject.point_cloud)
  return _internal_point_cloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PointCloudObject::set_point_cloud(ArgT0&& arg0, ArgT... args) {
 
 point_cloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.PointCloudObject.point_cloud)
}
inline std::string* PointCloudObject::mutable_point_cloud() {
  std::string* _s = _internal_mutable_point_cloud();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.PointCloudObject.point_cloud)
  return _s;
}
inline const std::string& PointCloudObject::_internal_point_cloud() const {
  return point_cloud_.Get();
}
inline void PointCloudObject::_internal_set_point_cloud(const std::string& value) {
  
  point_cloud_.Set(value, GetArenaForAllocation());
}
inline std::string* PointCloudObject::_internal_mutable_point_cloud() {
  
  return point_cloud_.Mutable(GetArenaForAllocation());
}
inline std::string* PointCloudObject::release_point_cloud() {
  // @@protoc_insertion_point(field_release:viam.common.v1.PointCloudObject.point_cloud)
  return point_cloud_.Release();
}
inline void PointCloudObject::set_allocated_point_cloud(std::string* point_cloud) {
  if (point_cloud != nullptr) {
    
  } else {
    
  }
  point_cloud_.SetAllocated(point_cloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (point_cloud_.IsDefault()) {
    point_cloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.PointCloudObject.point_cloud)
}

// .viam.common.v1.GeometriesInFrame geometries = 2 [json_name = "geometries"];
inline bool PointCloudObject::_internal_has_geometries() const {
  return this != internal_default_instance() && geometries_ != nullptr;
}
inline bool PointCloudObject::has_geometries() const {
  return _internal_has_geometries();
}
inline void PointCloudObject::clear_geometries() {
  if (GetArenaForAllocation() == nullptr && geometries_ != nullptr) {
    delete geometries_;
  }
  geometries_ = nullptr;
}
inline const ::viam::common::v1::GeometriesInFrame& PointCloudObject::_internal_geometries() const {
  const ::viam::common::v1::GeometriesInFrame* p = geometries_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::GeometriesInFrame&>(
      ::viam::common::v1::_GeometriesInFrame_default_instance_);
}
inline const ::viam::common::v1::GeometriesInFrame& PointCloudObject::geometries() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.PointCloudObject.geometries)
  return _internal_geometries();
}
inline void PointCloudObject::unsafe_arena_set_allocated_geometries(
    ::viam::common::v1::GeometriesInFrame* geometries) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(geometries_);
  }
  geometries_ = geometries;
  if (geometries) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.PointCloudObject.geometries)
}
inline ::viam::common::v1::GeometriesInFrame* PointCloudObject::release_geometries() {
  
  ::viam::common::v1::GeometriesInFrame* temp = geometries_;
  geometries_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::GeometriesInFrame* PointCloudObject::unsafe_arena_release_geometries() {
  // @@protoc_insertion_point(field_release:viam.common.v1.PointCloudObject.geometries)
  
  ::viam::common::v1::GeometriesInFrame* temp = geometries_;
  geometries_ = nullptr;
  return temp;
}
inline ::viam::common::v1::GeometriesInFrame* PointCloudObject::_internal_mutable_geometries() {
  
  if (geometries_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::GeometriesInFrame>(GetArenaForAllocation());
    geometries_ = p;
  }
  return geometries_;
}
inline ::viam::common::v1::GeometriesInFrame* PointCloudObject::mutable_geometries() {
  ::viam::common::v1::GeometriesInFrame* _msg = _internal_mutable_geometries();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.PointCloudObject.geometries)
  return _msg;
}
inline void PointCloudObject::set_allocated_geometries(::viam::common::v1::GeometriesInFrame* geometries) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete geometries_;
  }
  if (geometries) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(geometries);
    if (message_arena != submessage_arena) {
      geometries = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, geometries, submessage_arena);
    }
    
  } else {
    
  }
  geometries_ = geometries;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.PointCloudObject.geometries)
}

// -------------------------------------------------------------------

// GeoPoint

// double latitude = 1 [json_name = "latitude"];
inline void GeoPoint::clear_latitude() {
  latitude_ = 0;
}
inline double GeoPoint::_internal_latitude() const {
  return latitude_;
}
inline double GeoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.GeoPoint.latitude)
  return _internal_latitude();
}
inline void GeoPoint::_internal_set_latitude(double value) {
  
  latitude_ = value;
}
inline void GeoPoint::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.GeoPoint.latitude)
}

// double longitude = 2 [json_name = "longitude"];
inline void GeoPoint::clear_longitude() {
  longitude_ = 0;
}
inline double GeoPoint::_internal_longitude() const {
  return longitude_;
}
inline double GeoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.GeoPoint.longitude)
  return _internal_longitude();
}
inline void GeoPoint::_internal_set_longitude(double value) {
  
  longitude_ = value;
}
inline void GeoPoint::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.GeoPoint.longitude)
}

// -------------------------------------------------------------------

// Transform

// string reference_frame = 1 [json_name = "referenceFrame"];
inline void Transform::clear_reference_frame() {
  reference_frame_.ClearToEmpty();
}
inline const std::string& Transform::reference_frame() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Transform.reference_frame)
  return _internal_reference_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Transform::set_reference_frame(ArgT0&& arg0, ArgT... args) {
 
 reference_frame_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.Transform.reference_frame)
}
inline std::string* Transform::mutable_reference_frame() {
  std::string* _s = _internal_mutable_reference_frame();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Transform.reference_frame)
  return _s;
}
inline const std::string& Transform::_internal_reference_frame() const {
  return reference_frame_.Get();
}
inline void Transform::_internal_set_reference_frame(const std::string& value) {
  
  reference_frame_.Set(value, GetArenaForAllocation());
}
inline std::string* Transform::_internal_mutable_reference_frame() {
  
  return reference_frame_.Mutable(GetArenaForAllocation());
}
inline std::string* Transform::release_reference_frame() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Transform.reference_frame)
  return reference_frame_.Release();
}
inline void Transform::set_allocated_reference_frame(std::string* reference_frame) {
  if (reference_frame != nullptr) {
    
  } else {
    
  }
  reference_frame_.SetAllocated(reference_frame, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reference_frame_.IsDefault()) {
    reference_frame_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Transform.reference_frame)
}

// .viam.common.v1.PoseInFrame pose_in_observer_frame = 2 [json_name = "poseInObserverFrame"];
inline bool Transform::_internal_has_pose_in_observer_frame() const {
  return this != internal_default_instance() && pose_in_observer_frame_ != nullptr;
}
inline bool Transform::has_pose_in_observer_frame() const {
  return _internal_has_pose_in_observer_frame();
}
inline void Transform::clear_pose_in_observer_frame() {
  if (GetArenaForAllocation() == nullptr && pose_in_observer_frame_ != nullptr) {
    delete pose_in_observer_frame_;
  }
  pose_in_observer_frame_ = nullptr;
}
inline const ::viam::common::v1::PoseInFrame& Transform::_internal_pose_in_observer_frame() const {
  const ::viam::common::v1::PoseInFrame* p = pose_in_observer_frame_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::PoseInFrame&>(
      ::viam::common::v1::_PoseInFrame_default_instance_);
}
inline const ::viam::common::v1::PoseInFrame& Transform::pose_in_observer_frame() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Transform.pose_in_observer_frame)
  return _internal_pose_in_observer_frame();
}
inline void Transform::unsafe_arena_set_allocated_pose_in_observer_frame(
    ::viam::common::v1::PoseInFrame* pose_in_observer_frame) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose_in_observer_frame_);
  }
  pose_in_observer_frame_ = pose_in_observer_frame;
  if (pose_in_observer_frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.Transform.pose_in_observer_frame)
}
inline ::viam::common::v1::PoseInFrame* Transform::release_pose_in_observer_frame() {
  
  ::viam::common::v1::PoseInFrame* temp = pose_in_observer_frame_;
  pose_in_observer_frame_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::PoseInFrame* Transform::unsafe_arena_release_pose_in_observer_frame() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Transform.pose_in_observer_frame)
  
  ::viam::common::v1::PoseInFrame* temp = pose_in_observer_frame_;
  pose_in_observer_frame_ = nullptr;
  return temp;
}
inline ::viam::common::v1::PoseInFrame* Transform::_internal_mutable_pose_in_observer_frame() {
  
  if (pose_in_observer_frame_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::PoseInFrame>(GetArenaForAllocation());
    pose_in_observer_frame_ = p;
  }
  return pose_in_observer_frame_;
}
inline ::viam::common::v1::PoseInFrame* Transform::mutable_pose_in_observer_frame() {
  ::viam::common::v1::PoseInFrame* _msg = _internal_mutable_pose_in_observer_frame();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Transform.pose_in_observer_frame)
  return _msg;
}
inline void Transform::set_allocated_pose_in_observer_frame(::viam::common::v1::PoseInFrame* pose_in_observer_frame) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pose_in_observer_frame_;
  }
  if (pose_in_observer_frame) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(pose_in_observer_frame);
    if (message_arena != submessage_arena) {
      pose_in_observer_frame = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose_in_observer_frame, submessage_arena);
    }
    
  } else {
    
  }
  pose_in_observer_frame_ = pose_in_observer_frame;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Transform.pose_in_observer_frame)
}

// optional .viam.common.v1.Geometry physical_object = 3 [json_name = "physicalObject"];
inline bool Transform::_internal_has_physical_object() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || physical_object_ != nullptr);
  return value;
}
inline bool Transform::has_physical_object() const {
  return _internal_has_physical_object();
}
inline void Transform::clear_physical_object() {
  if (physical_object_ != nullptr) physical_object_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::viam::common::v1::Geometry& Transform::_internal_physical_object() const {
  const ::viam::common::v1::Geometry* p = physical_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Geometry&>(
      ::viam::common::v1::_Geometry_default_instance_);
}
inline const ::viam::common::v1::Geometry& Transform::physical_object() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.Transform.physical_object)
  return _internal_physical_object();
}
inline void Transform::unsafe_arena_set_allocated_physical_object(
    ::viam::common::v1::Geometry* physical_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(physical_object_);
  }
  physical_object_ = physical_object;
  if (physical_object) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.Transform.physical_object)
}
inline ::viam::common::v1::Geometry* Transform::release_physical_object() {
  _has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::Geometry* temp = physical_object_;
  physical_object_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Geometry* Transform::unsafe_arena_release_physical_object() {
  // @@protoc_insertion_point(field_release:viam.common.v1.Transform.physical_object)
  _has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::Geometry* temp = physical_object_;
  physical_object_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Geometry* Transform::_internal_mutable_physical_object() {
  _has_bits_[0] |= 0x00000001u;
  if (physical_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Geometry>(GetArenaForAllocation());
    physical_object_ = p;
  }
  return physical_object_;
}
inline ::viam::common::v1::Geometry* Transform::mutable_physical_object() {
  ::viam::common::v1::Geometry* _msg = _internal_mutable_physical_object();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.Transform.physical_object)
  return _msg;
}
inline void Transform::set_allocated_physical_object(::viam::common::v1::Geometry* physical_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete physical_object_;
  }
  if (physical_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(physical_object);
    if (message_arena != submessage_arena) {
      physical_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, physical_object, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  physical_object_ = physical_object;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Transform.physical_object)
}

// -------------------------------------------------------------------

// WorldState

// repeated .viam.common.v1.GeometriesInFrame obstacles = 1 [json_name = "obstacles"];
inline int WorldState::_internal_obstacles_size() const {
  return obstacles_.size();
}
inline int WorldState::obstacles_size() const {
  return _internal_obstacles_size();
}
inline void WorldState::clear_obstacles() {
  obstacles_.Clear();
}
inline ::viam::common::v1::GeometriesInFrame* WorldState::mutable_obstacles(int index) {
  // @@protoc_insertion_point(field_mutable:viam.common.v1.WorldState.obstacles)
  return obstacles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::GeometriesInFrame >*
WorldState::mutable_obstacles() {
  // @@protoc_insertion_point(field_mutable_list:viam.common.v1.WorldState.obstacles)
  return &obstacles_;
}
inline const ::viam::common::v1::GeometriesInFrame& WorldState::_internal_obstacles(int index) const {
  return obstacles_.Get(index);
}
inline const ::viam::common::v1::GeometriesInFrame& WorldState::obstacles(int index) const {
  // @@protoc_insertion_point(field_get:viam.common.v1.WorldState.obstacles)
  return _internal_obstacles(index);
}
inline ::viam::common::v1::GeometriesInFrame* WorldState::_internal_add_obstacles() {
  return obstacles_.Add();
}
inline ::viam::common::v1::GeometriesInFrame* WorldState::add_obstacles() {
  ::viam::common::v1::GeometriesInFrame* _add = _internal_add_obstacles();
  // @@protoc_insertion_point(field_add:viam.common.v1.WorldState.obstacles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::GeometriesInFrame >&
WorldState::obstacles() const {
  // @@protoc_insertion_point(field_list:viam.common.v1.WorldState.obstacles)
  return obstacles_;
}

// repeated .viam.common.v1.Transform transforms = 3 [json_name = "transforms"];
inline int WorldState::_internal_transforms_size() const {
  return transforms_.size();
}
inline int WorldState::transforms_size() const {
  return _internal_transforms_size();
}
inline void WorldState::clear_transforms() {
  transforms_.Clear();
}
inline ::viam::common::v1::Transform* WorldState::mutable_transforms(int index) {
  // @@protoc_insertion_point(field_mutable:viam.common.v1.WorldState.transforms)
  return transforms_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >*
WorldState::mutable_transforms() {
  // @@protoc_insertion_point(field_mutable_list:viam.common.v1.WorldState.transforms)
  return &transforms_;
}
inline const ::viam::common::v1::Transform& WorldState::_internal_transforms(int index) const {
  return transforms_.Get(index);
}
inline const ::viam::common::v1::Transform& WorldState::transforms(int index) const {
  // @@protoc_insertion_point(field_get:viam.common.v1.WorldState.transforms)
  return _internal_transforms(index);
}
inline ::viam::common::v1::Transform* WorldState::_internal_add_transforms() {
  return transforms_.Add();
}
inline ::viam::common::v1::Transform* WorldState::add_transforms() {
  ::viam::common::v1::Transform* _add = _internal_add_transforms();
  // @@protoc_insertion_point(field_add:viam.common.v1.WorldState.transforms)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::common::v1::Transform >&
WorldState::transforms() const {
  // @@protoc_insertion_point(field_list:viam.common.v1.WorldState.transforms)
  return transforms_;
}

// -------------------------------------------------------------------

// ActuatorStatus

// bool is_moving = 1 [json_name = "isMoving"];
inline void ActuatorStatus::clear_is_moving() {
  is_moving_ = false;
}
inline bool ActuatorStatus::_internal_is_moving() const {
  return is_moving_;
}
inline bool ActuatorStatus::is_moving() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.ActuatorStatus.is_moving)
  return _internal_is_moving();
}
inline void ActuatorStatus::_internal_set_is_moving(bool value) {
  
  is_moving_ = value;
}
inline void ActuatorStatus::set_is_moving(bool value) {
  _internal_set_is_moving(value);
  // @@protoc_insertion_point(field_set:viam.common.v1.ActuatorStatus.is_moving)
}

// -------------------------------------------------------------------

// DoCommandRequest

// string name = 1 [json_name = "name"];
inline void DoCommandRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DoCommandRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.DoCommandRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DoCommandRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.common.v1.DoCommandRequest.name)
}
inline std::string* DoCommandRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.DoCommandRequest.name)
  return _s;
}
inline const std::string& DoCommandRequest::_internal_name() const {
  return name_.Get();
}
inline void DoCommandRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* DoCommandRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* DoCommandRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.common.v1.DoCommandRequest.name)
  return name_.Release();
}
inline void DoCommandRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.DoCommandRequest.name)
}

// .google.protobuf.Struct command = 2 [json_name = "command"];
inline bool DoCommandRequest::_internal_has_command() const {
  return this != internal_default_instance() && command_ != nullptr;
}
inline bool DoCommandRequest::has_command() const {
  return _internal_has_command();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& DoCommandRequest::_internal_command() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = command_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& DoCommandRequest::command() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.DoCommandRequest.command)
  return _internal_command();
}
inline void DoCommandRequest::unsafe_arena_set_allocated_command(
    ::PROTOBUF_NAMESPACE_ID::Struct* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  command_ = command;
  if (command) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.DoCommandRequest.command)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandRequest::release_command() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = command_;
  command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandRequest::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:viam.common.v1.DoCommandRequest.command)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = command_;
  command_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandRequest::_internal_mutable_command() {
  
  if (command_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    command_ = p;
  }
  return command_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandRequest::mutable_command() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.DoCommandRequest.command)
  return _msg;
}
inline void DoCommandRequest::set_allocated_command(::PROTOBUF_NAMESPACE_ID::Struct* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(command_);
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(command));
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    
  } else {
    
  }
  command_ = command;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.DoCommandRequest.command)
}

// -------------------------------------------------------------------

// DoCommandResponse

// .google.protobuf.Struct result = 1 [json_name = "result"];
inline bool DoCommandResponse::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool DoCommandResponse::has_result() const {
  return _internal_has_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& DoCommandResponse::_internal_result() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& DoCommandResponse::result() const {
  // @@protoc_insertion_point(field_get:viam.common.v1.DoCommandResponse.result)
  return _internal_result();
}
inline void DoCommandResponse::unsafe_arena_set_allocated_result(
    ::PROTOBUF_NAMESPACE_ID::Struct* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.common.v1.DoCommandResponse.result)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandResponse::release_result() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandResponse::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:viam.common.v1.DoCommandResponse.result)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandResponse::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* DoCommandResponse::mutable_result() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:viam.common.v1.DoCommandResponse.result)
  return _msg;
}
inline void DoCommandResponse::set_allocated_result(::PROTOBUF_NAMESPACE_ID::Struct* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result));
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.DoCommandResponse.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace common
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_common_2fv1_2fcommon_2eproto
