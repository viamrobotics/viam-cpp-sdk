// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common/v1/common.proto

#include "common/v1/common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace common {
namespace v1 {
PROTOBUF_CONSTEXPR ResourceName::ResourceName(
    ::_pbi::ConstantInitialized)
  : namespace__(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , subtype_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct ResourceNameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ResourceNameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ResourceNameDefaultTypeInternal() {}
  union {
    ResourceName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ResourceNameDefaultTypeInternal _ResourceName_default_instance_;
PROTOBUF_CONSTEXPR BoardStatus_AnalogsEntry_DoNotUse::BoardStatus_AnalogsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct BoardStatus_AnalogsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStatus_AnalogsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStatus_AnalogsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BoardStatus_AnalogsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStatus_AnalogsEntry_DoNotUseDefaultTypeInternal _BoardStatus_AnalogsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BoardStatus_DigitalInterruptsEntry_DoNotUse::BoardStatus_DigitalInterruptsEntry_DoNotUse(
    ::_pbi::ConstantInitialized){}
struct BoardStatus_DigitalInterruptsEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStatus_DigitalInterruptsEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStatus_DigitalInterruptsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    BoardStatus_DigitalInterruptsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStatus_DigitalInterruptsEntry_DoNotUseDefaultTypeInternal _BoardStatus_DigitalInterruptsEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR BoardStatus::BoardStatus(
    ::_pbi::ConstantInitialized)
  : analogs_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , digital_interrupts_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct BoardStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BoardStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~BoardStatusDefaultTypeInternal() {}
  union {
    BoardStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BoardStatusDefaultTypeInternal _BoardStatus_default_instance_;
PROTOBUF_CONSTEXPR AnalogStatus::AnalogStatus(
    ::_pbi::ConstantInitialized)
  : value_(0){}
struct AnalogStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AnalogStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AnalogStatusDefaultTypeInternal() {}
  union {
    AnalogStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AnalogStatusDefaultTypeInternal _AnalogStatus_default_instance_;
PROTOBUF_CONSTEXPR DigitalInterruptStatus::DigitalInterruptStatus(
    ::_pbi::ConstantInitialized)
  : value_(int64_t{0}){}
struct DigitalInterruptStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DigitalInterruptStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DigitalInterruptStatusDefaultTypeInternal() {}
  union {
    DigitalInterruptStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DigitalInterruptStatusDefaultTypeInternal _DigitalInterruptStatus_default_instance_;
PROTOBUF_CONSTEXPR Pose::Pose(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0)
  , o_x_(0)
  , o_y_(0)
  , o_z_(0)
  , theta_(0){}
struct PoseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseDefaultTypeInternal() {}
  union {
    Pose _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseDefaultTypeInternal _Pose_default_instance_;
PROTOBUF_CONSTEXPR Orientation::Orientation(
    ::_pbi::ConstantInitialized)
  : o_x_(0)
  , o_y_(0)
  , o_z_(0)
  , theta_(0){}
struct OrientationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OrientationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~OrientationDefaultTypeInternal() {}
  union {
    Orientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OrientationDefaultTypeInternal _Orientation_default_instance_;
PROTOBUF_CONSTEXPR PoseInFrame::PoseInFrame(
    ::_pbi::ConstantInitialized)
  : reference_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pose_(nullptr){}
struct PoseInFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PoseInFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PoseInFrameDefaultTypeInternal() {}
  union {
    PoseInFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PoseInFrameDefaultTypeInternal _PoseInFrame_default_instance_;
PROTOBUF_CONSTEXPR Vector3::Vector3(
    ::_pbi::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DefaultTypeInternal {
  PROTOBUF_CONSTEXPR Vector3DefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 Vector3DefaultTypeInternal _Vector3_default_instance_;
PROTOBUF_CONSTEXPR Sphere::Sphere(
    ::_pbi::ConstantInitialized)
  : radius_mm_(0){}
struct SphereDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SphereDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SphereDefaultTypeInternal() {}
  union {
    Sphere _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SphereDefaultTypeInternal _Sphere_default_instance_;
PROTOBUF_CONSTEXPR Capsule::Capsule(
    ::_pbi::ConstantInitialized)
  : radius_mm_(0)
  , length_mm_(0){}
struct CapsuleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CapsuleDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CapsuleDefaultTypeInternal() {}
  union {
    Capsule _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CapsuleDefaultTypeInternal _Capsule_default_instance_;
PROTOBUF_CONSTEXPR RectangularPrism::RectangularPrism(
    ::_pbi::ConstantInitialized)
  : dims_mm_(nullptr){}
struct RectangularPrismDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RectangularPrismDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RectangularPrismDefaultTypeInternal() {}
  union {
    RectangularPrism _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RectangularPrismDefaultTypeInternal _RectangularPrism_default_instance_;
PROTOBUF_CONSTEXPR Geometry::Geometry(
    ::_pbi::ConstantInitialized)
  : label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , center_(nullptr)
  , _oneof_case_{}{}
struct GeometryDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeometryDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeometryDefaultTypeInternal() {}
  union {
    Geometry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeometryDefaultTypeInternal _Geometry_default_instance_;
PROTOBUF_CONSTEXPR GeometriesInFrame::GeometriesInFrame(
    ::_pbi::ConstantInitialized)
  : geometries_()
  , reference_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GeometriesInFrameDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeometriesInFrameDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeometriesInFrameDefaultTypeInternal() {}
  union {
    GeometriesInFrame _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeometriesInFrameDefaultTypeInternal _GeometriesInFrame_default_instance_;
PROTOBUF_CONSTEXPR PointCloudObject::PointCloudObject(
    ::_pbi::ConstantInitialized)
  : point_cloud_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , geometries_(nullptr){}
struct PointCloudObjectDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PointCloudObjectDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PointCloudObjectDefaultTypeInternal() {}
  union {
    PointCloudObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PointCloudObjectDefaultTypeInternal _PointCloudObject_default_instance_;
PROTOBUF_CONSTEXPR GeoPoint::GeoPoint(
    ::_pbi::ConstantInitialized)
  : latitude_(0)
  , longitude_(0){}
struct GeoPointDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GeoPointDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GeoPointDefaultTypeInternal() {}
  union {
    GeoPoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GeoPointDefaultTypeInternal _GeoPoint_default_instance_;
PROTOBUF_CONSTEXPR Transform::Transform(
    ::_pbi::ConstantInitialized)
  : reference_frame_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , pose_in_observer_frame_(nullptr)
  , physical_object_(nullptr){}
struct TransformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TransformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TransformDefaultTypeInternal() {}
  union {
    Transform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TransformDefaultTypeInternal _Transform_default_instance_;
PROTOBUF_CONSTEXPR WorldState::WorldState(
    ::_pbi::ConstantInitialized)
  : obstacles_()
  , transforms_(){}
struct WorldStateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WorldStateDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WorldStateDefaultTypeInternal() {}
  union {
    WorldState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WorldStateDefaultTypeInternal _WorldState_default_instance_;
PROTOBUF_CONSTEXPR ActuatorStatus::ActuatorStatus(
    ::_pbi::ConstantInitialized)
  : is_moving_(false){}
struct ActuatorStatusDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ActuatorStatusDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ActuatorStatusDefaultTypeInternal() {}
  union {
    ActuatorStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ActuatorStatusDefaultTypeInternal _ActuatorStatus_default_instance_;
PROTOBUF_CONSTEXPR DoCommandRequest::DoCommandRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , command_(nullptr){}
struct DoCommandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoCommandRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoCommandRequestDefaultTypeInternal() {}
  union {
    DoCommandRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoCommandRequestDefaultTypeInternal _DoCommandRequest_default_instance_;
PROTOBUF_CONSTEXPR DoCommandResponse::DoCommandResponse(
    ::_pbi::ConstantInitialized)
  : result_(nullptr){}
struct DoCommandResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DoCommandResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DoCommandResponseDefaultTypeInternal() {}
  union {
    DoCommandResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DoCommandResponseDefaultTypeInternal _DoCommandResponse_default_instance_;
}  // namespace v1
}  // namespace common
}  // namespace viam
static ::_pb::Metadata file_level_metadata_common_2fv1_2fcommon_2eproto[22];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_common_2fv1_2fcommon_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_common_2fv1_2fcommon_2eproto = nullptr;

const uint32_t TableStruct_common_2fv1_2fcommon_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ResourceName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ResourceName, namespace__),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ResourceName, type_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ResourceName, subtype_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ResourceName, name_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus, analogs_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::BoardStatus, digital_interrupts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::AnalogStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::AnalogStatus, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DigitalInterruptStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DigitalInterruptStatus, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, x_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, y_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, z_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, o_x_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, o_y_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, o_z_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Pose, theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Orientation, o_x_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Orientation, o_y_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Orientation, o_z_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Orientation, theta_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::PoseInFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::PoseInFrame, reference_frame_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::PoseInFrame, pose_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Sphere, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Sphere, radius_mm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Capsule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Capsule, radius_mm_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Capsule, length_mm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::RectangularPrism, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::RectangularPrism, dims_mm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Geometry, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Geometry, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Geometry, center_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Geometry, label_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Geometry, geometry_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::GeometriesInFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::GeometriesInFrame, reference_frame_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::GeometriesInFrame, geometries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::PointCloudObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::PointCloudObject, point_cloud_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::PointCloudObject, geometries_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::GeoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::GeoPoint, latitude_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::GeoPoint, longitude_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Transform, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Transform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Transform, reference_frame_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Transform, pose_in_observer_frame_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::Transform, physical_object_),
  ~0u,
  ~0u,
  0,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::WorldState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::WorldState, obstacles_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::WorldState, transforms_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ActuatorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::ActuatorStatus, is_moving_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DoCommandRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DoCommandRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DoCommandRequest, command_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DoCommandResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::common::v1::DoCommandResponse, result_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::common::v1::ResourceName)},
  { 10, 18, -1, sizeof(::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::viam::common::v1::BoardStatus)},
  { 38, -1, -1, sizeof(::viam::common::v1::AnalogStatus)},
  { 45, -1, -1, sizeof(::viam::common::v1::DigitalInterruptStatus)},
  { 52, -1, -1, sizeof(::viam::common::v1::Pose)},
  { 65, -1, -1, sizeof(::viam::common::v1::Orientation)},
  { 75, -1, -1, sizeof(::viam::common::v1::PoseInFrame)},
  { 83, -1, -1, sizeof(::viam::common::v1::Vector3)},
  { 92, -1, -1, sizeof(::viam::common::v1::Sphere)},
  { 99, -1, -1, sizeof(::viam::common::v1::Capsule)},
  { 107, -1, -1, sizeof(::viam::common::v1::RectangularPrism)},
  { 114, -1, -1, sizeof(::viam::common::v1::Geometry)},
  { 126, -1, -1, sizeof(::viam::common::v1::GeometriesInFrame)},
  { 134, -1, -1, sizeof(::viam::common::v1::PointCloudObject)},
  { 142, -1, -1, sizeof(::viam::common::v1::GeoPoint)},
  { 150, 159, -1, sizeof(::viam::common::v1::Transform)},
  { 162, -1, -1, sizeof(::viam::common::v1::WorldState)},
  { 170, -1, -1, sizeof(::viam::common::v1::ActuatorStatus)},
  { 177, -1, -1, sizeof(::viam::common::v1::DoCommandRequest)},
  { 185, -1, -1, sizeof(::viam::common::v1::DoCommandResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::common::v1::_ResourceName_default_instance_._instance,
  &::viam::common::v1::_BoardStatus_AnalogsEntry_DoNotUse_default_instance_._instance,
  &::viam::common::v1::_BoardStatus_DigitalInterruptsEntry_DoNotUse_default_instance_._instance,
  &::viam::common::v1::_BoardStatus_default_instance_._instance,
  &::viam::common::v1::_AnalogStatus_default_instance_._instance,
  &::viam::common::v1::_DigitalInterruptStatus_default_instance_._instance,
  &::viam::common::v1::_Pose_default_instance_._instance,
  &::viam::common::v1::_Orientation_default_instance_._instance,
  &::viam::common::v1::_PoseInFrame_default_instance_._instance,
  &::viam::common::v1::_Vector3_default_instance_._instance,
  &::viam::common::v1::_Sphere_default_instance_._instance,
  &::viam::common::v1::_Capsule_default_instance_._instance,
  &::viam::common::v1::_RectangularPrism_default_instance_._instance,
  &::viam::common::v1::_Geometry_default_instance_._instance,
  &::viam::common::v1::_GeometriesInFrame_default_instance_._instance,
  &::viam::common::v1::_PointCloudObject_default_instance_._instance,
  &::viam::common::v1::_GeoPoint_default_instance_._instance,
  &::viam::common::v1::_Transform_default_instance_._instance,
  &::viam::common::v1::_WorldState_default_instance_._instance,
  &::viam::common::v1::_ActuatorStatus_default_instance_._instance,
  &::viam::common::v1::_DoCommandRequest_default_instance_._instance,
  &::viam::common::v1::_DoCommandResponse_default_instance_._instance,
};

const char descriptor_table_protodef_common_2fv1_2fcommon_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026common/v1/common.proto\022\016viam.common.v1"
  "\032 google/protobuf/descriptor.proto\032\034goog"
  "le/protobuf/struct.proto\"n\n\014ResourceName"
  "\022\034\n\tnamespace\030\001 \001(\tR\tnamespace\022\022\n\004type\030\002"
  " \001(\tR\004type\022\030\n\007subtype\030\003 \001(\tR\007subtype\022\022\n\004"
  "name\030\004 \001(\tR\004name\"\374\002\n\013BoardStatus\022B\n\007anal"
  "ogs\030\001 \003(\0132(.viam.common.v1.BoardStatus.A"
  "nalogsEntryR\007analogs\022a\n\022digital_interrup"
  "ts\030\002 \003(\01322.viam.common.v1.BoardStatus.Di"
  "gitalInterruptsEntryR\021digitalInterrupts\032"
  "X\n\014AnalogsEntry\022\020\n\003key\030\001 \001(\tR\003key\0222\n\005val"
  "ue\030\002 \001(\0132\034.viam.common.v1.AnalogStatusR\005"
  "value:\0028\001\032l\n\026DigitalInterruptsEntry\022\020\n\003k"
  "ey\030\001 \001(\tR\003key\022<\n\005value\030\002 \001(\0132&.viam.comm"
  "on.v1.DigitalInterruptStatusR\005value:\0028\001\""
  "$\n\014AnalogStatus\022\024\n\005value\030\001 \001(\005R\005value\".\n"
  "\026DigitalInterruptStatus\022\024\n\005value\030\001 \001(\003R\005"
  "value\"y\n\004Pose\022\014\n\001x\030\001 \001(\001R\001x\022\014\n\001y\030\002 \001(\001R\001"
  "y\022\014\n\001z\030\003 \001(\001R\001z\022\017\n\003o_x\030\004 \001(\001R\002oX\022\017\n\003o_y\030"
  "\005 \001(\001R\002oY\022\017\n\003o_z\030\006 \001(\001R\002oZ\022\024\n\005theta\030\007 \001("
  "\001R\005theta\"V\n\013Orientation\022\017\n\003o_x\030\001 \001(\001R\002oX"
  "\022\017\n\003o_y\030\002 \001(\001R\002oY\022\017\n\003o_z\030\003 \001(\001R\002oZ\022\024\n\005th"
  "eta\030\004 \001(\001R\005theta\"`\n\013PoseInFrame\022\'\n\017refer"
  "ence_frame\030\001 \001(\tR\016referenceFrame\022(\n\004pose"
  "\030\002 \001(\0132\024.viam.common.v1.PoseR\004pose\"3\n\007Ve"
  "ctor3\022\014\n\001x\030\001 \001(\001R\001x\022\014\n\001y\030\002 \001(\001R\001y\022\014\n\001z\030\003"
  " \001(\001R\001z\"%\n\006Sphere\022\033\n\tradius_mm\030\001 \001(\001R\010ra"
  "diusMm\"C\n\007Capsule\022\033\n\tradius_mm\030\001 \001(\001R\010ra"
  "diusMm\022\033\n\tlength_mm\030\002 \001(\001R\010lengthMm\"D\n\020R"
  "ectangularPrism\0220\n\007dims_mm\030\001 \001(\0132\027.viam."
  "common.v1.Vector3R\006dimsMm\"\374\001\n\010Geometry\022,"
  "\n\006center\030\001 \001(\0132\024.viam.common.v1.PoseR\006ce"
  "nter\0220\n\006sphere\030\002 \001(\0132\026.viam.common.v1.Sp"
  "hereH\000R\006sphere\0224\n\003box\030\003 \001(\0132 .viam.commo"
  "n.v1.RectangularPrismH\000R\003box\0223\n\007capsule\030"
  "\005 \001(\0132\027.viam.common.v1.CapsuleH\000R\007capsul"
  "e\022\024\n\005label\030\004 \001(\tR\005labelB\017\n\rgeometry_type"
  "\"v\n\021GeometriesInFrame\022\'\n\017reference_frame"
  "\030\001 \001(\tR\016referenceFrame\0228\n\ngeometries\030\002 \003"
  "(\0132\030.viam.common.v1.GeometryR\ngeometries"
  "\"v\n\020PointCloudObject\022\037\n\013point_cloud\030\001 \001("
  "\014R\npointCloud\022A\n\ngeometries\030\002 \001(\0132!.viam"
  ".common.v1.GeometriesInFrameR\ngeometries"
  "\"D\n\010GeoPoint\022\032\n\010latitude\030\001 \001(\001R\010latitude"
  "\022\034\n\tlongitude\030\002 \001(\001R\tlongitude\"\342\001\n\tTrans"
  "form\022\'\n\017reference_frame\030\001 \001(\tR\016reference"
  "Frame\022P\n\026pose_in_observer_frame\030\002 \001(\0132\033."
  "viam.common.v1.PoseInFrameR\023poseInObserv"
  "erFrame\022F\n\017physical_object\030\003 \001(\0132\030.viam."
  "common.v1.GeometryH\000R\016physicalObject\210\001\001B"
  "\022\n\020_physical_object\"\210\001\n\nWorldState\022\?\n\tob"
  "stacles\030\001 \003(\0132!.viam.common.v1.Geometrie"
  "sInFrameR\tobstacles\0229\n\ntransforms\030\003 \003(\0132"
  "\031.viam.common.v1.TransformR\ntransforms\"-"
  "\n\016ActuatorStatus\022\033\n\tis_moving\030\001 \001(\010R\010isM"
  "oving\"Y\n\020DoCommandRequest\022\022\n\004name\030\001 \001(\tR"
  "\004name\0221\n\007command\030\002 \001(\0132\027.google.protobuf"
  ".StructR\007command\"D\n\021DoCommandResponse\022/\n"
  "\006result\030\001 \001(\0132\027.google.protobuf.StructR\006"
  "result:a\n\032safety_heartbeat_monitored\022\036.g"
  "oogle.protobuf.MethodOptions\030\244\222\005 \001(\010R\030sa"
  "fetyHeartbeatMonitored\210\001\001B/\n\022com.viam.co"
  "mmon.v1Z\031go.viam.com/api/common/v1b\006prot"
  "o3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_common_2fv1_2fcommon_2eproto_deps[2] = {
  &::descriptor_table_google_2fprotobuf_2fdescriptor_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_common_2fv1_2fcommon_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_common_2fv1_2fcommon_2eproto = {
    false, false, 2522, descriptor_table_protodef_common_2fv1_2fcommon_2eproto,
    "common/v1/common.proto",
    &descriptor_table_common_2fv1_2fcommon_2eproto_once, descriptor_table_common_2fv1_2fcommon_2eproto_deps, 2, 22,
    schemas, file_default_instances, TableStruct_common_2fv1_2fcommon_2eproto::offsets,
    file_level_metadata_common_2fv1_2fcommon_2eproto, file_level_enum_descriptors_common_2fv1_2fcommon_2eproto,
    file_level_service_descriptors_common_2fv1_2fcommon_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_common_2fv1_2fcommon_2eproto_getter() {
  return &descriptor_table_common_2fv1_2fcommon_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_common_2fv1_2fcommon_2eproto(&descriptor_table_common_2fv1_2fcommon_2eproto);
namespace viam {
namespace common {
namespace v1 {

// ===================================================================

class ResourceName::_Internal {
 public:
};

ResourceName::ResourceName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.ResourceName)
}
ResourceName::ResourceName(const ResourceName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  namespace__.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    namespace__.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(from._internal_type(), 
      GetArenaForAllocation());
  }
  subtype_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subtype_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subtype().empty()) {
    subtype_.Set(from._internal_subtype(), 
      GetArenaForAllocation());
  }
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.ResourceName)
}

inline void ResourceName::SharedCtor() {
namespace__.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  namespace__.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subtype_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subtype_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ResourceName::~ResourceName() {
  // @@protoc_insertion_point(destructor:viam.common.v1.ResourceName)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ResourceName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  namespace__.Destroy();
  type_.Destroy();
  subtype_.Destroy();
  name_.Destroy();
}

void ResourceName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourceName::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.ResourceName)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  namespace__.ClearToEmpty();
  type_.ClearToEmpty();
  subtype_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourceName::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string namespace = 1 [json_name = "namespace"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.ResourceName.namespace"));
        } else
          goto handle_unusual;
        continue;
      // string type = 2 [json_name = "type"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.ResourceName.type"));
        } else
          goto handle_unusual;
        continue;
      // string subtype = 3 [json_name = "subtype"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_subtype();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.ResourceName.subtype"));
        } else
          goto handle_unusual;
        continue;
      // string name = 4 [json_name = "name"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.ResourceName.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResourceName::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.ResourceName)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string namespace = 1 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.ResourceName.namespace");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_namespace_(), target);
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.ResourceName.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // string subtype = 3 [json_name = "subtype"];
  if (!this->_internal_subtype().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subtype().data(), static_cast<int>(this->_internal_subtype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.ResourceName.subtype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_subtype(), target);
  }

  // string name = 4 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.ResourceName.name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.ResourceName)
  return target;
}

size_t ResourceName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.ResourceName)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string namespace = 1 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string type = 2 [json_name = "type"];
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string subtype = 3 [json_name = "subtype"];
  if (!this->_internal_subtype().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subtype());
  }

  // string name = 4 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourceName::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourceName::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourceName::GetClassData() const { return &_class_data_; }

void ResourceName::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResourceName *>(to)->MergeFrom(
      static_cast<const ResourceName &>(from));
}


void ResourceName::MergeFrom(const ResourceName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.ResourceName)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_subtype().empty()) {
    _internal_set_subtype(from._internal_subtype());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourceName::CopyFrom(const ResourceName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.ResourceName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourceName::IsInitialized() const {
  return true;
}

void ResourceName::InternalSwap(ResourceName* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &namespace__, lhs_arena,
      &other->namespace__, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &subtype_, lhs_arena,
      &other->subtype_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourceName::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[0]);
}

// ===================================================================

BoardStatus_AnalogsEntry_DoNotUse::BoardStatus_AnalogsEntry_DoNotUse() {}
BoardStatus_AnalogsEntry_DoNotUse::BoardStatus_AnalogsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BoardStatus_AnalogsEntry_DoNotUse::MergeFrom(const BoardStatus_AnalogsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BoardStatus_AnalogsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[1]);
}

// ===================================================================

BoardStatus_DigitalInterruptsEntry_DoNotUse::BoardStatus_DigitalInterruptsEntry_DoNotUse() {}
BoardStatus_DigitalInterruptsEntry_DoNotUse::BoardStatus_DigitalInterruptsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void BoardStatus_DigitalInterruptsEntry_DoNotUse::MergeFrom(const BoardStatus_DigitalInterruptsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata BoardStatus_DigitalInterruptsEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[2]);
}

// ===================================================================

class BoardStatus::_Internal {
 public:
};

BoardStatus::BoardStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  analogs_(arena),
  digital_interrupts_(arena) {
  SharedCtor();
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &BoardStatus::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.BoardStatus)
}
BoardStatus::BoardStatus(const BoardStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  analogs_.MergeFrom(from.analogs_);
  digital_interrupts_.MergeFrom(from.digital_interrupts_);
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.BoardStatus)
}

inline void BoardStatus::SharedCtor() {
}

BoardStatus::~BoardStatus() {
  // @@protoc_insertion_point(destructor:viam.common.v1.BoardStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void BoardStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  analogs_.Destruct();
  digital_interrupts_.Destruct();
}

void BoardStatus::ArenaDtor(void* object) {
  BoardStatus* _this = reinterpret_cast< BoardStatus* >(object);
  _this->analogs_.Destruct();
  _this->digital_interrupts_.Destruct();
}
void BoardStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BoardStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.BoardStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  analogs_.Clear();
  digital_interrupts_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoardStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .viam.common.v1.AnalogStatus> analogs = 1 [json_name = "analogs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&analogs_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<string, .viam.common.v1.DigitalInterruptStatus> digital_interrupts = 2 [json_name = "digitalInterrupts"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&digital_interrupts_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BoardStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.BoardStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .viam.common.v1.AnalogStatus> analogs = 1 [json_name = "analogs"];
  if (!this->_internal_analogs().empty()) {
    using MapType = ::_pb::Map<std::string, ::viam::common::v1::AnalogStatus>;
    using WireHelper = BoardStatus_AnalogsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_analogs();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.common.v1.BoardStatus.AnalogsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(1, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // map<string, .viam.common.v1.DigitalInterruptStatus> digital_interrupts = 2 [json_name = "digitalInterrupts"];
  if (!this->_internal_digital_interrupts().empty()) {
    using MapType = ::_pb::Map<std::string, ::viam::common::v1::DigitalInterruptStatus>;
    using WireHelper = BoardStatus_DigitalInterruptsEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_digital_interrupts();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "viam.common.v1.BoardStatus.DigitalInterruptsEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(2, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.BoardStatus)
  return target;
}

size_t BoardStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.BoardStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .viam.common.v1.AnalogStatus> analogs = 1 [json_name = "analogs"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_analogs_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::AnalogStatus >::const_iterator
      it = this->_internal_analogs().begin();
      it != this->_internal_analogs().end(); ++it) {
    total_size += BoardStatus_AnalogsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, .viam.common.v1.DigitalInterruptStatus> digital_interrupts = 2 [json_name = "digitalInterrupts"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_digital_interrupts_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::viam::common::v1::DigitalInterruptStatus >::const_iterator
      it = this->_internal_digital_interrupts().begin();
      it != this->_internal_digital_interrupts().end(); ++it) {
    total_size += BoardStatus_DigitalInterruptsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BoardStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BoardStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BoardStatus::GetClassData() const { return &_class_data_; }

void BoardStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BoardStatus *>(to)->MergeFrom(
      static_cast<const BoardStatus &>(from));
}


void BoardStatus::MergeFrom(const BoardStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.BoardStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  analogs_.MergeFrom(from.analogs_);
  digital_interrupts_.MergeFrom(from.digital_interrupts_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BoardStatus::CopyFrom(const BoardStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.BoardStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoardStatus::IsInitialized() const {
  return true;
}

void BoardStatus::InternalSwap(BoardStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  analogs_.InternalSwap(&other->analogs_);
  digital_interrupts_.InternalSwap(&other->digital_interrupts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BoardStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[3]);
}

// ===================================================================

class AnalogStatus::_Internal {
 public:
};

AnalogStatus::AnalogStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.AnalogStatus)
}
AnalogStatus::AnalogStatus(const AnalogStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.AnalogStatus)
}

inline void AnalogStatus::SharedCtor() {
value_ = 0;
}

AnalogStatus::~AnalogStatus() {
  // @@protoc_insertion_point(destructor:viam.common.v1.AnalogStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AnalogStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AnalogStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AnalogStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.AnalogStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AnalogStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AnalogStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.AnalogStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1 [json_name = "value"];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.AnalogStatus)
  return target;
}

size_t AnalogStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.AnalogStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1 [json_name = "value"];
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AnalogStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AnalogStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AnalogStatus::GetClassData() const { return &_class_data_; }

void AnalogStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AnalogStatus *>(to)->MergeFrom(
      static_cast<const AnalogStatus &>(from));
}


void AnalogStatus::MergeFrom(const AnalogStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.AnalogStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AnalogStatus::CopyFrom(const AnalogStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.AnalogStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnalogStatus::IsInitialized() const {
  return true;
}

void AnalogStatus::InternalSwap(AnalogStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AnalogStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[4]);
}

// ===================================================================

class DigitalInterruptStatus::_Internal {
 public:
};

DigitalInterruptStatus::DigitalInterruptStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.DigitalInterruptStatus)
}
DigitalInterruptStatus::DigitalInterruptStatus(const DigitalInterruptStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.DigitalInterruptStatus)
}

inline void DigitalInterruptStatus::SharedCtor() {
value_ = int64_t{0};
}

DigitalInterruptStatus::~DigitalInterruptStatus() {
  // @@protoc_insertion_point(destructor:viam.common.v1.DigitalInterruptStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DigitalInterruptStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DigitalInterruptStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DigitalInterruptStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.DigitalInterruptStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DigitalInterruptStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DigitalInterruptStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.DigitalInterruptStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1 [json_name = "value"];
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.DigitalInterruptStatus)
  return target;
}

size_t DigitalInterruptStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.DigitalInterruptStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1 [json_name = "value"];
  if (this->_internal_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DigitalInterruptStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DigitalInterruptStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DigitalInterruptStatus::GetClassData() const { return &_class_data_; }

void DigitalInterruptStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DigitalInterruptStatus *>(to)->MergeFrom(
      static_cast<const DigitalInterruptStatus &>(from));
}


void DigitalInterruptStatus::MergeFrom(const DigitalInterruptStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.DigitalInterruptStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DigitalInterruptStatus::CopyFrom(const DigitalInterruptStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.DigitalInterruptStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DigitalInterruptStatus::IsInitialized() const {
  return true;
}

void DigitalInterruptStatus::InternalSwap(DigitalInterruptStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DigitalInterruptStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[5]);
}

// ===================================================================

class Pose::_Internal {
 public:
};

Pose::Pose(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Pose)
}
Pose::Pose(const Pose& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Pose)
}

inline void Pose::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&x_)) + sizeof(theta_));
}

Pose::~Pose() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Pose)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Pose::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Pose::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Pose::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Pose)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&x_)) + sizeof(theta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Pose::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3 [json_name = "z"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double o_x = 4 [json_name = "oX"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          o_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double o_y = 5 [json_name = "oY"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          o_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double o_z = 6 [json_name = "oZ"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          o_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double theta = 7 [json_name = "theta"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Pose::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Pose)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  // double o_x = 4 [json_name = "oX"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_x = this->_internal_o_x();
  uint64_t raw_o_x;
  memcpy(&raw_o_x, &tmp_o_x, sizeof(tmp_o_x));
  if (raw_o_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_o_x(), target);
  }

  // double o_y = 5 [json_name = "oY"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_y = this->_internal_o_y();
  uint64_t raw_o_y;
  memcpy(&raw_o_y, &tmp_o_y, sizeof(tmp_o_y));
  if (raw_o_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_o_y(), target);
  }

  // double o_z = 6 [json_name = "oZ"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_z = this->_internal_o_z();
  uint64_t raw_o_z;
  memcpy(&raw_o_z, &tmp_o_z, sizeof(tmp_o_z));
  if (raw_o_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_o_z(), target);
  }

  // double theta = 7 [json_name = "theta"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(7, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Pose)
  return target;
}

size_t Pose::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Pose)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  // double o_x = 4 [json_name = "oX"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_x = this->_internal_o_x();
  uint64_t raw_o_x;
  memcpy(&raw_o_x, &tmp_o_x, sizeof(tmp_o_x));
  if (raw_o_x != 0) {
    total_size += 1 + 8;
  }

  // double o_y = 5 [json_name = "oY"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_y = this->_internal_o_y();
  uint64_t raw_o_y;
  memcpy(&raw_o_y, &tmp_o_y, sizeof(tmp_o_y));
  if (raw_o_y != 0) {
    total_size += 1 + 8;
  }

  // double o_z = 6 [json_name = "oZ"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_z = this->_internal_o_z();
  uint64_t raw_o_z;
  memcpy(&raw_o_z, &tmp_o_z, sizeof(tmp_o_z));
  if (raw_o_z != 0) {
    total_size += 1 + 8;
  }

  // double theta = 7 [json_name = "theta"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Pose::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Pose::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Pose::GetClassData() const { return &_class_data_; }

void Pose::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Pose *>(to)->MergeFrom(
      static_cast<const Pose &>(from));
}


void Pose::MergeFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Pose)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_x = from._internal_o_x();
  uint64_t raw_o_x;
  memcpy(&raw_o_x, &tmp_o_x, sizeof(tmp_o_x));
  if (raw_o_x != 0) {
    _internal_set_o_x(from._internal_o_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_y = from._internal_o_y();
  uint64_t raw_o_y;
  memcpy(&raw_o_y, &tmp_o_y, sizeof(tmp_o_y));
  if (raw_o_y != 0) {
    _internal_set_o_y(from._internal_o_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_z = from._internal_o_z();
  uint64_t raw_o_z;
  memcpy(&raw_o_z, &tmp_o_z, sizeof(tmp_o_z));
  if (raw_o_z != 0) {
    _internal_set_o_z(from._internal_o_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Pose::CopyFrom(const Pose& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Pose)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose::IsInitialized() const {
  return true;
}

void Pose::InternalSwap(Pose* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Pose, theta_)
      + sizeof(Pose::theta_)
      - PROTOBUF_FIELD_OFFSET(Pose, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[6]);
}

// ===================================================================

class Orientation::_Internal {
 public:
};

Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&o_x_, &from.o_x_,
    static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&o_x_)) + sizeof(theta_));
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Orientation)
}

inline void Orientation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&o_x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&theta_) -
    reinterpret_cast<char*>(&o_x_)) + sizeof(theta_));
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Orientation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Orientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&o_x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&o_x_)) + sizeof(theta_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double o_x = 1 [json_name = "oX"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          o_x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double o_y = 2 [json_name = "oY"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          o_y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double o_z = 3 [json_name = "oZ"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          o_z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double theta = 4 [json_name = "theta"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          theta_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Orientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double o_x = 1 [json_name = "oX"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_x = this->_internal_o_x();
  uint64_t raw_o_x;
  memcpy(&raw_o_x, &tmp_o_x, sizeof(tmp_o_x));
  if (raw_o_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_o_x(), target);
  }

  // double o_y = 2 [json_name = "oY"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_y = this->_internal_o_y();
  uint64_t raw_o_y;
  memcpy(&raw_o_y, &tmp_o_y, sizeof(tmp_o_y));
  if (raw_o_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_o_y(), target);
  }

  // double o_z = 3 [json_name = "oZ"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_z = this->_internal_o_z();
  uint64_t raw_o_z;
  memcpy(&raw_o_z, &tmp_o_z, sizeof(tmp_o_z));
  if (raw_o_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_o_z(), target);
  }

  // double theta = 4 [json_name = "theta"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_theta(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Orientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double o_x = 1 [json_name = "oX"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_x = this->_internal_o_x();
  uint64_t raw_o_x;
  memcpy(&raw_o_x, &tmp_o_x, sizeof(tmp_o_x));
  if (raw_o_x != 0) {
    total_size += 1 + 8;
  }

  // double o_y = 2 [json_name = "oY"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_y = this->_internal_o_y();
  uint64_t raw_o_y;
  memcpy(&raw_o_y, &tmp_o_y, sizeof(tmp_o_y));
  if (raw_o_y != 0) {
    total_size += 1 + 8;
  }

  // double o_z = 3 [json_name = "oZ"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_z = this->_internal_o_z();
  uint64_t raw_o_z;
  memcpy(&raw_o_z, &tmp_o_z, sizeof(tmp_o_z));
  if (raw_o_z != 0) {
    total_size += 1 + 8;
  }

  // double theta = 4 [json_name = "theta"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = this->_internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation::GetClassData() const { return &_class_data_; }

void Orientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation *>(to)->MergeFrom(
      static_cast<const Orientation &>(from));
}


void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_x = from._internal_o_x();
  uint64_t raw_o_x;
  memcpy(&raw_o_x, &tmp_o_x, sizeof(tmp_o_x));
  if (raw_o_x != 0) {
    _internal_set_o_x(from._internal_o_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_y = from._internal_o_y();
  uint64_t raw_o_y;
  memcpy(&raw_o_y, &tmp_o_y, sizeof(tmp_o_y));
  if (raw_o_y != 0) {
    _internal_set_o_y(from._internal_o_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_o_z = from._internal_o_z();
  uint64_t raw_o_z;
  memcpy(&raw_o_z, &tmp_o_z, sizeof(tmp_o_z));
  if (raw_o_z != 0) {
    _internal_set_o_z(from._internal_o_z());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_theta = from._internal_theta();
  uint64_t raw_theta;
  memcpy(&raw_theta, &tmp_theta, sizeof(tmp_theta));
  if (raw_theta != 0) {
    _internal_set_theta(from._internal_theta());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Orientation, theta_)
      + sizeof(Orientation::theta_)
      - PROTOBUF_FIELD_OFFSET(Orientation, o_x_)>(
          reinterpret_cast<char*>(&o_x_),
          reinterpret_cast<char*>(&other->o_x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[7]);
}

// ===================================================================

class PoseInFrame::_Internal {
 public:
  static const ::viam::common::v1::Pose& pose(const PoseInFrame* msg);
};

const ::viam::common::v1::Pose&
PoseInFrame::_Internal::pose(const PoseInFrame* msg) {
  return *msg->pose_;
}
PoseInFrame::PoseInFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.PoseInFrame)
}
PoseInFrame::PoseInFrame(const PoseInFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reference_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference_frame().empty()) {
    reference_frame_.Set(from._internal_reference_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pose()) {
    pose_ = new ::viam::common::v1::Pose(*from.pose_);
  } else {
    pose_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.PoseInFrame)
}

inline void PoseInFrame::SharedCtor() {
reference_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reference_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
pose_ = nullptr;
}

PoseInFrame::~PoseInFrame() {
  // @@protoc_insertion_point(destructor:viam.common.v1.PoseInFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PoseInFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reference_frame_.Destroy();
  if (this != internal_default_instance()) delete pose_;
}

void PoseInFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PoseInFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.PoseInFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pose_ != nullptr) {
    delete pose_;
  }
  pose_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PoseInFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reference_frame = 1 [json_name = "referenceFrame"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reference_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.PoseInFrame.reference_frame"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Pose pose = 2 [json_name = "pose"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PoseInFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.PoseInFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_frame = 1 [json_name = "referenceFrame"];
  if (!this->_internal_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_frame().data(), static_cast<int>(this->_internal_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.PoseInFrame.reference_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference_frame(), target);
  }

  // .viam.common.v1.Pose pose = 2 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose(this),
        _Internal::pose(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.PoseInFrame)
  return target;
}

size_t PoseInFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.PoseInFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference_frame = 1 [json_name = "referenceFrame"];
  if (!this->_internal_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_frame());
  }

  // .viam.common.v1.Pose pose = 2 [json_name = "pose"];
  if (this->_internal_has_pose()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PoseInFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PoseInFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PoseInFrame::GetClassData() const { return &_class_data_; }

void PoseInFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PoseInFrame *>(to)->MergeFrom(
      static_cast<const PoseInFrame &>(from));
}


void PoseInFrame::MergeFrom(const PoseInFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.PoseInFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reference_frame().empty()) {
    _internal_set_reference_frame(from._internal_reference_frame());
  }
  if (from._internal_has_pose()) {
    _internal_mutable_pose()->::viam::common::v1::Pose::MergeFrom(from._internal_pose());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PoseInFrame::CopyFrom(const PoseInFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.PoseInFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PoseInFrame::IsInitialized() const {
  return true;
}

void PoseInFrame::InternalSwap(PoseInFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reference_frame_, lhs_arena,
      &other->reference_frame_, rhs_arena
  );
  swap(pose_, other->pose_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PoseInFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[8]);
}

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Vector3)
}

inline void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Vector3)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Vector3)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x = 1 [json_name = "x"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y = 2 [json_name = "y"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z = 3 [json_name = "z"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Vector3::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Vector3)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_x(), target);
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_y(), target);
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Vector3)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x = 1 [json_name = "x"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = this->_internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    total_size += 1 + 8;
  }

  // double y = 2 [json_name = "y"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = this->_internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    total_size += 1 + 8;
  }

  // double z = 3 [json_name = "z"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = this->_internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Vector3::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Vector3::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Vector3::GetClassData() const { return &_class_data_; }

void Vector3::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Vector3 *>(to)->MergeFrom(
      static_cast<const Vector3 &>(from));
}


void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x = from._internal_x();
  uint64_t raw_x;
  memcpy(&raw_x, &tmp_x, sizeof(tmp_x));
  if (raw_x != 0) {
    _internal_set_x(from._internal_x());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y = from._internal_y();
  uint64_t raw_y;
  memcpy(&raw_y, &tmp_y, sizeof(tmp_y));
  if (raw_y != 0) {
    _internal_set_y(from._internal_y());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z = from._internal_z();
  uint64_t raw_z;
  memcpy(&raw_z, &tmp_z, sizeof(tmp_z));
  if (raw_z != 0) {
    _internal_set_z(from._internal_z());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[9]);
}

// ===================================================================

class Sphere::_Internal {
 public:
};

Sphere::Sphere(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Sphere)
}
Sphere::Sphere(const Sphere& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radius_mm_ = from.radius_mm_;
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Sphere)
}

inline void Sphere::SharedCtor() {
radius_mm_ = 0;
}

Sphere::~Sphere() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Sphere)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Sphere::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Sphere::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sphere::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Sphere)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  radius_mm_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sphere::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double radius_mm = 1 [json_name = "radiusMm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          radius_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sphere::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Sphere)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius_mm = 1 [json_name = "radiusMm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius_mm = this->_internal_radius_mm();
  uint64_t raw_radius_mm;
  memcpy(&raw_radius_mm, &tmp_radius_mm, sizeof(tmp_radius_mm));
  if (raw_radius_mm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_radius_mm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Sphere)
  return target;
}

size_t Sphere::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Sphere)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double radius_mm = 1 [json_name = "radiusMm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius_mm = this->_internal_radius_mm();
  uint64_t raw_radius_mm;
  memcpy(&raw_radius_mm, &tmp_radius_mm, sizeof(tmp_radius_mm));
  if (raw_radius_mm != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sphere::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sphere::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sphere::GetClassData() const { return &_class_data_; }

void Sphere::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sphere *>(to)->MergeFrom(
      static_cast<const Sphere &>(from));
}


void Sphere::MergeFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Sphere)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius_mm = from._internal_radius_mm();
  uint64_t raw_radius_mm;
  memcpy(&raw_radius_mm, &tmp_radius_mm, sizeof(tmp_radius_mm));
  if (raw_radius_mm != 0) {
    _internal_set_radius_mm(from._internal_radius_mm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sphere::CopyFrom(const Sphere& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Sphere)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sphere::IsInitialized() const {
  return true;
}

void Sphere::InternalSwap(Sphere* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(radius_mm_, other->radius_mm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Sphere::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[10]);
}

// ===================================================================

class Capsule::_Internal {
 public:
};

Capsule::Capsule(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Capsule)
}
Capsule::Capsule(const Capsule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&radius_mm_, &from.radius_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_mm_) -
    reinterpret_cast<char*>(&radius_mm_)) + sizeof(length_mm_));
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Capsule)
}

inline void Capsule::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&radius_mm_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&length_mm_) -
    reinterpret_cast<char*>(&radius_mm_)) + sizeof(length_mm_));
}

Capsule::~Capsule() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Capsule)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Capsule::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Capsule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Capsule::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Capsule)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&radius_mm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_mm_) -
      reinterpret_cast<char*>(&radius_mm_)) + sizeof(length_mm_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Capsule::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double radius_mm = 1 [json_name = "radiusMm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          radius_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double length_mm = 2 [json_name = "lengthMm"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          length_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Capsule::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Capsule)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double radius_mm = 1 [json_name = "radiusMm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius_mm = this->_internal_radius_mm();
  uint64_t raw_radius_mm;
  memcpy(&raw_radius_mm, &tmp_radius_mm, sizeof(tmp_radius_mm));
  if (raw_radius_mm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_radius_mm(), target);
  }

  // double length_mm = 2 [json_name = "lengthMm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length_mm = this->_internal_length_mm();
  uint64_t raw_length_mm;
  memcpy(&raw_length_mm, &tmp_length_mm, sizeof(tmp_length_mm));
  if (raw_length_mm != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_length_mm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Capsule)
  return target;
}

size_t Capsule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Capsule)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double radius_mm = 1 [json_name = "radiusMm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius_mm = this->_internal_radius_mm();
  uint64_t raw_radius_mm;
  memcpy(&raw_radius_mm, &tmp_radius_mm, sizeof(tmp_radius_mm));
  if (raw_radius_mm != 0) {
    total_size += 1 + 8;
  }

  // double length_mm = 2 [json_name = "lengthMm"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length_mm = this->_internal_length_mm();
  uint64_t raw_length_mm;
  memcpy(&raw_length_mm, &tmp_length_mm, sizeof(tmp_length_mm));
  if (raw_length_mm != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Capsule::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Capsule::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Capsule::GetClassData() const { return &_class_data_; }

void Capsule::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Capsule *>(to)->MergeFrom(
      static_cast<const Capsule &>(from));
}


void Capsule::MergeFrom(const Capsule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Capsule)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_radius_mm = from._internal_radius_mm();
  uint64_t raw_radius_mm;
  memcpy(&raw_radius_mm, &tmp_radius_mm, sizeof(tmp_radius_mm));
  if (raw_radius_mm != 0) {
    _internal_set_radius_mm(from._internal_radius_mm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_length_mm = from._internal_length_mm();
  uint64_t raw_length_mm;
  memcpy(&raw_length_mm, &tmp_length_mm, sizeof(tmp_length_mm));
  if (raw_length_mm != 0) {
    _internal_set_length_mm(from._internal_length_mm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Capsule::CopyFrom(const Capsule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Capsule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Capsule::IsInitialized() const {
  return true;
}

void Capsule::InternalSwap(Capsule* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Capsule, length_mm_)
      + sizeof(Capsule::length_mm_)
      - PROTOBUF_FIELD_OFFSET(Capsule, radius_mm_)>(
          reinterpret_cast<char*>(&radius_mm_),
          reinterpret_cast<char*>(&other->radius_mm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Capsule::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[11]);
}

// ===================================================================

class RectangularPrism::_Internal {
 public:
  static const ::viam::common::v1::Vector3& dims_mm(const RectangularPrism* msg);
};

const ::viam::common::v1::Vector3&
RectangularPrism::_Internal::dims_mm(const RectangularPrism* msg) {
  return *msg->dims_mm_;
}
RectangularPrism::RectangularPrism(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.RectangularPrism)
}
RectangularPrism::RectangularPrism(const RectangularPrism& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_dims_mm()) {
    dims_mm_ = new ::viam::common::v1::Vector3(*from.dims_mm_);
  } else {
    dims_mm_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.RectangularPrism)
}

inline void RectangularPrism::SharedCtor() {
dims_mm_ = nullptr;
}

RectangularPrism::~RectangularPrism() {
  // @@protoc_insertion_point(destructor:viam.common.v1.RectangularPrism)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RectangularPrism::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete dims_mm_;
}

void RectangularPrism::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RectangularPrism::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.RectangularPrism)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && dims_mm_ != nullptr) {
    delete dims_mm_;
  }
  dims_mm_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RectangularPrism::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.Vector3 dims_mm = 1 [json_name = "dimsMm"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dims_mm(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RectangularPrism::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.RectangularPrism)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.Vector3 dims_mm = 1 [json_name = "dimsMm"];
  if (this->_internal_has_dims_mm()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::dims_mm(this),
        _Internal::dims_mm(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.RectangularPrism)
  return target;
}

size_t RectangularPrism::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.RectangularPrism)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.common.v1.Vector3 dims_mm = 1 [json_name = "dimsMm"];
  if (this->_internal_has_dims_mm()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *dims_mm_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RectangularPrism::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RectangularPrism::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RectangularPrism::GetClassData() const { return &_class_data_; }

void RectangularPrism::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RectangularPrism *>(to)->MergeFrom(
      static_cast<const RectangularPrism &>(from));
}


void RectangularPrism::MergeFrom(const RectangularPrism& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.RectangularPrism)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_dims_mm()) {
    _internal_mutable_dims_mm()->::viam::common::v1::Vector3::MergeFrom(from._internal_dims_mm());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RectangularPrism::CopyFrom(const RectangularPrism& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.RectangularPrism)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RectangularPrism::IsInitialized() const {
  return true;
}

void RectangularPrism::InternalSwap(RectangularPrism* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(dims_mm_, other->dims_mm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RectangularPrism::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[12]);
}

// ===================================================================

class Geometry::_Internal {
 public:
  static const ::viam::common::v1::Pose& center(const Geometry* msg);
  static const ::viam::common::v1::Sphere& sphere(const Geometry* msg);
  static const ::viam::common::v1::RectangularPrism& box(const Geometry* msg);
  static const ::viam::common::v1::Capsule& capsule(const Geometry* msg);
};

const ::viam::common::v1::Pose&
Geometry::_Internal::center(const Geometry* msg) {
  return *msg->center_;
}
const ::viam::common::v1::Sphere&
Geometry::_Internal::sphere(const Geometry* msg) {
  return *msg->geometry_type_.sphere_;
}
const ::viam::common::v1::RectangularPrism&
Geometry::_Internal::box(const Geometry* msg) {
  return *msg->geometry_type_.box_;
}
const ::viam::common::v1::Capsule&
Geometry::_Internal::capsule(const Geometry* msg) {
  return *msg->geometry_type_.capsule_;
}
void Geometry::set_allocated_sphere(::viam::common::v1::Sphere* sphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry_type();
  if (sphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(sphere);
    if (message_arena != submessage_arena) {
      sphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sphere, submessage_arena);
    }
    set_has_sphere();
    geometry_type_.sphere_ = sphere;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Geometry.sphere)
}
void Geometry::set_allocated_box(::viam::common::v1::RectangularPrism* box) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry_type();
  if (box) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(box);
    if (message_arena != submessage_arena) {
      box = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, box, submessage_arena);
    }
    set_has_box();
    geometry_type_.box_ = box;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Geometry.box)
}
void Geometry::set_allocated_capsule(::viam::common::v1::Capsule* capsule) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_geometry_type();
  if (capsule) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(capsule);
    if (message_arena != submessage_arena) {
      capsule = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, capsule, submessage_arena);
    }
    set_has_capsule();
    geometry_type_.capsule_ = capsule;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.common.v1.Geometry.capsule)
}
Geometry::Geometry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Geometry)
}
Geometry::Geometry(const Geometry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_center()) {
    center_ = new ::viam::common::v1::Pose(*from.center_);
  } else {
    center_ = nullptr;
  }
  clear_has_geometry_type();
  switch (from.geometry_type_case()) {
    case kSphere: {
      _internal_mutable_sphere()->::viam::common::v1::Sphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kBox: {
      _internal_mutable_box()->::viam::common::v1::RectangularPrism::MergeFrom(from._internal_box());
      break;
    }
    case kCapsule: {
      _internal_mutable_capsule()->::viam::common::v1::Capsule::MergeFrom(from._internal_capsule());
      break;
    }
    case GEOMETRY_TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Geometry)
}

inline void Geometry::SharedCtor() {
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
center_ = nullptr;
clear_has_geometry_type();
}

Geometry::~Geometry() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Geometry)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Geometry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.Destroy();
  if (this != internal_default_instance()) delete center_;
  if (has_geometry_type()) {
    clear_geometry_type();
  }
}

void Geometry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Geometry::clear_geometry_type() {
// @@protoc_insertion_point(one_of_clear_start:viam.common.v1.Geometry)
  switch (geometry_type_case()) {
    case kSphere: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_type_.sphere_;
      }
      break;
    }
    case kBox: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_type_.box_;
      }
      break;
    }
    case kCapsule: {
      if (GetArenaForAllocation() == nullptr) {
        delete geometry_type_.capsule_;
      }
      break;
    }
    case GEOMETRY_TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = GEOMETRY_TYPE_NOT_SET;
}


void Geometry::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Geometry)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  label_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  clear_geometry_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Geometry::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.common.v1.Pose center = 1 [json_name = "center"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Sphere sphere = 2 [json_name = "sphere"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sphere(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.RectangularPrism box = 3 [json_name = "box"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_box(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string label = 4 [json_name = "label"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.Geometry.label"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Capsule capsule = 5 [json_name = "capsule"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_capsule(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Geometry::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Geometry)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.common.v1.Pose center = 1 [json_name = "center"];
  if (this->_internal_has_center()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::center(this),
        _Internal::center(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.Sphere sphere = 2 [json_name = "sphere"];
  if (_internal_has_sphere()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::sphere(this),
        _Internal::sphere(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.RectangularPrism box = 3 [json_name = "box"];
  if (_internal_has_box()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::box(this),
        _Internal::box(this).GetCachedSize(), target, stream);
  }

  // string label = 4 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.Geometry.label");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_label(), target);
  }

  // .viam.common.v1.Capsule capsule = 5 [json_name = "capsule"];
  if (_internal_has_capsule()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::capsule(this),
        _Internal::capsule(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Geometry)
  return target;
}

size_t Geometry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Geometry)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string label = 4 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // .viam.common.v1.Pose center = 1 [json_name = "center"];
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  switch (geometry_type_case()) {
    // .viam.common.v1.Sphere sphere = 2 [json_name = "sphere"];
    case kSphere: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_type_.sphere_);
      break;
    }
    // .viam.common.v1.RectangularPrism box = 3 [json_name = "box"];
    case kBox: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_type_.box_);
      break;
    }
    // .viam.common.v1.Capsule capsule = 5 [json_name = "capsule"];
    case kCapsule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *geometry_type_.capsule_);
      break;
    }
    case GEOMETRY_TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Geometry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Geometry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Geometry::GetClassData() const { return &_class_data_; }

void Geometry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Geometry *>(to)->MergeFrom(
      static_cast<const Geometry &>(from));
}


void Geometry::MergeFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Geometry)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (from._internal_has_center()) {
    _internal_mutable_center()->::viam::common::v1::Pose::MergeFrom(from._internal_center());
  }
  switch (from.geometry_type_case()) {
    case kSphere: {
      _internal_mutable_sphere()->::viam::common::v1::Sphere::MergeFrom(from._internal_sphere());
      break;
    }
    case kBox: {
      _internal_mutable_box()->::viam::common::v1::RectangularPrism::MergeFrom(from._internal_box());
      break;
    }
    case kCapsule: {
      _internal_mutable_capsule()->::viam::common::v1::Capsule::MergeFrom(from._internal_capsule());
      break;
    }
    case GEOMETRY_TYPE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Geometry::CopyFrom(const Geometry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Geometry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Geometry::IsInitialized() const {
  return true;
}

void Geometry::InternalSwap(Geometry* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  swap(center_, other->center_);
  swap(geometry_type_, other->geometry_type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Geometry::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[13]);
}

// ===================================================================

class GeometriesInFrame::_Internal {
 public:
};

GeometriesInFrame::GeometriesInFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  geometries_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.GeometriesInFrame)
}
GeometriesInFrame::GeometriesInFrame(const GeometriesInFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      geometries_(from.geometries_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reference_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference_frame().empty()) {
    reference_frame_.Set(from._internal_reference_frame(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.GeometriesInFrame)
}

inline void GeometriesInFrame::SharedCtor() {
reference_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reference_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GeometriesInFrame::~GeometriesInFrame() {
  // @@protoc_insertion_point(destructor:viam.common.v1.GeometriesInFrame)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeometriesInFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reference_frame_.Destroy();
}

void GeometriesInFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeometriesInFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.GeometriesInFrame)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  geometries_.Clear();
  reference_frame_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeometriesInFrame::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reference_frame = 1 [json_name = "referenceFrame"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reference_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.GeometriesInFrame.reference_frame"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.Geometry geometries = 2 [json_name = "geometries"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_geometries(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeometriesInFrame::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.GeometriesInFrame)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_frame = 1 [json_name = "referenceFrame"];
  if (!this->_internal_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_frame().data(), static_cast<int>(this->_internal_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.GeometriesInFrame.reference_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference_frame(), target);
  }

  // repeated .viam.common.v1.Geometry geometries = 2 [json_name = "geometries"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_geometries_size()); i < n; i++) {
    const auto& repfield = this->_internal_geometries(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(2, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.GeometriesInFrame)
  return target;
}

size_t GeometriesInFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.GeometriesInFrame)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.Geometry geometries = 2 [json_name = "geometries"];
  total_size += 1UL * this->_internal_geometries_size();
  for (const auto& msg : this->geometries_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string reference_frame = 1 [json_name = "referenceFrame"];
  if (!this->_internal_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_frame());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeometriesInFrame::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GeometriesInFrame::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeometriesInFrame::GetClassData() const { return &_class_data_; }

void GeometriesInFrame::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GeometriesInFrame *>(to)->MergeFrom(
      static_cast<const GeometriesInFrame &>(from));
}


void GeometriesInFrame::MergeFrom(const GeometriesInFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.GeometriesInFrame)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  geometries_.MergeFrom(from.geometries_);
  if (!from._internal_reference_frame().empty()) {
    _internal_set_reference_frame(from._internal_reference_frame());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeometriesInFrame::CopyFrom(const GeometriesInFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.GeometriesInFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeometriesInFrame::IsInitialized() const {
  return true;
}

void GeometriesInFrame::InternalSwap(GeometriesInFrame* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  geometries_.InternalSwap(&other->geometries_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reference_frame_, lhs_arena,
      &other->reference_frame_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GeometriesInFrame::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[14]);
}

// ===================================================================

class PointCloudObject::_Internal {
 public:
  static const ::viam::common::v1::GeometriesInFrame& geometries(const PointCloudObject* msg);
};

const ::viam::common::v1::GeometriesInFrame&
PointCloudObject::_Internal::geometries(const PointCloudObject* msg) {
  return *msg->geometries_;
}
PointCloudObject::PointCloudObject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.PointCloudObject)
}
PointCloudObject::PointCloudObject(const PointCloudObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  point_cloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    point_cloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_cloud().empty()) {
    point_cloud_.Set(from._internal_point_cloud(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_geometries()) {
    geometries_ = new ::viam::common::v1::GeometriesInFrame(*from.geometries_);
  } else {
    geometries_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.PointCloudObject)
}

inline void PointCloudObject::SharedCtor() {
point_cloud_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  point_cloud_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
geometries_ = nullptr;
}

PointCloudObject::~PointCloudObject() {
  // @@protoc_insertion_point(destructor:viam.common.v1.PointCloudObject)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PointCloudObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  point_cloud_.Destroy();
  if (this != internal_default_instance()) delete geometries_;
}

void PointCloudObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PointCloudObject::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.PointCloudObject)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  point_cloud_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && geometries_ != nullptr) {
    delete geometries_;
  }
  geometries_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PointCloudObject::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes point_cloud = 1 [json_name = "pointCloud"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_point_cloud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.GeometriesInFrame geometries = 2 [json_name = "geometries"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_geometries(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PointCloudObject::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.PointCloudObject)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes point_cloud = 1 [json_name = "pointCloud"];
  if (!this->_internal_point_cloud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_point_cloud(), target);
  }

  // .viam.common.v1.GeometriesInFrame geometries = 2 [json_name = "geometries"];
  if (this->_internal_has_geometries()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::geometries(this),
        _Internal::geometries(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.PointCloudObject)
  return target;
}

size_t PointCloudObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.PointCloudObject)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes point_cloud = 1 [json_name = "pointCloud"];
  if (!this->_internal_point_cloud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_cloud());
  }

  // .viam.common.v1.GeometriesInFrame geometries = 2 [json_name = "geometries"];
  if (this->_internal_has_geometries()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *geometries_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PointCloudObject::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PointCloudObject::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PointCloudObject::GetClassData() const { return &_class_data_; }

void PointCloudObject::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PointCloudObject *>(to)->MergeFrom(
      static_cast<const PointCloudObject &>(from));
}


void PointCloudObject::MergeFrom(const PointCloudObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.PointCloudObject)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_point_cloud().empty()) {
    _internal_set_point_cloud(from._internal_point_cloud());
  }
  if (from._internal_has_geometries()) {
    _internal_mutable_geometries()->::viam::common::v1::GeometriesInFrame::MergeFrom(from._internal_geometries());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PointCloudObject::CopyFrom(const PointCloudObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.PointCloudObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointCloudObject::IsInitialized() const {
  return true;
}

void PointCloudObject::InternalSwap(PointCloudObject* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &point_cloud_, lhs_arena,
      &other->point_cloud_, rhs_arena
  );
  swap(geometries_, other->geometries_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PointCloudObject::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[15]);
}

// ===================================================================

class GeoPoint::_Internal {
 public:
};

GeoPoint::GeoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.GeoPoint)
}
GeoPoint::GeoPoint(const GeoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.GeoPoint)
}

inline void GeoPoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

GeoPoint::~GeoPoint() {
  // @@protoc_insertion_point(destructor:viam.common.v1.GeoPoint)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GeoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GeoPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GeoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.GeoPoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GeoPoint::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude = 1 [json_name = "latitude"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude = 2 [json_name = "longitude"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GeoPoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.GeoPoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // double longitude = 2 [json_name = "longitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.GeoPoint)
  return target;
}

size_t GeoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.GeoPoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude = 1 [json_name = "latitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = this->_internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    total_size += 1 + 8;
  }

  // double longitude = 2 [json_name = "longitude"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = this->_internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GeoPoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GeoPoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GeoPoint::GetClassData() const { return &_class_data_; }

void GeoPoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GeoPoint *>(to)->MergeFrom(
      static_cast<const GeoPoint &>(from));
}


void GeoPoint::MergeFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.GeoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude = from._internal_latitude();
  uint64_t raw_latitude;
  memcpy(&raw_latitude, &tmp_latitude, sizeof(tmp_latitude));
  if (raw_latitude != 0) {
    _internal_set_latitude(from._internal_latitude());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude = from._internal_longitude();
  uint64_t raw_longitude;
  memcpy(&raw_longitude, &tmp_longitude, sizeof(tmp_longitude));
  if (raw_longitude != 0) {
    _internal_set_longitude(from._internal_longitude());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GeoPoint::CopyFrom(const GeoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.GeoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeoPoint::IsInitialized() const {
  return true;
}

void GeoPoint::InternalSwap(GeoPoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GeoPoint, longitude_)
      + sizeof(GeoPoint::longitude_)
      - PROTOBUF_FIELD_OFFSET(GeoPoint, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GeoPoint::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[16]);
}

// ===================================================================

class Transform::_Internal {
 public:
  using HasBits = decltype(std::declval<Transform>()._has_bits_);
  static const ::viam::common::v1::PoseInFrame& pose_in_observer_frame(const Transform* msg);
  static const ::viam::common::v1::Geometry& physical_object(const Transform* msg);
  static void set_has_physical_object(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

const ::viam::common::v1::PoseInFrame&
Transform::_Internal::pose_in_observer_frame(const Transform* msg) {
  return *msg->pose_in_observer_frame_;
}
const ::viam::common::v1::Geometry&
Transform::_Internal::physical_object(const Transform* msg) {
  return *msg->physical_object_;
}
Transform::Transform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.Transform)
}
Transform::Transform(const Transform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  reference_frame_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    reference_frame_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_reference_frame().empty()) {
    reference_frame_.Set(from._internal_reference_frame(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pose_in_observer_frame()) {
    pose_in_observer_frame_ = new ::viam::common::v1::PoseInFrame(*from.pose_in_observer_frame_);
  } else {
    pose_in_observer_frame_ = nullptr;
  }
  if (from._internal_has_physical_object()) {
    physical_object_ = new ::viam::common::v1::Geometry(*from.physical_object_);
  } else {
    physical_object_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.Transform)
}

inline void Transform::SharedCtor() {
reference_frame_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  reference_frame_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&pose_in_observer_frame_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&physical_object_) -
    reinterpret_cast<char*>(&pose_in_observer_frame_)) + sizeof(physical_object_));
}

Transform::~Transform() {
  // @@protoc_insertion_point(destructor:viam.common.v1.Transform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Transform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  reference_frame_.Destroy();
  if (this != internal_default_instance()) delete pose_in_observer_frame_;
  if (this != internal_default_instance()) delete physical_object_;
}

void Transform::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transform::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.Transform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reference_frame_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pose_in_observer_frame_ != nullptr) {
    delete pose_in_observer_frame_;
  }
  pose_in_observer_frame_ = nullptr;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(physical_object_ != nullptr);
    physical_object_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string reference_frame = 1 [json_name = "referenceFrame"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_reference_frame();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.Transform.reference_frame"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.PoseInFrame pose_in_observer_frame = 2 [json_name = "poseInObserverFrame"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose_in_observer_frame(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .viam.common.v1.Geometry physical_object = 3 [json_name = "physicalObject"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_physical_object(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.Transform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string reference_frame = 1 [json_name = "referenceFrame"];
  if (!this->_internal_reference_frame().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_frame().data(), static_cast<int>(this->_internal_reference_frame().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.Transform.reference_frame");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_reference_frame(), target);
  }

  // .viam.common.v1.PoseInFrame pose_in_observer_frame = 2 [json_name = "poseInObserverFrame"];
  if (this->_internal_has_pose_in_observer_frame()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::pose_in_observer_frame(this),
        _Internal::pose_in_observer_frame(this).GetCachedSize(), target, stream);
  }

  // optional .viam.common.v1.Geometry physical_object = 3 [json_name = "physicalObject"];
  if (_internal_has_physical_object()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::physical_object(this),
        _Internal::physical_object(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.Transform)
  return target;
}

size_t Transform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.Transform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string reference_frame = 1 [json_name = "referenceFrame"];
  if (!this->_internal_reference_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_frame());
  }

  // .viam.common.v1.PoseInFrame pose_in_observer_frame = 2 [json_name = "poseInObserverFrame"];
  if (this->_internal_has_pose_in_observer_frame()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pose_in_observer_frame_);
  }

  // optional .viam.common.v1.Geometry physical_object = 3 [json_name = "physicalObject"];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *physical_object_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transform::GetClassData() const { return &_class_data_; }

void Transform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transform *>(to)->MergeFrom(
      static_cast<const Transform &>(from));
}


void Transform::MergeFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.Transform)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_reference_frame().empty()) {
    _internal_set_reference_frame(from._internal_reference_frame());
  }
  if (from._internal_has_pose_in_observer_frame()) {
    _internal_mutable_pose_in_observer_frame()->::viam::common::v1::PoseInFrame::MergeFrom(from._internal_pose_in_observer_frame());
  }
  if (from._internal_has_physical_object()) {
    _internal_mutable_physical_object()->::viam::common::v1::Geometry::MergeFrom(from._internal_physical_object());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transform::CopyFrom(const Transform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.Transform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transform::IsInitialized() const {
  return true;
}

void Transform::InternalSwap(Transform* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &reference_frame_, lhs_arena,
      &other->reference_frame_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transform, physical_object_)
      + sizeof(Transform::physical_object_)
      - PROTOBUF_FIELD_OFFSET(Transform, pose_in_observer_frame_)>(
          reinterpret_cast<char*>(&pose_in_observer_frame_),
          reinterpret_cast<char*>(&other->pose_in_observer_frame_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Transform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[17]);
}

// ===================================================================

class WorldState::_Internal {
 public:
};

WorldState::WorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  obstacles_(arena),
  transforms_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.WorldState)
}
WorldState::WorldState(const WorldState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      obstacles_(from.obstacles_),
      transforms_(from.transforms_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.WorldState)
}

inline void WorldState::SharedCtor() {
}

WorldState::~WorldState() {
  // @@protoc_insertion_point(destructor:viam.common.v1.WorldState)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void WorldState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WorldState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WorldState::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.WorldState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  obstacles_.Clear();
  transforms_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WorldState::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.common.v1.GeometriesInFrame obstacles = 1 [json_name = "obstacles"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_obstacles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.common.v1.Transform transforms = 3 [json_name = "transforms"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_transforms(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WorldState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.WorldState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.common.v1.GeometriesInFrame obstacles = 1 [json_name = "obstacles"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_obstacles_size()); i < n; i++) {
    const auto& repfield = this->_internal_obstacles(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  // repeated .viam.common.v1.Transform transforms = 3 [json_name = "transforms"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_transforms_size()); i < n; i++) {
    const auto& repfield = this->_internal_transforms(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.WorldState)
  return target;
}

size_t WorldState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.WorldState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.common.v1.GeometriesInFrame obstacles = 1 [json_name = "obstacles"];
  total_size += 1UL * this->_internal_obstacles_size();
  for (const auto& msg : this->obstacles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .viam.common.v1.Transform transforms = 3 [json_name = "transforms"];
  total_size += 1UL * this->_internal_transforms_size();
  for (const auto& msg : this->transforms_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WorldState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WorldState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WorldState::GetClassData() const { return &_class_data_; }

void WorldState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WorldState *>(to)->MergeFrom(
      static_cast<const WorldState &>(from));
}


void WorldState::MergeFrom(const WorldState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.WorldState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  obstacles_.MergeFrom(from.obstacles_);
  transforms_.MergeFrom(from.transforms_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WorldState::CopyFrom(const WorldState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.WorldState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WorldState::IsInitialized() const {
  return true;
}

void WorldState::InternalSwap(WorldState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  obstacles_.InternalSwap(&other->obstacles_);
  transforms_.InternalSwap(&other->transforms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WorldState::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[18]);
}

// ===================================================================

class ActuatorStatus::_Internal {
 public:
};

ActuatorStatus::ActuatorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.ActuatorStatus)
}
ActuatorStatus::ActuatorStatus(const ActuatorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  is_moving_ = from.is_moving_;
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.ActuatorStatus)
}

inline void ActuatorStatus::SharedCtor() {
is_moving_ = false;
}

ActuatorStatus::~ActuatorStatus() {
  // @@protoc_insertion_point(destructor:viam.common.v1.ActuatorStatus)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ActuatorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ActuatorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActuatorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.ActuatorStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  is_moving_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActuatorStatus::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_moving = 1 [json_name = "isMoving"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          is_moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActuatorStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.ActuatorStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_moving = 1 [json_name = "isMoving"];
  if (this->_internal_is_moving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_moving(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.ActuatorStatus)
  return target;
}

size_t ActuatorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.ActuatorStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_moving = 1 [json_name = "isMoving"];
  if (this->_internal_is_moving() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActuatorStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActuatorStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActuatorStatus::GetClassData() const { return &_class_data_; }

void ActuatorStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActuatorStatus *>(to)->MergeFrom(
      static_cast<const ActuatorStatus &>(from));
}


void ActuatorStatus::MergeFrom(const ActuatorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.ActuatorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_moving() != 0) {
    _internal_set_is_moving(from._internal_is_moving());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActuatorStatus::CopyFrom(const ActuatorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.ActuatorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActuatorStatus::IsInitialized() const {
  return true;
}

void ActuatorStatus::InternalSwap(ActuatorStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(is_moving_, other->is_moving_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActuatorStatus::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[19]);
}

// ===================================================================

class DoCommandRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& command(const DoCommandRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DoCommandRequest::_Internal::command(const DoCommandRequest* msg) {
  return *msg->command_;
}
void DoCommandRequest::clear_command() {
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
}
DoCommandRequest::DoCommandRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.DoCommandRequest)
}
DoCommandRequest::DoCommandRequest(const DoCommandRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_command()) {
    command_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.command_);
  } else {
    command_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.DoCommandRequest)
}

inline void DoCommandRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
command_ = nullptr;
}

DoCommandRequest::~DoCommandRequest() {
  // @@protoc_insertion_point(destructor:viam.common.v1.DoCommandRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoCommandRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  if (this != internal_default_instance()) delete command_;
}

void DoCommandRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoCommandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.DoCommandRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && command_ != nullptr) {
    delete command_;
  }
  command_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoCommandRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.common.v1.DoCommandRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct command = 2 [json_name = "command"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_command(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoCommandRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.DoCommandRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.common.v1.DoCommandRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct command = 2 [json_name = "command"];
  if (this->_internal_has_command()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::command(this),
        _Internal::command(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.DoCommandRequest)
  return target;
}

size_t DoCommandRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.DoCommandRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct command = 2 [json_name = "command"];
  if (this->_internal_has_command()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *command_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoCommandRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoCommandRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoCommandRequest::GetClassData() const { return &_class_data_; }

void DoCommandRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DoCommandRequest *>(to)->MergeFrom(
      static_cast<const DoCommandRequest &>(from));
}


void DoCommandRequest::MergeFrom(const DoCommandRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.DoCommandRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_command()) {
    _internal_mutable_command()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_command());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoCommandRequest::CopyFrom(const DoCommandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.DoCommandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoCommandRequest::IsInitialized() const {
  return true;
}

void DoCommandRequest::InternalSwap(DoCommandRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(command_, other->command_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoCommandRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[20]);
}

// ===================================================================

class DoCommandResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& result(const DoCommandResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
DoCommandResponse::_Internal::result(const DoCommandResponse* msg) {
  return *msg->result_;
}
void DoCommandResponse::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
DoCommandResponse::DoCommandResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.common.v1.DoCommandResponse)
}
DoCommandResponse::DoCommandResponse(const DoCommandResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_result()) {
    result_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from.result_);
  } else {
    result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:viam.common.v1.DoCommandResponse)
}

inline void DoCommandResponse::SharedCtor() {
result_ = nullptr;
}

DoCommandResponse::~DoCommandResponse() {
  // @@protoc_insertion_point(destructor:viam.common.v1.DoCommandResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DoCommandResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete result_;
}

void DoCommandResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DoCommandResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.common.v1.DoCommandResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DoCommandResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Struct result = 1 [json_name = "result"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_result(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DoCommandResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.common.v1.DoCommandResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Struct result = 1 [json_name = "result"];
  if (this->_internal_has_result()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::result(this),
        _Internal::result(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.common.v1.DoCommandResponse)
  return target;
}

size_t DoCommandResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.common.v1.DoCommandResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Struct result = 1 [json_name = "result"];
  if (this->_internal_has_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *result_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DoCommandResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DoCommandResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DoCommandResponse::GetClassData() const { return &_class_data_; }

void DoCommandResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DoCommandResponse *>(to)->MergeFrom(
      static_cast<const DoCommandResponse &>(from));
}


void DoCommandResponse::MergeFrom(const DoCommandResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.common.v1.DoCommandResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_result()) {
    _internal_mutable_result()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DoCommandResponse::CopyFrom(const DoCommandResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.common.v1.DoCommandResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DoCommandResponse::IsInitialized() const {
  return true;
}

void DoCommandResponse::InternalSwap(DoCommandResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DoCommandResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_common_2fv1_2fcommon_2eproto_getter, &descriptor_table_common_2fv1_2fcommon_2eproto_once,
      file_level_metadata_common_2fv1_2fcommon_2eproto[21]);
}
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::PROTOBUF_NAMESPACE_ID::MethodOptions,
    ::PROTOBUF_NAMESPACE_ID::internal::PrimitiveTypeTraits< bool >, 8, false>
  safety_heartbeat_monitored(kSafetyHeartbeatMonitoredFieldNumber, false, nullptr);

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace common
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::common::v1::ResourceName*
Arena::CreateMaybeMessage< ::viam::common::v1::ResourceName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::ResourceName >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::BoardStatus_AnalogsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse*
Arena::CreateMaybeMessage< ::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::BoardStatus_DigitalInterruptsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::BoardStatus*
Arena::CreateMaybeMessage< ::viam::common::v1::BoardStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::BoardStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::AnalogStatus*
Arena::CreateMaybeMessage< ::viam::common::v1::AnalogStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::AnalogStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::DigitalInterruptStatus*
Arena::CreateMaybeMessage< ::viam::common::v1::DigitalInterruptStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::DigitalInterruptStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Pose*
Arena::CreateMaybeMessage< ::viam::common::v1::Pose >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Pose >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Orientation*
Arena::CreateMaybeMessage< ::viam::common::v1::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::PoseInFrame*
Arena::CreateMaybeMessage< ::viam::common::v1::PoseInFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::PoseInFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Vector3*
Arena::CreateMaybeMessage< ::viam::common::v1::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Sphere*
Arena::CreateMaybeMessage< ::viam::common::v1::Sphere >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Sphere >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Capsule*
Arena::CreateMaybeMessage< ::viam::common::v1::Capsule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Capsule >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::RectangularPrism*
Arena::CreateMaybeMessage< ::viam::common::v1::RectangularPrism >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::RectangularPrism >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Geometry*
Arena::CreateMaybeMessage< ::viam::common::v1::Geometry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Geometry >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::GeometriesInFrame*
Arena::CreateMaybeMessage< ::viam::common::v1::GeometriesInFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::GeometriesInFrame >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::PointCloudObject*
Arena::CreateMaybeMessage< ::viam::common::v1::PointCloudObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::PointCloudObject >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::GeoPoint*
Arena::CreateMaybeMessage< ::viam::common::v1::GeoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::GeoPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::Transform*
Arena::CreateMaybeMessage< ::viam::common::v1::Transform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::Transform >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::WorldState*
Arena::CreateMaybeMessage< ::viam::common::v1::WorldState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::WorldState >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::ActuatorStatus*
Arena::CreateMaybeMessage< ::viam::common::v1::ActuatorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::ActuatorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::DoCommandRequest*
Arena::CreateMaybeMessage< ::viam::common::v1::DoCommandRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::DoCommandRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::common::v1::DoCommandResponse*
Arena::CreateMaybeMessage< ::viam::common::v1::DoCommandResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::common::v1::DoCommandResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
