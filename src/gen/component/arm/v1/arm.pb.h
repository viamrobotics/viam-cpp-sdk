// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/arm/v1/arm.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2farm_2fv1_2farm_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2farm_2fv1_2farm_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021009 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2farm_2fv1_2farm_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2farm_2fv1_2farm_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2farm_2fv1_2farm_2eproto;
namespace viam {
namespace component {
namespace arm {
namespace v1 {
class GetEndPositionRequest;
struct GetEndPositionRequestDefaultTypeInternal;
extern GetEndPositionRequestDefaultTypeInternal _GetEndPositionRequest_default_instance_;
class GetEndPositionResponse;
struct GetEndPositionResponseDefaultTypeInternal;
extern GetEndPositionResponseDefaultTypeInternal _GetEndPositionResponse_default_instance_;
class GetJointPositionsRequest;
struct GetJointPositionsRequestDefaultTypeInternal;
extern GetJointPositionsRequestDefaultTypeInternal _GetJointPositionsRequest_default_instance_;
class GetJointPositionsResponse;
struct GetJointPositionsResponseDefaultTypeInternal;
extern GetJointPositionsResponseDefaultTypeInternal _GetJointPositionsResponse_default_instance_;
class JointPositions;
struct JointPositionsDefaultTypeInternal;
extern JointPositionsDefaultTypeInternal _JointPositions_default_instance_;
class MoveToJointPositionsRequest;
struct MoveToJointPositionsRequestDefaultTypeInternal;
extern MoveToJointPositionsRequestDefaultTypeInternal _MoveToJointPositionsRequest_default_instance_;
class MoveToJointPositionsResponse;
struct MoveToJointPositionsResponseDefaultTypeInternal;
extern MoveToJointPositionsResponseDefaultTypeInternal _MoveToJointPositionsResponse_default_instance_;
class MoveToPositionRequest;
struct MoveToPositionRequestDefaultTypeInternal;
extern MoveToPositionRequestDefaultTypeInternal _MoveToPositionRequest_default_instance_;
class MoveToPositionResponse;
struct MoveToPositionResponseDefaultTypeInternal;
extern MoveToPositionResponseDefaultTypeInternal _MoveToPositionResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StopRequest;
struct StopRequestDefaultTypeInternal;
extern StopRequestDefaultTypeInternal _StopRequest_default_instance_;
class StopResponse;
struct StopResponseDefaultTypeInternal;
extern StopResponseDefaultTypeInternal _StopResponse_default_instance_;
}  // namespace v1
}  // namespace arm
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::arm::v1::GetEndPositionRequest* Arena::CreateMaybeMessage<::viam::component::arm::v1::GetEndPositionRequest>(Arena*);
template<> ::viam::component::arm::v1::GetEndPositionResponse* Arena::CreateMaybeMessage<::viam::component::arm::v1::GetEndPositionResponse>(Arena*);
template<> ::viam::component::arm::v1::GetJointPositionsRequest* Arena::CreateMaybeMessage<::viam::component::arm::v1::GetJointPositionsRequest>(Arena*);
template<> ::viam::component::arm::v1::GetJointPositionsResponse* Arena::CreateMaybeMessage<::viam::component::arm::v1::GetJointPositionsResponse>(Arena*);
template<> ::viam::component::arm::v1::JointPositions* Arena::CreateMaybeMessage<::viam::component::arm::v1::JointPositions>(Arena*);
template<> ::viam::component::arm::v1::MoveToJointPositionsRequest* Arena::CreateMaybeMessage<::viam::component::arm::v1::MoveToJointPositionsRequest>(Arena*);
template<> ::viam::component::arm::v1::MoveToJointPositionsResponse* Arena::CreateMaybeMessage<::viam::component::arm::v1::MoveToJointPositionsResponse>(Arena*);
template<> ::viam::component::arm::v1::MoveToPositionRequest* Arena::CreateMaybeMessage<::viam::component::arm::v1::MoveToPositionRequest>(Arena*);
template<> ::viam::component::arm::v1::MoveToPositionResponse* Arena::CreateMaybeMessage<::viam::component::arm::v1::MoveToPositionResponse>(Arena*);
template<> ::viam::component::arm::v1::Status* Arena::CreateMaybeMessage<::viam::component::arm::v1::Status>(Arena*);
template<> ::viam::component::arm::v1::StopRequest* Arena::CreateMaybeMessage<::viam::component::arm::v1::StopRequest>(Arena*);
template<> ::viam::component::arm::v1::StopResponse* Arena::CreateMaybeMessage<::viam::component::arm::v1::StopResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace arm {
namespace v1 {

// ===================================================================

class GetEndPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.GetEndPositionRequest) */ {
 public:
  inline GetEndPositionRequest() : GetEndPositionRequest(nullptr) {}
  ~GetEndPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEndPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEndPositionRequest(const GetEndPositionRequest& from);
  GetEndPositionRequest(GetEndPositionRequest&& from) noexcept
    : GetEndPositionRequest() {
    *this = ::std::move(from);
  }

  inline GetEndPositionRequest& operator=(const GetEndPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndPositionRequest& operator=(GetEndPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEndPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEndPositionRequest* internal_default_instance() {
    return reinterpret_cast<const GetEndPositionRequest*>(
               &_GetEndPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetEndPositionRequest& a, GetEndPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEndPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEndPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEndPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEndPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEndPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEndPositionRequest& from) {
    GetEndPositionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.GetEndPositionRequest";
  }
  protected:
  explicit GetEndPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.GetEndPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class GetEndPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.GetEndPositionResponse) */ {
 public:
  inline GetEndPositionResponse() : GetEndPositionResponse(nullptr) {}
  ~GetEndPositionResponse() override;
  explicit PROTOBUF_CONSTEXPR GetEndPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEndPositionResponse(const GetEndPositionResponse& from);
  GetEndPositionResponse(GetEndPositionResponse&& from) noexcept
    : GetEndPositionResponse() {
    *this = ::std::move(from);
  }

  inline GetEndPositionResponse& operator=(const GetEndPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEndPositionResponse& operator=(GetEndPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEndPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEndPositionResponse* internal_default_instance() {
    return reinterpret_cast<const GetEndPositionResponse*>(
               &_GetEndPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetEndPositionResponse& a, GetEndPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEndPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEndPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEndPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEndPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEndPositionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetEndPositionResponse& from) {
    GetEndPositionResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEndPositionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.GetEndPositionResponse";
  }
  protected:
  explicit GetEndPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPoseFieldNumber = 1,
  };
  // .viam.common.v1.Pose pose = 1 [json_name = "pose"];
  bool has_pose() const;
  private:
  bool _internal_has_pose() const;
  public:
  void clear_pose();
  const ::viam::common::v1::Pose& pose() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_pose();
  ::viam::common::v1::Pose* mutable_pose();
  void set_allocated_pose(::viam::common::v1::Pose* pose);
  private:
  const ::viam::common::v1::Pose& _internal_pose() const;
  ::viam::common::v1::Pose* _internal_mutable_pose();
  public:
  void unsafe_arena_set_allocated_pose(
      ::viam::common::v1::Pose* pose);
  ::viam::common::v1::Pose* unsafe_arena_release_pose();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.GetEndPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::common::v1::Pose* pose_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class JointPositions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.JointPositions) */ {
 public:
  inline JointPositions() : JointPositions(nullptr) {}
  ~JointPositions() override;
  explicit PROTOBUF_CONSTEXPR JointPositions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  JointPositions(const JointPositions& from);
  JointPositions(JointPositions&& from) noexcept
    : JointPositions() {
    *this = ::std::move(from);
  }

  inline JointPositions& operator=(const JointPositions& from) {
    CopyFrom(from);
    return *this;
  }
  inline JointPositions& operator=(JointPositions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const JointPositions& default_instance() {
    return *internal_default_instance();
  }
  static inline const JointPositions* internal_default_instance() {
    return reinterpret_cast<const JointPositions*>(
               &_JointPositions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(JointPositions& a, JointPositions& b) {
    a.Swap(&b);
  }
  inline void Swap(JointPositions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(JointPositions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  JointPositions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<JointPositions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const JointPositions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const JointPositions& from) {
    JointPositions::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JointPositions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.JointPositions";
  }
  protected:
  explicit JointPositions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // repeated double values = 1 [json_name = "values"];
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  double _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_values() const;
  void _internal_add_values(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_values();
  public:
  double values(int index) const;
  void set_values(int index, double value);
  void add_values(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.JointPositions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > values_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class GetJointPositionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.GetJointPositionsRequest) */ {
 public:
  inline GetJointPositionsRequest() : GetJointPositionsRequest(nullptr) {}
  ~GetJointPositionsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetJointPositionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetJointPositionsRequest(const GetJointPositionsRequest& from);
  GetJointPositionsRequest(GetJointPositionsRequest&& from) noexcept
    : GetJointPositionsRequest() {
    *this = ::std::move(from);
  }

  inline GetJointPositionsRequest& operator=(const GetJointPositionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJointPositionsRequest& operator=(GetJointPositionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJointPositionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJointPositionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetJointPositionsRequest*>(
               &_GetJointPositionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetJointPositionsRequest& a, GetJointPositionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJointPositionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJointPositionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJointPositionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJointPositionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetJointPositionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetJointPositionsRequest& from) {
    GetJointPositionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJointPositionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.GetJointPositionsRequest";
  }
  protected:
  explicit GetJointPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.GetJointPositionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class GetJointPositionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.GetJointPositionsResponse) */ {
 public:
  inline GetJointPositionsResponse() : GetJointPositionsResponse(nullptr) {}
  ~GetJointPositionsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetJointPositionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetJointPositionsResponse(const GetJointPositionsResponse& from);
  GetJointPositionsResponse(GetJointPositionsResponse&& from) noexcept
    : GetJointPositionsResponse() {
    *this = ::std::move(from);
  }

  inline GetJointPositionsResponse& operator=(const GetJointPositionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetJointPositionsResponse& operator=(GetJointPositionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetJointPositionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetJointPositionsResponse* internal_default_instance() {
    return reinterpret_cast<const GetJointPositionsResponse*>(
               &_GetJointPositionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetJointPositionsResponse& a, GetJointPositionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetJointPositionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetJointPositionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetJointPositionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetJointPositionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetJointPositionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetJointPositionsResponse& from) {
    GetJointPositionsResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJointPositionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.GetJointPositionsResponse";
  }
  protected:
  explicit GetJointPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionsFieldNumber = 1,
  };
  // .viam.component.arm.v1.JointPositions positions = 1 [json_name = "positions"];
  bool has_positions() const;
  private:
  bool _internal_has_positions() const;
  public:
  void clear_positions();
  const ::viam::component::arm::v1::JointPositions& positions() const;
  PROTOBUF_NODISCARD ::viam::component::arm::v1::JointPositions* release_positions();
  ::viam::component::arm::v1::JointPositions* mutable_positions();
  void set_allocated_positions(::viam::component::arm::v1::JointPositions* positions);
  private:
  const ::viam::component::arm::v1::JointPositions& _internal_positions() const;
  ::viam::component::arm::v1::JointPositions* _internal_mutable_positions();
  public:
  void unsafe_arena_set_allocated_positions(
      ::viam::component::arm::v1::JointPositions* positions);
  ::viam::component::arm::v1::JointPositions* unsafe_arena_release_positions();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.GetJointPositionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::component::arm::v1::JointPositions* positions_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class MoveToPositionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.MoveToPositionRequest) */ {
 public:
  inline MoveToPositionRequest() : MoveToPositionRequest(nullptr) {}
  ~MoveToPositionRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveToPositionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToPositionRequest(const MoveToPositionRequest& from);
  MoveToPositionRequest(MoveToPositionRequest&& from) noexcept
    : MoveToPositionRequest() {
    *this = ::std::move(from);
  }

  inline MoveToPositionRequest& operator=(const MoveToPositionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToPositionRequest& operator=(MoveToPositionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToPositionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToPositionRequest* internal_default_instance() {
    return reinterpret_cast<const MoveToPositionRequest*>(
               &_MoveToPositionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MoveToPositionRequest& a, MoveToPositionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToPositionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToPositionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToPositionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToPositionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveToPositionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveToPositionRequest& from) {
    MoveToPositionRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToPositionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.MoveToPositionRequest";
  }
  protected:
  explicit MoveToPositionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kToFieldNumber = 2,
    kWorldStateFieldNumber = 3,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .viam.common.v1.Pose to = 2 [json_name = "to"];
  bool has_to() const;
  private:
  bool _internal_has_to() const;
  public:
  void clear_to();
  const ::viam::common::v1::Pose& to() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_to();
  ::viam::common::v1::Pose* mutable_to();
  void set_allocated_to(::viam::common::v1::Pose* to);
  private:
  const ::viam::common::v1::Pose& _internal_to() const;
  ::viam::common::v1::Pose* _internal_mutable_to();
  public:
  void unsafe_arena_set_allocated_to(
      ::viam::common::v1::Pose* to);
  ::viam::common::v1::Pose* unsafe_arena_release_to();

  // optional .viam.common.v1.WorldState world_state = 3 [json_name = "worldState"];
  bool has_world_state() const;
  private:
  bool _internal_has_world_state() const;
  public:
  void clear_world_state();
  const ::viam::common::v1::WorldState& world_state() const;
  PROTOBUF_NODISCARD ::viam::common::v1::WorldState* release_world_state();
  ::viam::common::v1::WorldState* mutable_world_state();
  void set_allocated_world_state(::viam::common::v1::WorldState* world_state);
  private:
  const ::viam::common::v1::WorldState& _internal_world_state() const;
  ::viam::common::v1::WorldState* _internal_mutable_world_state();
  public:
  void unsafe_arena_set_allocated_world_state(
      ::viam::common::v1::WorldState* world_state);
  ::viam::common::v1::WorldState* unsafe_arena_release_world_state();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.MoveToPositionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::viam::common::v1::Pose* to_;
    ::viam::common::v1::WorldState* world_state_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class MoveToPositionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.MoveToPositionResponse) */ {
 public:
  inline MoveToPositionResponse() : MoveToPositionResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MoveToPositionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToPositionResponse(const MoveToPositionResponse& from);
  MoveToPositionResponse(MoveToPositionResponse&& from) noexcept
    : MoveToPositionResponse() {
    *this = ::std::move(from);
  }

  inline MoveToPositionResponse& operator=(const MoveToPositionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToPositionResponse& operator=(MoveToPositionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToPositionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToPositionResponse* internal_default_instance() {
    return reinterpret_cast<const MoveToPositionResponse*>(
               &_MoveToPositionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MoveToPositionResponse& a, MoveToPositionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToPositionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToPositionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToPositionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToPositionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveToPositionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveToPositionResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.MoveToPositionResponse";
  }
  protected:
  explicit MoveToPositionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.MoveToPositionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class MoveToJointPositionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.MoveToJointPositionsRequest) */ {
 public:
  inline MoveToJointPositionsRequest() : MoveToJointPositionsRequest(nullptr) {}
  ~MoveToJointPositionsRequest() override;
  explicit PROTOBUF_CONSTEXPR MoveToJointPositionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToJointPositionsRequest(const MoveToJointPositionsRequest& from);
  MoveToJointPositionsRequest(MoveToJointPositionsRequest&& from) noexcept
    : MoveToJointPositionsRequest() {
    *this = ::std::move(from);
  }

  inline MoveToJointPositionsRequest& operator=(const MoveToJointPositionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToJointPositionsRequest& operator=(MoveToJointPositionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToJointPositionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToJointPositionsRequest* internal_default_instance() {
    return reinterpret_cast<const MoveToJointPositionsRequest*>(
               &_MoveToJointPositionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MoveToJointPositionsRequest& a, MoveToJointPositionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToJointPositionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToJointPositionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToJointPositionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToJointPositionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveToJointPositionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const MoveToJointPositionsRequest& from) {
    MoveToJointPositionsRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToJointPositionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.MoveToJointPositionsRequest";
  }
  protected:
  explicit MoveToJointPositionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kPositionsFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .viam.component.arm.v1.JointPositions positions = 2 [json_name = "positions"];
  bool has_positions() const;
  private:
  bool _internal_has_positions() const;
  public:
  void clear_positions();
  const ::viam::component::arm::v1::JointPositions& positions() const;
  PROTOBUF_NODISCARD ::viam::component::arm::v1::JointPositions* release_positions();
  ::viam::component::arm::v1::JointPositions* mutable_positions();
  void set_allocated_positions(::viam::component::arm::v1::JointPositions* positions);
  private:
  const ::viam::component::arm::v1::JointPositions& _internal_positions() const;
  ::viam::component::arm::v1::JointPositions* _internal_mutable_positions();
  public:
  void unsafe_arena_set_allocated_positions(
      ::viam::component::arm::v1::JointPositions* positions);
  ::viam::component::arm::v1::JointPositions* unsafe_arena_release_positions();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.MoveToJointPositionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::viam::component::arm::v1::JointPositions* positions_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class MoveToJointPositionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.MoveToJointPositionsResponse) */ {
 public:
  inline MoveToJointPositionsResponse() : MoveToJointPositionsResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR MoveToJointPositionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToJointPositionsResponse(const MoveToJointPositionsResponse& from);
  MoveToJointPositionsResponse(MoveToJointPositionsResponse&& from) noexcept
    : MoveToJointPositionsResponse() {
    *this = ::std::move(from);
  }

  inline MoveToJointPositionsResponse& operator=(const MoveToJointPositionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToJointPositionsResponse& operator=(MoveToJointPositionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToJointPositionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToJointPositionsResponse* internal_default_instance() {
    return reinterpret_cast<const MoveToJointPositionsResponse*>(
               &_MoveToJointPositionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MoveToJointPositionsResponse& a, MoveToJointPositionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToJointPositionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToJointPositionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToJointPositionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToJointPositionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveToJointPositionsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveToJointPositionsResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.MoveToJointPositionsResponse";
  }
  protected:
  explicit MoveToJointPositionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.MoveToJointPositionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class StopRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.StopRequest) */ {
 public:
  inline StopRequest() : StopRequest(nullptr) {}
  ~StopRequest() override;
  explicit PROTOBUF_CONSTEXPR StopRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopRequest(const StopRequest& from);
  StopRequest(StopRequest&& from) noexcept
    : StopRequest() {
    *this = ::std::move(from);
  }

  inline StopRequest& operator=(const StopRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopRequest& operator=(StopRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopRequest* internal_default_instance() {
    return reinterpret_cast<const StopRequest*>(
               &_StopRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StopRequest& a, StopRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StopRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StopRequest& from) {
    StopRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.StopRequest";
  }
  protected:
  explicit StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.StopRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class StopResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.StopResponse) */ {
 public:
  inline StopResponse() : StopResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR StopResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StopResponse(const StopResponse& from);
  StopResponse(StopResponse&& from) noexcept
    : StopResponse() {
    *this = ::std::move(from);
  }

  inline StopResponse& operator=(const StopResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopResponse& operator=(StopResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StopResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StopResponse* internal_default_instance() {
    return reinterpret_cast<const StopResponse*>(
               &_StopResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(StopResponse& a, StopResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StopResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StopResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StopResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const StopResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.StopResponse";
  }
  protected:
  explicit StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.StopResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.arm.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Status& from) {
    Status::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.arm.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEndPositionFieldNumber = 1,
    kJointPositionsFieldNumber = 2,
    kIsMovingFieldNumber = 3,
  };
  // .viam.common.v1.Pose end_position = 1 [json_name = "endPosition"];
  bool has_end_position() const;
  private:
  bool _internal_has_end_position() const;
  public:
  void clear_end_position();
  const ::viam::common::v1::Pose& end_position() const;
  PROTOBUF_NODISCARD ::viam::common::v1::Pose* release_end_position();
  ::viam::common::v1::Pose* mutable_end_position();
  void set_allocated_end_position(::viam::common::v1::Pose* end_position);
  private:
  const ::viam::common::v1::Pose& _internal_end_position() const;
  ::viam::common::v1::Pose* _internal_mutable_end_position();
  public:
  void unsafe_arena_set_allocated_end_position(
      ::viam::common::v1::Pose* end_position);
  ::viam::common::v1::Pose* unsafe_arena_release_end_position();

  // .viam.component.arm.v1.JointPositions joint_positions = 2 [json_name = "jointPositions"];
  bool has_joint_positions() const;
  private:
  bool _internal_has_joint_positions() const;
  public:
  void clear_joint_positions();
  const ::viam::component::arm::v1::JointPositions& joint_positions() const;
  PROTOBUF_NODISCARD ::viam::component::arm::v1::JointPositions* release_joint_positions();
  ::viam::component::arm::v1::JointPositions* mutable_joint_positions();
  void set_allocated_joint_positions(::viam::component::arm::v1::JointPositions* joint_positions);
  private:
  const ::viam::component::arm::v1::JointPositions& _internal_joint_positions() const;
  ::viam::component::arm::v1::JointPositions* _internal_mutable_joint_positions();
  public:
  void unsafe_arena_set_allocated_joint_positions(
      ::viam::component::arm::v1::JointPositions* joint_positions);
  ::viam::component::arm::v1::JointPositions* unsafe_arena_release_joint_positions();

  // bool is_moving = 3 [json_name = "isMoving"];
  void clear_is_moving();
  bool is_moving() const;
  void set_is_moving(bool value);
  private:
  bool _internal_is_moving() const;
  void _internal_set_is_moving(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.arm.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::viam::common::v1::Pose* end_position_;
    ::viam::component::arm::v1::JointPositions* joint_positions_;
    bool is_moving_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_component_2farm_2fv1_2farm_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetEndPositionRequest

// string name = 1 [json_name = "name"];
inline void GetEndPositionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetEndPositionRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.GetEndPositionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEndPositionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.GetEndPositionRequest.name)
}
inline std::string* GetEndPositionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.GetEndPositionRequest.name)
  return _s;
}
inline const std::string& GetEndPositionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetEndPositionRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEndPositionRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEndPositionRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.GetEndPositionRequest.name)
  return _impl_.name_.Release();
}
inline void GetEndPositionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.GetEndPositionRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetEndPositionRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool GetEndPositionRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetEndPositionRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetEndPositionRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.GetEndPositionRequest.extra)
  return _internal_extra();
}
inline void GetEndPositionRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.GetEndPositionRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEndPositionRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEndPositionRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.GetEndPositionRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEndPositionRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEndPositionRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.GetEndPositionRequest.extra)
  return _msg;
}
inline void GetEndPositionRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.GetEndPositionRequest.extra)
}

// -------------------------------------------------------------------

// GetEndPositionResponse

// .viam.common.v1.Pose pose = 1 [json_name = "pose"];
inline bool GetEndPositionResponse::_internal_has_pose() const {
  return this != internal_default_instance() && _impl_.pose_ != nullptr;
}
inline bool GetEndPositionResponse::has_pose() const {
  return _internal_has_pose();
}
inline const ::viam::common::v1::Pose& GetEndPositionResponse::_internal_pose() const {
  const ::viam::common::v1::Pose* p = _impl_.pose_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(
      ::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& GetEndPositionResponse::pose() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.GetEndPositionResponse.pose)
  return _internal_pose();
}
inline void GetEndPositionResponse::unsafe_arena_set_allocated_pose(
    ::viam::common::v1::Pose* pose) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  _impl_.pose_ = pose;
  if (pose) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.GetEndPositionResponse.pose)
}
inline ::viam::common::v1::Pose* GetEndPositionResponse::release_pose() {
  
  ::viam::common::v1::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Pose* GetEndPositionResponse::unsafe_arena_release_pose() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.GetEndPositionResponse.pose)
  
  ::viam::common::v1::Pose* temp = _impl_.pose_;
  _impl_.pose_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* GetEndPositionResponse::_internal_mutable_pose() {
  
  if (_impl_.pose_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArenaForAllocation());
    _impl_.pose_ = p;
  }
  return _impl_.pose_;
}
inline ::viam::common::v1::Pose* GetEndPositionResponse::mutable_pose() {
  ::viam::common::v1::Pose* _msg = _internal_mutable_pose();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.GetEndPositionResponse.pose)
  return _msg;
}
inline void GetEndPositionResponse::set_allocated_pose(::viam::common::v1::Pose* pose) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pose_);
  }
  if (pose) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pose));
    if (message_arena != submessage_arena) {
      pose = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.GetEndPositionResponse.pose)
}

// -------------------------------------------------------------------

// JointPositions

// repeated double values = 1 [json_name = "values"];
inline int JointPositions::_internal_values_size() const {
  return _impl_.values_.size();
}
inline int JointPositions::values_size() const {
  return _internal_values_size();
}
inline void JointPositions::clear_values() {
  _impl_.values_.Clear();
}
inline double JointPositions::_internal_values(int index) const {
  return _impl_.values_.Get(index);
}
inline double JointPositions::values(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.JointPositions.values)
  return _internal_values(index);
}
inline void JointPositions::set_values(int index, double value) {
  _impl_.values_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.JointPositions.values)
}
inline void JointPositions::_internal_add_values(double value) {
  _impl_.values_.Add(value);
}
inline void JointPositions::add_values(double value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:viam.component.arm.v1.JointPositions.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointPositions::_internal_values() const {
  return _impl_.values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
JointPositions::values() const {
  // @@protoc_insertion_point(field_list:viam.component.arm.v1.JointPositions.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointPositions::_internal_mutable_values() {
  return &_impl_.values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
JointPositions::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.arm.v1.JointPositions.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GetJointPositionsRequest

// string name = 1 [json_name = "name"];
inline void GetJointPositionsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& GetJointPositionsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.GetJointPositionsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetJointPositionsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.GetJointPositionsRequest.name)
}
inline std::string* GetJointPositionsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.GetJointPositionsRequest.name)
  return _s;
}
inline const std::string& GetJointPositionsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void GetJointPositionsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetJointPositionsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetJointPositionsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.GetJointPositionsRequest.name)
  return _impl_.name_.Release();
}
inline void GetJointPositionsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.GetJointPositionsRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetJointPositionsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool GetJointPositionsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetJointPositionsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetJointPositionsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.GetJointPositionsRequest.extra)
  return _internal_extra();
}
inline void GetJointPositionsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.GetJointPositionsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetJointPositionsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetJointPositionsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.GetJointPositionsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetJointPositionsRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetJointPositionsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.GetJointPositionsRequest.extra)
  return _msg;
}
inline void GetJointPositionsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.GetJointPositionsRequest.extra)
}

// -------------------------------------------------------------------

// GetJointPositionsResponse

// .viam.component.arm.v1.JointPositions positions = 1 [json_name = "positions"];
inline bool GetJointPositionsResponse::_internal_has_positions() const {
  return this != internal_default_instance() && _impl_.positions_ != nullptr;
}
inline bool GetJointPositionsResponse::has_positions() const {
  return _internal_has_positions();
}
inline void GetJointPositionsResponse::clear_positions() {
  if (GetArenaForAllocation() == nullptr && _impl_.positions_ != nullptr) {
    delete _impl_.positions_;
  }
  _impl_.positions_ = nullptr;
}
inline const ::viam::component::arm::v1::JointPositions& GetJointPositionsResponse::_internal_positions() const {
  const ::viam::component::arm::v1::JointPositions* p = _impl_.positions_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::arm::v1::JointPositions&>(
      ::viam::component::arm::v1::_JointPositions_default_instance_);
}
inline const ::viam::component::arm::v1::JointPositions& GetJointPositionsResponse::positions() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.GetJointPositionsResponse.positions)
  return _internal_positions();
}
inline void GetJointPositionsResponse::unsafe_arena_set_allocated_positions(
    ::viam::component::arm::v1::JointPositions* positions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.positions_);
  }
  _impl_.positions_ = positions;
  if (positions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.GetJointPositionsResponse.positions)
}
inline ::viam::component::arm::v1::JointPositions* GetJointPositionsResponse::release_positions() {
  
  ::viam::component::arm::v1::JointPositions* temp = _impl_.positions_;
  _impl_.positions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::arm::v1::JointPositions* GetJointPositionsResponse::unsafe_arena_release_positions() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.GetJointPositionsResponse.positions)
  
  ::viam::component::arm::v1::JointPositions* temp = _impl_.positions_;
  _impl_.positions_ = nullptr;
  return temp;
}
inline ::viam::component::arm::v1::JointPositions* GetJointPositionsResponse::_internal_mutable_positions() {
  
  if (_impl_.positions_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::arm::v1::JointPositions>(GetArenaForAllocation());
    _impl_.positions_ = p;
  }
  return _impl_.positions_;
}
inline ::viam::component::arm::v1::JointPositions* GetJointPositionsResponse::mutable_positions() {
  ::viam::component::arm::v1::JointPositions* _msg = _internal_mutable_positions();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.GetJointPositionsResponse.positions)
  return _msg;
}
inline void GetJointPositionsResponse::set_allocated_positions(::viam::component::arm::v1::JointPositions* positions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.positions_;
  }
  if (positions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(positions);
    if (message_arena != submessage_arena) {
      positions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.positions_ = positions;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.GetJointPositionsResponse.positions)
}

// -------------------------------------------------------------------

// MoveToPositionRequest

// string name = 1 [json_name = "name"];
inline void MoveToPositionRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MoveToPositionRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToPositionRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveToPositionRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.MoveToPositionRequest.name)
}
inline std::string* MoveToPositionRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToPositionRequest.name)
  return _s;
}
inline const std::string& MoveToPositionRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MoveToPositionRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveToPositionRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveToPositionRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToPositionRequest.name)
  return _impl_.name_.Release();
}
inline void MoveToPositionRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToPositionRequest.name)
}

// .viam.common.v1.Pose to = 2 [json_name = "to"];
inline bool MoveToPositionRequest::_internal_has_to() const {
  return this != internal_default_instance() && _impl_.to_ != nullptr;
}
inline bool MoveToPositionRequest::has_to() const {
  return _internal_has_to();
}
inline const ::viam::common::v1::Pose& MoveToPositionRequest::_internal_to() const {
  const ::viam::common::v1::Pose* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(
      ::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& MoveToPositionRequest::to() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToPositionRequest.to)
  return _internal_to();
}
inline void MoveToPositionRequest::unsafe_arena_set_allocated_to(
    ::viam::common::v1::Pose* to) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = to;
  if (to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.MoveToPositionRequest.to)
}
inline ::viam::common::v1::Pose* MoveToPositionRequest::release_to() {
  
  ::viam::common::v1::Pose* temp = _impl_.to_;
  _impl_.to_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Pose* MoveToPositionRequest::unsafe_arena_release_to() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToPositionRequest.to)
  
  ::viam::common::v1::Pose* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* MoveToPositionRequest::_internal_mutable_to() {
  
  if (_impl_.to_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArenaForAllocation());
    _impl_.to_ = p;
  }
  return _impl_.to_;
}
inline ::viam::common::v1::Pose* MoveToPositionRequest::mutable_to() {
  ::viam::common::v1::Pose* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToPositionRequest.to)
  return _msg;
}
inline void MoveToPositionRequest::set_allocated_to(::viam::common::v1::Pose* to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.to_);
  }
  if (to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(to));
    if (message_arena != submessage_arena) {
      to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, to, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.to_ = to;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToPositionRequest.to)
}

// optional .viam.common.v1.WorldState world_state = 3 [json_name = "worldState"];
inline bool MoveToPositionRequest::_internal_has_world_state() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.world_state_ != nullptr);
  return value;
}
inline bool MoveToPositionRequest::has_world_state() const {
  return _internal_has_world_state();
}
inline const ::viam::common::v1::WorldState& MoveToPositionRequest::_internal_world_state() const {
  const ::viam::common::v1::WorldState* p = _impl_.world_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::WorldState&>(
      ::viam::common::v1::_WorldState_default_instance_);
}
inline const ::viam::common::v1::WorldState& MoveToPositionRequest::world_state() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToPositionRequest.world_state)
  return _internal_world_state();
}
inline void MoveToPositionRequest::unsafe_arena_set_allocated_world_state(
    ::viam::common::v1::WorldState* world_state) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_state_);
  }
  _impl_.world_state_ = world_state;
  if (world_state) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.MoveToPositionRequest.world_state)
}
inline ::viam::common::v1::WorldState* MoveToPositionRequest::release_world_state() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::WorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::WorldState* MoveToPositionRequest::unsafe_arena_release_world_state() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToPositionRequest.world_state)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::viam::common::v1::WorldState* temp = _impl_.world_state_;
  _impl_.world_state_ = nullptr;
  return temp;
}
inline ::viam::common::v1::WorldState* MoveToPositionRequest::_internal_mutable_world_state() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.world_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::WorldState>(GetArenaForAllocation());
    _impl_.world_state_ = p;
  }
  return _impl_.world_state_;
}
inline ::viam::common::v1::WorldState* MoveToPositionRequest::mutable_world_state() {
  ::viam::common::v1::WorldState* _msg = _internal_mutable_world_state();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToPositionRequest.world_state)
  return _msg;
}
inline void MoveToPositionRequest::set_allocated_world_state(::viam::common::v1::WorldState* world_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.world_state_);
  }
  if (world_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(world_state));
    if (message_arena != submessage_arena) {
      world_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, world_state, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.world_state_ = world_state;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToPositionRequest.world_state)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool MoveToPositionRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool MoveToPositionRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveToPositionRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveToPositionRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToPositionRequest.extra)
  return _internal_extra();
}
inline void MoveToPositionRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.MoveToPositionRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToPositionRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToPositionRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToPositionRequest.extra)
  return _msg;
}
inline void MoveToPositionRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToPositionRequest.extra)
}

// -------------------------------------------------------------------

// MoveToPositionResponse

// -------------------------------------------------------------------

// MoveToJointPositionsRequest

// string name = 1 [json_name = "name"];
inline void MoveToJointPositionsRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& MoveToJointPositionsRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToJointPositionsRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MoveToJointPositionsRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.MoveToJointPositionsRequest.name)
}
inline std::string* MoveToJointPositionsRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToJointPositionsRequest.name)
  return _s;
}
inline const std::string& MoveToJointPositionsRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void MoveToJointPositionsRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* MoveToJointPositionsRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* MoveToJointPositionsRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToJointPositionsRequest.name)
  return _impl_.name_.Release();
}
inline void MoveToJointPositionsRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToJointPositionsRequest.name)
}

// .viam.component.arm.v1.JointPositions positions = 2 [json_name = "positions"];
inline bool MoveToJointPositionsRequest::_internal_has_positions() const {
  return this != internal_default_instance() && _impl_.positions_ != nullptr;
}
inline bool MoveToJointPositionsRequest::has_positions() const {
  return _internal_has_positions();
}
inline void MoveToJointPositionsRequest::clear_positions() {
  if (GetArenaForAllocation() == nullptr && _impl_.positions_ != nullptr) {
    delete _impl_.positions_;
  }
  _impl_.positions_ = nullptr;
}
inline const ::viam::component::arm::v1::JointPositions& MoveToJointPositionsRequest::_internal_positions() const {
  const ::viam::component::arm::v1::JointPositions* p = _impl_.positions_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::arm::v1::JointPositions&>(
      ::viam::component::arm::v1::_JointPositions_default_instance_);
}
inline const ::viam::component::arm::v1::JointPositions& MoveToJointPositionsRequest::positions() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToJointPositionsRequest.positions)
  return _internal_positions();
}
inline void MoveToJointPositionsRequest::unsafe_arena_set_allocated_positions(
    ::viam::component::arm::v1::JointPositions* positions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.positions_);
  }
  _impl_.positions_ = positions;
  if (positions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.MoveToJointPositionsRequest.positions)
}
inline ::viam::component::arm::v1::JointPositions* MoveToJointPositionsRequest::release_positions() {
  
  ::viam::component::arm::v1::JointPositions* temp = _impl_.positions_;
  _impl_.positions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::arm::v1::JointPositions* MoveToJointPositionsRequest::unsafe_arena_release_positions() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToJointPositionsRequest.positions)
  
  ::viam::component::arm::v1::JointPositions* temp = _impl_.positions_;
  _impl_.positions_ = nullptr;
  return temp;
}
inline ::viam::component::arm::v1::JointPositions* MoveToJointPositionsRequest::_internal_mutable_positions() {
  
  if (_impl_.positions_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::arm::v1::JointPositions>(GetArenaForAllocation());
    _impl_.positions_ = p;
  }
  return _impl_.positions_;
}
inline ::viam::component::arm::v1::JointPositions* MoveToJointPositionsRequest::mutable_positions() {
  ::viam::component::arm::v1::JointPositions* _msg = _internal_mutable_positions();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToJointPositionsRequest.positions)
  return _msg;
}
inline void MoveToJointPositionsRequest::set_allocated_positions(::viam::component::arm::v1::JointPositions* positions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.positions_;
  }
  if (positions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(positions);
    if (message_arena != submessage_arena) {
      positions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, positions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.positions_ = positions;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToJointPositionsRequest.positions)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool MoveToJointPositionsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool MoveToJointPositionsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveToJointPositionsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& MoveToJointPositionsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.MoveToJointPositionsRequest.extra)
  return _internal_extra();
}
inline void MoveToJointPositionsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.MoveToJointPositionsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToJointPositionsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToJointPositionsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.MoveToJointPositionsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToJointPositionsRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* MoveToJointPositionsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.MoveToJointPositionsRequest.extra)
  return _msg;
}
inline void MoveToJointPositionsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.MoveToJointPositionsRequest.extra)
}

// -------------------------------------------------------------------

// MoveToJointPositionsResponse

// -------------------------------------------------------------------

// StopRequest

// string name = 1 [json_name = "name"];
inline void StopRequest::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& StopRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.StopRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StopRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.StopRequest.name)
}
inline std::string* StopRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.StopRequest.name)
  return _s;
}
inline const std::string& StopRequest::_internal_name() const {
  return _impl_.name_.Get();
}
inline void StopRequest::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* StopRequest::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* StopRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.StopRequest.name)
  return _impl_.name_.Release();
}
inline void StopRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.StopRequest.name)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool StopRequest::_internal_has_extra() const {
  return this != internal_default_instance() && _impl_.extra_ != nullptr;
}
inline bool StopRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = _impl_.extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StopRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.StopRequest.extra)
  return _internal_extra();
}
inline void StopRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  _impl_.extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.StopRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.StopRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = _impl_.extra_;
  _impl_.extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::_internal_mutable_extra() {
  
  if (_impl_.extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    _impl_.extra_ = p;
  }
  return _impl_.extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StopRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.StopRequest.extra)
  return _msg;
}
inline void StopRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.StopRequest.extra)
}

// -------------------------------------------------------------------

// StopResponse

// -------------------------------------------------------------------

// Status

// .viam.common.v1.Pose end_position = 1 [json_name = "endPosition"];
inline bool Status::_internal_has_end_position() const {
  return this != internal_default_instance() && _impl_.end_position_ != nullptr;
}
inline bool Status::has_end_position() const {
  return _internal_has_end_position();
}
inline const ::viam::common::v1::Pose& Status::_internal_end_position() const {
  const ::viam::common::v1::Pose* p = _impl_.end_position_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::common::v1::Pose&>(
      ::viam::common::v1::_Pose_default_instance_);
}
inline const ::viam::common::v1::Pose& Status::end_position() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.Status.end_position)
  return _internal_end_position();
}
inline void Status::unsafe_arena_set_allocated_end_position(
    ::viam::common::v1::Pose* end_position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_position_);
  }
  _impl_.end_position_ = end_position;
  if (end_position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.Status.end_position)
}
inline ::viam::common::v1::Pose* Status::release_end_position() {
  
  ::viam::common::v1::Pose* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::common::v1::Pose* Status::unsafe_arena_release_end_position() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.Status.end_position)
  
  ::viam::common::v1::Pose* temp = _impl_.end_position_;
  _impl_.end_position_ = nullptr;
  return temp;
}
inline ::viam::common::v1::Pose* Status::_internal_mutable_end_position() {
  
  if (_impl_.end_position_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::common::v1::Pose>(GetArenaForAllocation());
    _impl_.end_position_ = p;
  }
  return _impl_.end_position_;
}
inline ::viam::common::v1::Pose* Status::mutable_end_position() {
  ::viam::common::v1::Pose* _msg = _internal_mutable_end_position();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.Status.end_position)
  return _msg;
}
inline void Status::set_allocated_end_position(::viam::common::v1::Pose* end_position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.end_position_);
  }
  if (end_position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_position));
    if (message_arena != submessage_arena) {
      end_position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end_position, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.end_position_ = end_position;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.Status.end_position)
}

// .viam.component.arm.v1.JointPositions joint_positions = 2 [json_name = "jointPositions"];
inline bool Status::_internal_has_joint_positions() const {
  return this != internal_default_instance() && _impl_.joint_positions_ != nullptr;
}
inline bool Status::has_joint_positions() const {
  return _internal_has_joint_positions();
}
inline void Status::clear_joint_positions() {
  if (GetArenaForAllocation() == nullptr && _impl_.joint_positions_ != nullptr) {
    delete _impl_.joint_positions_;
  }
  _impl_.joint_positions_ = nullptr;
}
inline const ::viam::component::arm::v1::JointPositions& Status::_internal_joint_positions() const {
  const ::viam::component::arm::v1::JointPositions* p = _impl_.joint_positions_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::arm::v1::JointPositions&>(
      ::viam::component::arm::v1::_JointPositions_default_instance_);
}
inline const ::viam::component::arm::v1::JointPositions& Status::joint_positions() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.Status.joint_positions)
  return _internal_joint_positions();
}
inline void Status::unsafe_arena_set_allocated_joint_positions(
    ::viam::component::arm::v1::JointPositions* joint_positions) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.joint_positions_);
  }
  _impl_.joint_positions_ = joint_positions;
  if (joint_positions) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.arm.v1.Status.joint_positions)
}
inline ::viam::component::arm::v1::JointPositions* Status::release_joint_positions() {
  
  ::viam::component::arm::v1::JointPositions* temp = _impl_.joint_positions_;
  _impl_.joint_positions_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::arm::v1::JointPositions* Status::unsafe_arena_release_joint_positions() {
  // @@protoc_insertion_point(field_release:viam.component.arm.v1.Status.joint_positions)
  
  ::viam::component::arm::v1::JointPositions* temp = _impl_.joint_positions_;
  _impl_.joint_positions_ = nullptr;
  return temp;
}
inline ::viam::component::arm::v1::JointPositions* Status::_internal_mutable_joint_positions() {
  
  if (_impl_.joint_positions_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::arm::v1::JointPositions>(GetArenaForAllocation());
    _impl_.joint_positions_ = p;
  }
  return _impl_.joint_positions_;
}
inline ::viam::component::arm::v1::JointPositions* Status::mutable_joint_positions() {
  ::viam::component::arm::v1::JointPositions* _msg = _internal_mutable_joint_positions();
  // @@protoc_insertion_point(field_mutable:viam.component.arm.v1.Status.joint_positions)
  return _msg;
}
inline void Status::set_allocated_joint_positions(::viam::component::arm::v1::JointPositions* joint_positions) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.joint_positions_;
  }
  if (joint_positions) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(joint_positions);
    if (message_arena != submessage_arena) {
      joint_positions = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, joint_positions, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.joint_positions_ = joint_positions;
  // @@protoc_insertion_point(field_set_allocated:viam.component.arm.v1.Status.joint_positions)
}

// bool is_moving = 3 [json_name = "isMoving"];
inline void Status::clear_is_moving() {
  _impl_.is_moving_ = false;
}
inline bool Status::_internal_is_moving() const {
  return _impl_.is_moving_;
}
inline bool Status::is_moving() const {
  // @@protoc_insertion_point(field_get:viam.component.arm.v1.Status.is_moving)
  return _internal_is_moving();
}
inline void Status::_internal_set_is_moving(bool value) {
  
  _impl_.is_moving_ = value;
}
inline void Status::set_is_moving(bool value) {
  _internal_set_is_moving(value);
  // @@protoc_insertion_point(field_set:viam.component.arm.v1.Status.is_moving)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace arm
}  // namespace component
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2farm_2fv1_2farm_2eproto
