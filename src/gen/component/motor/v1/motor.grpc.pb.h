// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/motor/v1/motor.proto
#ifndef GRPC_component_2fmotor_2fv1_2fmotor_2eproto__INCLUDED
#define GRPC_component_2fmotor_2fv1_2fmotor_2eproto__INCLUDED

#include "component/motor/v1/motor.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace component {
namespace motor {
namespace v1 {

// A MotorService maintains all motors associated with a robot
class MotorService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.component.motor.v1.MotorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // SetPower sets the percentage of the motor's total power that should be employed
    // expressed a value between -1 and 1 where negative values indicate a backwards
    // direction and positive values a forward direction
    virtual ::grpc::Status SetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::viam::component::motor::v1::SetPowerResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::SetPowerResponse>> AsyncSetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::SetPowerResponse>>(AsyncSetPowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::SetPowerResponse>> PrepareAsyncSetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::SetPowerResponse>>(PrepareAsyncSetPowerRaw(context, request, cq));
    }
    // GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
    // for a specified number of rotations relative to its starting position
    // This method will return an error if position reporting is not supported
    // If revolutions is 0, this will run the motor at rpm indefinitely
    // If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
    virtual ::grpc::Status GoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::viam::component::motor::v1::GoForResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoForResponse>> AsyncGoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoForResponse>>(AsyncGoForRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoForResponse>> PrepareAsyncGoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoForResponse>>(PrepareAsyncGoForRaw(context, request, cq));
    }
    // GoTo requests the robot's motor to move to a specific position that
    // is relative to its home position at a specified speed which is expressed in RPM
    // This method will return an error if position reporting is not supported
    virtual ::grpc::Status GoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::viam::component::motor::v1::GoToResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoToResponse>> AsyncGoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoToResponse>>(AsyncGoToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoToResponse>> PrepareAsyncGoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoToResponse>>(PrepareAsyncGoToRaw(context, request, cq));
    }
    // ResetZeroPosition sets the current position of the motor as the new zero position
    // This method will return an error if position reporting is not supported
    virtual ::grpc::Status ResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::viam::component::motor::v1::ResetZeroPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::ResetZeroPositionResponse>> AsyncResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::ResetZeroPositionResponse>>(AsyncResetZeroPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::ResetZeroPositionResponse>> PrepareAsyncResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::ResetZeroPositionResponse>>(PrepareAsyncResetZeroPositionRaw(context, request, cq));
    }
    // Position reports the position of the robot's motor relative to its zero position
    // This method will return an error if position reporting is not supported
    virtual ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::viam::component::motor::v1::GetPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    // GetProperties returns a message of booleans indicating which optional features the robot's motor supports
    virtual ::grpc::Status GetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::viam::component::motor::v1::GetPropertiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPropertiesResponse>> AsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPropertiesResponse>>(AsyncGetPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPropertiesResponse>> PrepareAsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPropertiesResponse>>(PrepareAsyncGetPropertiesRaw(context, request, cq));
    }
    // Stop turns the robot's motor off
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::viam::component::motor::v1::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    // IsPowered returns true if the robot's motor is on
    virtual ::grpc::Status IsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::viam::component::motor::v1::IsPoweredResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsPoweredResponse>> AsyncIsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsPoweredResponse>>(AsyncIsPoweredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsPoweredResponse>> PrepareAsyncIsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsPoweredResponse>>(PrepareAsyncIsPoweredRaw(context, request, cq));
    }
    // IsMoving reports if a component is in motion
    virtual ::grpc::Status IsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::viam::component::motor::v1::IsMovingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsMovingResponse>> AsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsMovingResponse>>(AsyncIsMovingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsMovingResponse>> PrepareAsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsMovingResponse>>(PrepareAsyncIsMovingRaw(context, request, cq));
    }
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // SetPower sets the percentage of the motor's total power that should be employed
      // expressed a value between -1 and 1 where negative values indicate a backwards
      // direction and positive values a forward direction
      virtual void SetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest* request, ::viam::component::motor::v1::SetPowerResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest* request, ::viam::component::motor::v1::SetPowerResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
      // for a specified number of rotations relative to its starting position
      // This method will return an error if position reporting is not supported
      // If revolutions is 0, this will run the motor at rpm indefinitely
      // If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
      virtual void GoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest* request, ::viam::component::motor::v1::GoForResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest* request, ::viam::component::motor::v1::GoForResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GoTo requests the robot's motor to move to a specific position that
      // is relative to its home position at a specified speed which is expressed in RPM
      // This method will return an error if position reporting is not supported
      virtual void GoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest* request, ::viam::component::motor::v1::GoToResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest* request, ::viam::component::motor::v1::GoToResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // ResetZeroPosition sets the current position of the motor as the new zero position
      // This method will return an error if position reporting is not supported
      virtual void ResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::viam::component::motor::v1::ResetZeroPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::viam::component::motor::v1::ResetZeroPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Position reports the position of the robot's motor relative to its zero position
      // This method will return an error if position reporting is not supported
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest* request, ::viam::component::motor::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest* request, ::viam::component::motor::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetProperties returns a message of booleans indicating which optional features the robot's motor supports
      virtual void GetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest* request, ::viam::component::motor::v1::GetPropertiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest* request, ::viam::component::motor::v1::GetPropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stop turns the robot's motor off
      virtual void Stop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest* request, ::viam::component::motor::v1::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest* request, ::viam::component::motor::v1::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // IsPowered returns true if the robot's motor is on
      virtual void IsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest* request, ::viam::component::motor::v1::IsPoweredResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest* request, ::viam::component::motor::v1::IsPoweredResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // IsMoving reports if a component is in motion
      virtual void IsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest* request, ::viam::component::motor::v1::IsMovingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest* request, ::viam::component::motor::v1::IsMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DoCommand sends/receives arbitrary commands
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::SetPowerResponse>* AsyncSetPowerRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::SetPowerResponse>* PrepareAsyncSetPowerRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoForResponse>* AsyncGoForRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoForResponse>* PrepareAsyncGoForRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoToResponse>* AsyncGoToRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GoToResponse>* PrepareAsyncGoToRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::ResetZeroPositionResponse>* AsyncResetZeroPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::ResetZeroPositionResponse>* PrepareAsyncResetZeroPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPropertiesResponse>* AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::GetPropertiesResponse>* PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsPoweredResponse>* AsyncIsPoweredRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsPoweredResponse>* PrepareAsyncIsPoweredRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsMovingResponse>* AsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::motor::v1::IsMovingResponse>* PrepareAsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status SetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::viam::component::motor::v1::SetPowerResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::SetPowerResponse>> AsyncSetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::SetPowerResponse>>(AsyncSetPowerRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::SetPowerResponse>> PrepareAsyncSetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::SetPowerResponse>>(PrepareAsyncSetPowerRaw(context, request, cq));
    }
    ::grpc::Status GoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::viam::component::motor::v1::GoForResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoForResponse>> AsyncGoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoForResponse>>(AsyncGoForRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoForResponse>> PrepareAsyncGoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoForResponse>>(PrepareAsyncGoForRaw(context, request, cq));
    }
    ::grpc::Status GoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::viam::component::motor::v1::GoToResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoToResponse>> AsyncGoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoToResponse>>(AsyncGoToRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoToResponse>> PrepareAsyncGoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoToResponse>>(PrepareAsyncGoToRaw(context, request, cq));
    }
    ::grpc::Status ResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::viam::component::motor::v1::ResetZeroPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::ResetZeroPositionResponse>> AsyncResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::ResetZeroPositionResponse>>(AsyncResetZeroPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::ResetZeroPositionResponse>> PrepareAsyncResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::ResetZeroPositionResponse>>(PrepareAsyncResetZeroPositionRaw(context, request, cq));
    }
    ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::viam::component::motor::v1::GetPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    ::grpc::Status GetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::viam::component::motor::v1::GetPropertiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPropertiesResponse>> AsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPropertiesResponse>>(AsyncGetPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPropertiesResponse>> PrepareAsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPropertiesResponse>>(PrepareAsyncGetPropertiesRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::viam::component::motor::v1::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status IsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::viam::component::motor::v1::IsPoweredResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsPoweredResponse>> AsyncIsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsPoweredResponse>>(AsyncIsPoweredRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsPoweredResponse>> PrepareAsyncIsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsPoweredResponse>>(PrepareAsyncIsPoweredRaw(context, request, cq));
    }
    ::grpc::Status IsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::viam::component::motor::v1::IsMovingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsMovingResponse>> AsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsMovingResponse>>(AsyncIsMovingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsMovingResponse>> PrepareAsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsMovingResponse>>(PrepareAsyncIsMovingRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void SetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest* request, ::viam::component::motor::v1::SetPowerResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPower(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest* request, ::viam::component::motor::v1::SetPowerResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest* request, ::viam::component::motor::v1::GoForResponse* response, std::function<void(::grpc::Status)>) override;
      void GoFor(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest* request, ::viam::component::motor::v1::GoForResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest* request, ::viam::component::motor::v1::GoToResponse* response, std::function<void(::grpc::Status)>) override;
      void GoTo(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest* request, ::viam::component::motor::v1::GoToResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::viam::component::motor::v1::ResetZeroPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void ResetZeroPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::viam::component::motor::v1::ResetZeroPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest* request, ::viam::component::motor::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPosition(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest* request, ::viam::component::motor::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest* request, ::viam::component::motor::v1::GetPropertiesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProperties(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest* request, ::viam::component::motor::v1::GetPropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest* request, ::viam::component::motor::v1::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest* request, ::viam::component::motor::v1::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest* request, ::viam::component::motor::v1::IsPoweredResponse* response, std::function<void(::grpc::Status)>) override;
      void IsPowered(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest* request, ::viam::component::motor::v1::IsPoweredResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest* request, ::viam::component::motor::v1::IsMovingResponse* response, std::function<void(::grpc::Status)>) override;
      void IsMoving(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest* request, ::viam::component::motor::v1::IsMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::SetPowerResponse>* AsyncSetPowerRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::SetPowerResponse>* PrepareAsyncSetPowerRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::SetPowerRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoForResponse>* AsyncGoForRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoForResponse>* PrepareAsyncGoForRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoForRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoToResponse>* AsyncGoToRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GoToResponse>* PrepareAsyncGoToRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GoToRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::ResetZeroPositionResponse>* AsyncResetZeroPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::ResetZeroPositionResponse>* PrepareAsyncResetZeroPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPropertiesResponse>* AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::GetPropertiesResponse>* PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsPoweredResponse>* AsyncIsPoweredRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsPoweredResponse>* PrepareAsyncIsPoweredRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsPoweredRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsMovingResponse>* AsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::motor::v1::IsMovingResponse>* PrepareAsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::motor::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_SetPower_;
    const ::grpc::internal::RpcMethod rpcmethod_GoFor_;
    const ::grpc::internal::RpcMethod rpcmethod_GoTo_;
    const ::grpc::internal::RpcMethod rpcmethod_ResetZeroPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_IsPowered_;
    const ::grpc::internal::RpcMethod rpcmethod_IsMoving_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // SetPower sets the percentage of the motor's total power that should be employed
    // expressed a value between -1 and 1 where negative values indicate a backwards
    // direction and positive values a forward direction
    virtual ::grpc::Status SetPower(::grpc::ServerContext* context, const ::viam::component::motor::v1::SetPowerRequest* request, ::viam::component::motor::v1::SetPowerResponse* response);
    // GoFor instructs the motor to turn at a specified speed, which is expressed in RPM,
    // for a specified number of rotations relative to its starting position
    // This method will return an error if position reporting is not supported
    // If revolutions is 0, this will run the motor at rpm indefinitely
    // If revolutions != 0, this will block until the number of revolutions has been completed or another operation comes in.
    virtual ::grpc::Status GoFor(::grpc::ServerContext* context, const ::viam::component::motor::v1::GoForRequest* request, ::viam::component::motor::v1::GoForResponse* response);
    // GoTo requests the robot's motor to move to a specific position that
    // is relative to its home position at a specified speed which is expressed in RPM
    // This method will return an error if position reporting is not supported
    virtual ::grpc::Status GoTo(::grpc::ServerContext* context, const ::viam::component::motor::v1::GoToRequest* request, ::viam::component::motor::v1::GoToResponse* response);
    // ResetZeroPosition sets the current position of the motor as the new zero position
    // This method will return an error if position reporting is not supported
    virtual ::grpc::Status ResetZeroPosition(::grpc::ServerContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::viam::component::motor::v1::ResetZeroPositionResponse* response);
    // Position reports the position of the robot's motor relative to its zero position
    // This method will return an error if position reporting is not supported
    virtual ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::viam::component::motor::v1::GetPositionRequest* request, ::viam::component::motor::v1::GetPositionResponse* response);
    // GetProperties returns a message of booleans indicating which optional features the robot's motor supports
    virtual ::grpc::Status GetProperties(::grpc::ServerContext* context, const ::viam::component::motor::v1::GetPropertiesRequest* request, ::viam::component::motor::v1::GetPropertiesResponse* response);
    // Stop turns the robot's motor off
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::viam::component::motor::v1::StopRequest* request, ::viam::component::motor::v1::StopResponse* response);
    // IsPowered returns true if the robot's motor is on
    virtual ::grpc::Status IsPowered(::grpc::ServerContext* context, const ::viam::component::motor::v1::IsPoweredRequest* request, ::viam::component::motor::v1::IsPoweredResponse* response);
    // IsMoving reports if a component is in motion
    virtual ::grpc::Status IsMoving(::grpc::ServerContext* context, const ::viam::component::motor::v1::IsMovingRequest* request, ::viam::component::motor::v1::IsMovingResponse* response);
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPower() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_SetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPower(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPower(::grpc::ServerContext* context, ::viam::component::motor::v1::SetPowerRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::SetPowerResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GoFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GoFor() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GoFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoFor(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoFor(::grpc::ServerContext* context, ::viam::component::motor::v1::GoForRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::GoForResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GoTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GoTo() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GoTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoTo(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoTo(::grpc::ServerContext* context, ::viam::component::motor::v1::GoToRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::GoToResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ResetZeroPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ResetZeroPosition() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ResetZeroPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetZeroPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetZeroPosition(::grpc::ServerContext* context, ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::ResetZeroPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPosition() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::viam::component::motor::v1::GetPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::GetPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProperties() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperties(::grpc::ServerContext* context, ::viam::component::motor::v1::GetPropertiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::GetPropertiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::viam::component::motor::v1::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsPowered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsPowered() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_IsPowered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPowered(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsPowered(::grpc::ServerContext* context, ::viam::component::motor::v1::IsPoweredRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::IsPoweredResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsMoving() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMoving(::grpc::ServerContext* context, ::viam::component::motor::v1::IsMovingRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::motor::v1::IsMovingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_SetPower<WithAsyncMethod_GoFor<WithAsyncMethod_GoTo<WithAsyncMethod_ResetZeroPosition<WithAsyncMethod_GetPosition<WithAsyncMethod_GetProperties<WithAsyncMethod_Stop<WithAsyncMethod_IsPowered<WithAsyncMethod_IsMoving<WithAsyncMethod_DoCommand<Service > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_SetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPower() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::SetPowerRequest, ::viam::component::motor::v1::SetPowerResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::SetPowerRequest* request, ::viam::component::motor::v1::SetPowerResponse* response) { return this->SetPower(context, request, response); }));}
    void SetMessageAllocatorFor_SetPower(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::SetPowerRequest, ::viam::component::motor::v1::SetPowerResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::SetPowerRequest, ::viam::component::motor::v1::SetPowerResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPower(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPower(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GoFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GoFor() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GoForRequest, ::viam::component::motor::v1::GoForResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::GoForRequest* request, ::viam::component::motor::v1::GoForResponse* response) { return this->GoFor(context, request, response); }));}
    void SetMessageAllocatorFor_GoFor(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::GoForRequest, ::viam::component::motor::v1::GoForResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GoForRequest, ::viam::component::motor::v1::GoForResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GoFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoFor(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GoFor(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GoTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GoTo() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GoToRequest, ::viam::component::motor::v1::GoToResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::GoToRequest* request, ::viam::component::motor::v1::GoToResponse* response) { return this->GoTo(context, request, response); }));}
    void SetMessageAllocatorFor_GoTo(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::GoToRequest, ::viam::component::motor::v1::GoToResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GoToRequest, ::viam::component::motor::v1::GoToResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GoTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoTo(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GoTo(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ResetZeroPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ResetZeroPosition() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::ResetZeroPositionRequest, ::viam::component::motor::v1::ResetZeroPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::ResetZeroPositionRequest* request, ::viam::component::motor::v1::ResetZeroPositionResponse* response) { return this->ResetZeroPosition(context, request, response); }));}
    void SetMessageAllocatorFor_ResetZeroPosition(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::ResetZeroPositionRequest, ::viam::component::motor::v1::ResetZeroPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::ResetZeroPositionRequest, ::viam::component::motor::v1::ResetZeroPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ResetZeroPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetZeroPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetZeroPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GetPositionRequest, ::viam::component::motor::v1::GetPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::GetPositionRequest* request, ::viam::component::motor::v1::GetPositionResponse* response) { return this->GetPosition(context, request, response); }));}
    void SetMessageAllocatorFor_GetPosition(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::GetPositionRequest, ::viam::component::motor::v1::GetPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GetPositionRequest, ::viam::component::motor::v1::GetPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProperties() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GetPropertiesRequest, ::viam::component::motor::v1::GetPropertiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::GetPropertiesRequest* request, ::viam::component::motor::v1::GetPropertiesResponse* response) { return this->GetProperties(context, request, response); }));}
    void SetMessageAllocatorFor_GetProperties(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::GetPropertiesRequest, ::viam::component::motor::v1::GetPropertiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::GetPropertiesRequest, ::viam::component::motor::v1::GetPropertiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::StopRequest, ::viam::component::motor::v1::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::StopRequest* request, ::viam::component::motor::v1::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::StopRequest, ::viam::component::motor::v1::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::StopRequest, ::viam::component::motor::v1::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsPowered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsPowered() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::IsPoweredRequest, ::viam::component::motor::v1::IsPoweredResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::IsPoweredRequest* request, ::viam::component::motor::v1::IsPoweredResponse* response) { return this->IsPowered(context, request, response); }));}
    void SetMessageAllocatorFor_IsPowered(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::IsPoweredRequest, ::viam::component::motor::v1::IsPoweredResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::IsPoweredRequest, ::viam::component::motor::v1::IsPoweredResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsPowered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPowered(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsPowered(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsMoving() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::IsMovingRequest, ::viam::component::motor::v1::IsMovingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::motor::v1::IsMovingRequest* request, ::viam::component::motor::v1::IsMovingResponse* response) { return this->IsMoving(context, request, response); }));}
    void SetMessageAllocatorFor_IsMoving(
        ::grpc::MessageAllocator< ::viam::component::motor::v1::IsMovingRequest, ::viam::component::motor::v1::IsMovingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::motor::v1::IsMovingRequest, ::viam::component::motor::v1::IsMovingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsMoving(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_SetPower<WithCallbackMethod_GoFor<WithCallbackMethod_GoTo<WithCallbackMethod_ResetZeroPosition<WithCallbackMethod_GetPosition<WithCallbackMethod_GetProperties<WithCallbackMethod_Stop<WithCallbackMethod_IsPowered<WithCallbackMethod_IsMoving<WithCallbackMethod_DoCommand<Service > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_SetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPower() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_SetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPower(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GoFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GoFor() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GoFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoFor(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GoTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GoTo() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GoTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoTo(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ResetZeroPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ResetZeroPosition() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ResetZeroPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetZeroPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPosition() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProperties() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsPowered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsPowered() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_IsPowered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPowered(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsMoving() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPower() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_SetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPower(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPower(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GoFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GoFor() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GoFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoFor(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoFor(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GoTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GoTo() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GoTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoTo(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGoTo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ResetZeroPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ResetZeroPosition() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ResetZeroPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetZeroPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestResetZeroPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPosition() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProperties() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsPowered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsPowered() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_IsPowered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPowered(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsPowered(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsMoving() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMoving(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPower() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPower(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPower(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPower(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GoFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GoFor() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GoFor(context, request, response); }));
    }
    ~WithRawCallbackMethod_GoFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoFor(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GoFor(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GoTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GoTo() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GoTo(context, request, response); }));
    }
    ~WithRawCallbackMethod_GoTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GoTo(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GoTo(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ResetZeroPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ResetZeroPosition() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ResetZeroPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_ResetZeroPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ResetZeroPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ResetZeroPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProperties() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProperties(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsPowered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsPowered() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsPowered(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsPowered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsPowered(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsPowered(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsMoving() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsMoving(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsMoving(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPower : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPower() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::SetPowerRequest, ::viam::component::motor::v1::SetPowerResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::SetPowerRequest, ::viam::component::motor::v1::SetPowerResponse>* streamer) {
                       return this->StreamedSetPower(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPower() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPower(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::SetPowerRequest* /*request*/, ::viam::component::motor::v1::SetPowerResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPower(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::SetPowerRequest,::viam::component::motor::v1::SetPowerResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GoFor : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GoFor() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::GoForRequest, ::viam::component::motor::v1::GoForResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::GoForRequest, ::viam::component::motor::v1::GoForResponse>* streamer) {
                       return this->StreamedGoFor(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GoFor() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GoFor(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoForRequest* /*request*/, ::viam::component::motor::v1::GoForResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGoFor(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::GoForRequest,::viam::component::motor::v1::GoForResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GoTo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GoTo() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::GoToRequest, ::viam::component::motor::v1::GoToResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::GoToRequest, ::viam::component::motor::v1::GoToResponse>* streamer) {
                       return this->StreamedGoTo(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GoTo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GoTo(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GoToRequest* /*request*/, ::viam::component::motor::v1::GoToResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGoTo(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::GoToRequest,::viam::component::motor::v1::GoToResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ResetZeroPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ResetZeroPosition() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::ResetZeroPositionRequest, ::viam::component::motor::v1::ResetZeroPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::ResetZeroPositionRequest, ::viam::component::motor::v1::ResetZeroPositionResponse>* streamer) {
                       return this->StreamedResetZeroPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ResetZeroPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ResetZeroPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::ResetZeroPositionRequest* /*request*/, ::viam::component::motor::v1::ResetZeroPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedResetZeroPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::ResetZeroPositionRequest,::viam::component::motor::v1::ResetZeroPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPosition() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::GetPositionRequest, ::viam::component::motor::v1::GetPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::GetPositionRequest, ::viam::component::motor::v1::GetPositionResponse>* streamer) {
                       return this->StreamedGetPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPositionRequest* /*request*/, ::viam::component::motor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::GetPositionRequest,::viam::component::motor::v1::GetPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProperties() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::GetPropertiesRequest, ::viam::component::motor::v1::GetPropertiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::GetPropertiesRequest, ::viam::component::motor::v1::GetPropertiesResponse>* streamer) {
                       return this->StreamedGetProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::GetPropertiesRequest* /*request*/, ::viam::component::motor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::GetPropertiesRequest,::viam::component::motor::v1::GetPropertiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::StopRequest, ::viam::component::motor::v1::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::StopRequest, ::viam::component::motor::v1::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::StopRequest* /*request*/, ::viam::component::motor::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::StopRequest,::viam::component::motor::v1::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsPowered : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsPowered() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::IsPoweredRequest, ::viam::component::motor::v1::IsPoweredResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::IsPoweredRequest, ::viam::component::motor::v1::IsPoweredResponse>* streamer) {
                       return this->StreamedIsPowered(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsPowered() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsPowered(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsPoweredRequest* /*request*/, ::viam::component::motor::v1::IsPoweredResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsPowered(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::IsPoweredRequest,::viam::component::motor::v1::IsPoweredResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsMoving() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::motor::v1::IsMovingRequest, ::viam::component::motor::v1::IsMovingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::motor::v1::IsMovingRequest, ::viam::component::motor::v1::IsMovingResponse>* streamer) {
                       return this->StreamedIsMoving(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::motor::v1::IsMovingRequest* /*request*/, ::viam::component::motor::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsMoving(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::motor::v1::IsMovingRequest,::viam::component::motor::v1::IsMovingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_SetPower<WithStreamedUnaryMethod_GoFor<WithStreamedUnaryMethod_GoTo<WithStreamedUnaryMethod_ResetZeroPosition<WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_GetProperties<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_IsPowered<WithStreamedUnaryMethod_IsMoving<WithStreamedUnaryMethod_DoCommand<Service > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_SetPower<WithStreamedUnaryMethod_GoFor<WithStreamedUnaryMethod_GoTo<WithStreamedUnaryMethod_ResetZeroPosition<WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_GetProperties<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_IsPowered<WithStreamedUnaryMethod_IsMoving<WithStreamedUnaryMethod_DoCommand<Service > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace motor
}  // namespace component
}  // namespace viam


#endif  // GRPC_component_2fmotor_2fv1_2fmotor_2eproto__INCLUDED
