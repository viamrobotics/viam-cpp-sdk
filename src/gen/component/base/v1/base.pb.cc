// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/base/v1/base.proto

#include "component/base/v1/base.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace component {
namespace base {
namespace v1 {
PROTOBUF_CONSTEXPR MoveStraightRequest::MoveStraightRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/nullptr
  , /*decltype(_impl_.distance_mm_)*/int64_t{0}
  , /*decltype(_impl_.mm_per_sec_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct MoveStraightRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveStraightRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveStraightRequestDefaultTypeInternal() {}
  union {
    MoveStraightRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveStraightRequestDefaultTypeInternal _MoveStraightRequest_default_instance_;
PROTOBUF_CONSTEXPR MoveStraightResponse::MoveStraightResponse(
    ::_pbi::ConstantInitialized) {}
struct MoveStraightResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR MoveStraightResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~MoveStraightResponseDefaultTypeInternal() {}
  union {
    MoveStraightResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 MoveStraightResponseDefaultTypeInternal _MoveStraightResponse_default_instance_;
PROTOBUF_CONSTEXPR SpinRequest::SpinRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/nullptr
  , /*decltype(_impl_.angle_deg_)*/0
  , /*decltype(_impl_.degs_per_sec_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SpinRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpinRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpinRequestDefaultTypeInternal() {}
  union {
    SpinRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpinRequestDefaultTypeInternal _SpinRequest_default_instance_;
PROTOBUF_CONSTEXPR SpinResponse::SpinResponse(
    ::_pbi::ConstantInitialized) {}
struct SpinResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SpinResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SpinResponseDefaultTypeInternal() {}
  union {
    SpinResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SpinResponseDefaultTypeInternal _SpinResponse_default_instance_;
PROTOBUF_CONSTEXPR StopRequest::StopRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.extra_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct StopRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopRequestDefaultTypeInternal() {}
  union {
    StopRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopRequestDefaultTypeInternal _StopRequest_default_instance_;
PROTOBUF_CONSTEXPR StopResponse::StopResponse(
    ::_pbi::ConstantInitialized) {}
struct StopResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StopResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~StopResponseDefaultTypeInternal() {}
  union {
    StopResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StopResponseDefaultTypeInternal _StopResponse_default_instance_;
PROTOBUF_CONSTEXPR SetPowerRequest::SetPowerRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linear_)*/nullptr
  , /*decltype(_impl_.angular_)*/nullptr
  , /*decltype(_impl_.extra_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetPowerRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPowerRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPowerRequestDefaultTypeInternal() {}
  union {
    SetPowerRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPowerRequestDefaultTypeInternal _SetPowerRequest_default_instance_;
PROTOBUF_CONSTEXPR SetPowerResponse::SetPowerResponse(
    ::_pbi::ConstantInitialized) {}
struct SetPowerResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetPowerResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetPowerResponseDefaultTypeInternal() {}
  union {
    SetPowerResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetPowerResponseDefaultTypeInternal _SetPowerResponse_default_instance_;
PROTOBUF_CONSTEXPR SetVelocityRequest::SetVelocityRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.linear_)*/nullptr
  , /*decltype(_impl_.angular_)*/nullptr
  , /*decltype(_impl_.extra_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct SetVelocityRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVelocityRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVelocityRequestDefaultTypeInternal() {}
  union {
    SetVelocityRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVelocityRequestDefaultTypeInternal _SetVelocityRequest_default_instance_;
PROTOBUF_CONSTEXPR SetVelocityResponse::SetVelocityResponse(
    ::_pbi::ConstantInitialized) {}
struct SetVelocityResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SetVelocityResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~SetVelocityResponseDefaultTypeInternal() {}
  union {
    SetVelocityResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SetVelocityResponseDefaultTypeInternal _SetVelocityResponse_default_instance_;
PROTOBUF_CONSTEXPR IsMovingRequest::IsMovingRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsMovingRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsMovingRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsMovingRequestDefaultTypeInternal() {}
  union {
    IsMovingRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsMovingRequestDefaultTypeInternal _IsMovingRequest_default_instance_;
PROTOBUF_CONSTEXPR IsMovingResponse::IsMovingResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.is_moving_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct IsMovingResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IsMovingResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IsMovingResponseDefaultTypeInternal() {}
  union {
    IsMovingResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IsMovingResponseDefaultTypeInternal _IsMovingResponse_default_instance_;
}  // namespace v1
}  // namespace base
}  // namespace component
}  // namespace viam
static ::_pb::Metadata file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_component_2fbase_2fv1_2fbase_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_component_2fbase_2fv1_2fbase_2eproto = nullptr;

const uint32_t TableStruct_component_2fbase_2fv1_2fbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::MoveStraightRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::MoveStraightRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::MoveStraightRequest, _impl_.distance_mm_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::MoveStraightRequest, _impl_.mm_per_sec_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::MoveStraightRequest, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::MoveStraightResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SpinRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SpinRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SpinRequest, _impl_.angle_deg_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SpinRequest, _impl_.degs_per_sec_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SpinRequest, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SpinResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::StopRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::StopRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::StopRequest, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::StopResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetPowerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetPowerRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetPowerRequest, _impl_.linear_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetPowerRequest, _impl_.angular_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetPowerRequest, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetPowerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetVelocityRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetVelocityRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetVelocityRequest, _impl_.linear_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetVelocityRequest, _impl_.angular_),
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetVelocityRequest, _impl_.extra_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::SetVelocityResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::IsMovingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::IsMovingRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::IsMovingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::base::v1::IsMovingResponse, _impl_.is_moving_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::component::base::v1::MoveStraightRequest)},
  { 10, -1, -1, sizeof(::viam::component::base::v1::MoveStraightResponse)},
  { 16, -1, -1, sizeof(::viam::component::base::v1::SpinRequest)},
  { 26, -1, -1, sizeof(::viam::component::base::v1::SpinResponse)},
  { 32, -1, -1, sizeof(::viam::component::base::v1::StopRequest)},
  { 40, -1, -1, sizeof(::viam::component::base::v1::StopResponse)},
  { 46, -1, -1, sizeof(::viam::component::base::v1::SetPowerRequest)},
  { 56, -1, -1, sizeof(::viam::component::base::v1::SetPowerResponse)},
  { 62, -1, -1, sizeof(::viam::component::base::v1::SetVelocityRequest)},
  { 72, -1, -1, sizeof(::viam::component::base::v1::SetVelocityResponse)},
  { 78, -1, -1, sizeof(::viam::component::base::v1::IsMovingRequest)},
  { 85, -1, -1, sizeof(::viam::component::base::v1::IsMovingResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::component::base::v1::_MoveStraightRequest_default_instance_._instance,
  &::viam::component::base::v1::_MoveStraightResponse_default_instance_._instance,
  &::viam::component::base::v1::_SpinRequest_default_instance_._instance,
  &::viam::component::base::v1::_SpinResponse_default_instance_._instance,
  &::viam::component::base::v1::_StopRequest_default_instance_._instance,
  &::viam::component::base::v1::_StopResponse_default_instance_._instance,
  &::viam::component::base::v1::_SetPowerRequest_default_instance_._instance,
  &::viam::component::base::v1::_SetPowerResponse_default_instance_._instance,
  &::viam::component::base::v1::_SetVelocityRequest_default_instance_._instance,
  &::viam::component::base::v1::_SetVelocityResponse_default_instance_._instance,
  &::viam::component::base::v1::_IsMovingRequest_default_instance_._instance,
  &::viam::component::base::v1::_IsMovingResponse_default_instance_._instance,
};

const char descriptor_table_protodef_component_2fbase_2fv1_2fbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\034component/base/v1/base.proto\022\026viam.com"
  "ponent.base.v1\032\026common/v1/common.proto\032\034"
  "google/api/annotations.proto\032\034google/pro"
  "tobuf/struct.proto\"\227\001\n\023MoveStraightReque"
  "st\022\022\n\004name\030\001 \001(\tR\004name\022\037\n\013distance_mm\030\002 "
  "\001(\003R\ndistanceMm\022\034\n\nmm_per_sec\030\003 \001(\001R\010mmP"
  "erSec\022-\n\005extra\030c \001(\0132\027.google.protobuf.S"
  "tructR\005extra\"\026\n\024MoveStraightResponse\"\217\001\n"
  "\013SpinRequest\022\022\n\004name\030\001 \001(\tR\004name\022\033\n\tangl"
  "e_deg\030\002 \001(\001R\010angleDeg\022 \n\014degs_per_sec\030\003 "
  "\001(\001R\ndegsPerSec\022-\n\005extra\030c \001(\0132\027.google."
  "protobuf.StructR\005extra\"\016\n\014SpinResponse\"P"
  "\n\013StopRequest\022\022\n\004name\030\001 \001(\tR\004name\022-\n\005ext"
  "ra\030c \001(\0132\027.google.protobuf.StructR\005extra"
  "\"\016\n\014StopResponse\"\270\001\n\017SetPowerRequest\022\022\n\004"
  "name\030\001 \001(\tR\004name\022/\n\006linear\030\002 \001(\0132\027.viam."
  "common.v1.Vector3R\006linear\0221\n\007angular\030\003 \001"
  "(\0132\027.viam.common.v1.Vector3R\007angular\022-\n\005"
  "extra\030c \001(\0132\027.google.protobuf.StructR\005ex"
  "tra\"\022\n\020SetPowerResponse\"\273\001\n\022SetVelocityR"
  "equest\022\022\n\004name\030\001 \001(\tR\004name\022/\n\006linear\030\002 \001"
  "(\0132\027.viam.common.v1.Vector3R\006linear\0221\n\007a"
  "ngular\030\003 \001(\0132\027.viam.common.v1.Vector3R\007a"
  "ngular\022-\n\005extra\030c \001(\0132\027.google.protobuf."
  "StructR\005extra\"\025\n\023SetVelocityResponse\"%\n\017"
  "IsMovingRequest\022\022\n\004name\030\001 \001(\tR\004name\"/\n\020I"
  "sMovingResponse\022\033\n\tis_moving\030\001 \001(\010R\010isMo"
  "ving2\245\010\n\013BaseService\022\247\001\n\014MoveStraight\022+."
  "viam.component.base.v1.MoveStraightReque"
  "st\032,.viam.component.base.v1.MoveStraight"
  "Response\"<\240\222)\001\202\323\344\223\0022\"0/viam/api/v1/compo"
  "nent/base/{name}/move_straight\022\206\001\n\004Spin\022"
  "#.viam.component.base.v1.SpinRequest\032$.v"
  "iam.component.base.v1.SpinResponse\"3\240\222)\001"
  "\202\323\344\223\002)\"\'/viam/api/v1/component/base/{nam"
  "e}/spin\022\227\001\n\010SetPower\022\'.viam.component.ba"
  "se.v1.SetPowerRequest\032(.viam.component.b"
  "ase.v1.SetPowerResponse\"8\240\222)\001\202\323\344\223\002.\",/vi"
  "am/api/v1/component/base/{name}/set_powe"
  "r\022\243\001\n\013SetVelocity\022*.viam.component.base."
  "v1.SetVelocityRequest\032+.viam.component.b"
  "ase.v1.SetVelocityResponse\";\240\222)\001\202\323\344\223\0021\"/"
  "/viam/api/v1/component/base/{name}/set_v"
  "elocity\022\202\001\n\004Stop\022#.viam.component.base.v"
  "1.StopRequest\032$.viam.component.base.v1.S"
  "topResponse\"/\202\323\344\223\002)\"\'/viam/api/v1/compon"
  "ent/base/{name}/stop\022\223\001\n\010IsMoving\022\'.viam"
  ".component.base.v1.IsMovingRequest\032(.via"
  "m.component.base.v1.IsMovingResponse\"4\202\323"
  "\344\223\002.\022,/viam/api/v1/component/base/{name}"
  "/is_moving\022\207\001\n\tDoCommand\022 .viam.common.v"
  "1.DoCommandRequest\032!.viam.common.v1.DoCo"
  "mmandResponse\"5\202\323\344\223\002/\"-/viam/api/v1/comp"
  "onent/base/{name}/do_commandB\?\n\032com.viam"
  ".component.base.v1Z!go.viam.com/api/comp"
  "onent/base/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_component_2fbase_2fv1_2fbase_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fprotobuf_2fstruct_2eproto,
};
static ::_pbi::once_flag descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_component_2fbase_2fv1_2fbase_2eproto = {
    false, false, 2221, descriptor_table_protodef_component_2fbase_2fv1_2fbase_2eproto,
    "component/base/v1/base.proto",
    &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once, descriptor_table_component_2fbase_2fv1_2fbase_2eproto_deps, 3, 12,
    schemas, file_default_instances, TableStruct_component_2fbase_2fv1_2fbase_2eproto::offsets,
    file_level_metadata_component_2fbase_2fv1_2fbase_2eproto, file_level_enum_descriptors_component_2fbase_2fv1_2fbase_2eproto,
    file_level_service_descriptors_component_2fbase_2fv1_2fbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter() {
  return &descriptor_table_component_2fbase_2fv1_2fbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_component_2fbase_2fv1_2fbase_2eproto(&descriptor_table_component_2fbase_2fv1_2fbase_2eproto);
namespace viam {
namespace component {
namespace base {
namespace v1 {

// ===================================================================

class MoveStraightRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const MoveStraightRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
MoveStraightRequest::_Internal::extra(const MoveStraightRequest* msg) {
  return *msg->_impl_.extra_;
}
void MoveStraightRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
MoveStraightRequest::MoveStraightRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.MoveStraightRequest)
}
MoveStraightRequest::MoveStraightRequest(const MoveStraightRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  MoveStraightRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extra_){nullptr}
    , decltype(_impl_.distance_mm_){}
    , decltype(_impl_.mm_per_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  ::memcpy(&_impl_.distance_mm_, &from._impl_.distance_mm_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.mm_per_sec_) -
    reinterpret_cast<char*>(&_impl_.distance_mm_)) + sizeof(_impl_.mm_per_sec_));
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.MoveStraightRequest)
}

inline void MoveStraightRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extra_){nullptr}
    , decltype(_impl_.distance_mm_){int64_t{0}}
    , decltype(_impl_.mm_per_sec_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MoveStraightRequest::~MoveStraightRequest() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.MoveStraightRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void MoveStraightRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void MoveStraightRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void MoveStraightRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.MoveStraightRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  ::memset(&_impl_.distance_mm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.mm_per_sec_) -
      reinterpret_cast<char*>(&_impl_.distance_mm_)) + sizeof(_impl_.mm_per_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MoveStraightRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.base.v1.MoveStraightRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // int64 distance_mm = 2 [json_name = "distanceMm"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.distance_mm_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double mm_per_sec = 3 [json_name = "mmPerSec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.mm_per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MoveStraightRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.MoveStraightRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.base.v1.MoveStraightRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int64 distance_mm = 2 [json_name = "distanceMm"];
  if (this->_internal_distance_mm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(2, this->_internal_distance_mm(), target);
  }

  // double mm_per_sec = 3 [json_name = "mmPerSec"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mm_per_sec = this->_internal_mm_per_sec();
  uint64_t raw_mm_per_sec;
  memcpy(&raw_mm_per_sec, &tmp_mm_per_sec, sizeof(tmp_mm_per_sec));
  if (raw_mm_per_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_mm_per_sec(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.MoveStraightRequest)
  return target;
}

size_t MoveStraightRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.MoveStraightRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  // int64 distance_mm = 2 [json_name = "distanceMm"];
  if (this->_internal_distance_mm() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_distance_mm());
  }

  // double mm_per_sec = 3 [json_name = "mmPerSec"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mm_per_sec = this->_internal_mm_per_sec();
  uint64_t raw_mm_per_sec;
  memcpy(&raw_mm_per_sec, &tmp_mm_per_sec, sizeof(tmp_mm_per_sec));
  if (raw_mm_per_sec != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveStraightRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    MoveStraightRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveStraightRequest::GetClassData() const { return &_class_data_; }


void MoveStraightRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<MoveStraightRequest*>(&to_msg);
  auto& from = static_cast<const MoveStraightRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.MoveStraightRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  if (from._internal_distance_mm() != 0) {
    _this->_internal_set_distance_mm(from._internal_distance_mm());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mm_per_sec = from._internal_mm_per_sec();
  uint64_t raw_mm_per_sec;
  memcpy(&raw_mm_per_sec, &tmp_mm_per_sec, sizeof(tmp_mm_per_sec));
  if (raw_mm_per_sec != 0) {
    _this->_internal_set_mm_per_sec(from._internal_mm_per_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MoveStraightRequest::CopyFrom(const MoveStraightRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.MoveStraightRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveStraightRequest::IsInitialized() const {
  return true;
}

void MoveStraightRequest::InternalSwap(MoveStraightRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MoveStraightRequest, _impl_.mm_per_sec_)
      + sizeof(MoveStraightRequest::_impl_.mm_per_sec_)
      - PROTOBUF_FIELD_OFFSET(MoveStraightRequest, _impl_.extra_)>(
          reinterpret_cast<char*>(&_impl_.extra_),
          reinterpret_cast<char*>(&other->_impl_.extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MoveStraightRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[0]);
}

// ===================================================================

class MoveStraightResponse::_Internal {
 public:
};

MoveStraightResponse::MoveStraightResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.MoveStraightResponse)
}
MoveStraightResponse::MoveStraightResponse(const MoveStraightResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  MoveStraightResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.MoveStraightResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MoveStraightResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MoveStraightResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata MoveStraightResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[1]);
}

// ===================================================================

class SpinRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const SpinRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
SpinRequest::_Internal::extra(const SpinRequest* msg) {
  return *msg->_impl_.extra_;
}
void SpinRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
SpinRequest::SpinRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.SpinRequest)
}
SpinRequest::SpinRequest(const SpinRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SpinRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extra_){nullptr}
    , decltype(_impl_.angle_deg_){}
    , decltype(_impl_.degs_per_sec_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  ::memcpy(&_impl_.angle_deg_, &from._impl_.angle_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.degs_per_sec_) -
    reinterpret_cast<char*>(&_impl_.angle_deg_)) + sizeof(_impl_.degs_per_sec_));
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.SpinRequest)
}

inline void SpinRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extra_){nullptr}
    , decltype(_impl_.angle_deg_){0}
    , decltype(_impl_.degs_per_sec_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SpinRequest::~SpinRequest() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.SpinRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SpinRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void SpinRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SpinRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.SpinRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  ::memset(&_impl_.angle_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.degs_per_sec_) -
      reinterpret_cast<char*>(&_impl_.angle_deg_)) + sizeof(_impl_.degs_per_sec_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SpinRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.base.v1.SpinRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // double angle_deg = 2 [json_name = "angleDeg"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          _impl_.angle_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double degs_per_sec = 3 [json_name = "degsPerSec"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          _impl_.degs_per_sec_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SpinRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.SpinRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.base.v1.SpinRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // double angle_deg = 2 [json_name = "angleDeg"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_deg = this->_internal_angle_deg();
  uint64_t raw_angle_deg;
  memcpy(&raw_angle_deg, &tmp_angle_deg, sizeof(tmp_angle_deg));
  if (raw_angle_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(2, this->_internal_angle_deg(), target);
  }

  // double degs_per_sec = 3 [json_name = "degsPerSec"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_degs_per_sec = this->_internal_degs_per_sec();
  uint64_t raw_degs_per_sec;
  memcpy(&raw_degs_per_sec, &tmp_degs_per_sec, sizeof(tmp_degs_per_sec));
  if (raw_degs_per_sec != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_degs_per_sec(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.SpinRequest)
  return target;
}

size_t SpinRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.SpinRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  // double angle_deg = 2 [json_name = "angleDeg"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_deg = this->_internal_angle_deg();
  uint64_t raw_angle_deg;
  memcpy(&raw_angle_deg, &tmp_angle_deg, sizeof(tmp_angle_deg));
  if (raw_angle_deg != 0) {
    total_size += 1 + 8;
  }

  // double degs_per_sec = 3 [json_name = "degsPerSec"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_degs_per_sec = this->_internal_degs_per_sec();
  uint64_t raw_degs_per_sec;
  memcpy(&raw_degs_per_sec, &tmp_degs_per_sec, sizeof(tmp_degs_per_sec));
  if (raw_degs_per_sec != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpinRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SpinRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpinRequest::GetClassData() const { return &_class_data_; }


void SpinRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SpinRequest*>(&to_msg);
  auto& from = static_cast<const SpinRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.SpinRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_angle_deg = from._internal_angle_deg();
  uint64_t raw_angle_deg;
  memcpy(&raw_angle_deg, &tmp_angle_deg, sizeof(tmp_angle_deg));
  if (raw_angle_deg != 0) {
    _this->_internal_set_angle_deg(from._internal_angle_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_degs_per_sec = from._internal_degs_per_sec();
  uint64_t raw_degs_per_sec;
  memcpy(&raw_degs_per_sec, &tmp_degs_per_sec, sizeof(tmp_degs_per_sec));
  if (raw_degs_per_sec != 0) {
    _this->_internal_set_degs_per_sec(from._internal_degs_per_sec());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SpinRequest::CopyFrom(const SpinRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.SpinRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SpinRequest::IsInitialized() const {
  return true;
}

void SpinRequest::InternalSwap(SpinRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SpinRequest, _impl_.degs_per_sec_)
      + sizeof(SpinRequest::_impl_.degs_per_sec_)
      - PROTOBUF_FIELD_OFFSET(SpinRequest, _impl_.extra_)>(
          reinterpret_cast<char*>(&_impl_.extra_),
          reinterpret_cast<char*>(&other->_impl_.extra_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SpinRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[2]);
}

// ===================================================================

class SpinResponse::_Internal {
 public:
};

SpinResponse::SpinResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.SpinResponse)
}
SpinResponse::SpinResponse(const SpinResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SpinResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.SpinResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SpinResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SpinResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SpinResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[3]);
}

// ===================================================================

class StopRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const StopRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Struct&
StopRequest::_Internal::extra(const StopRequest* msg) {
  return *msg->_impl_.extra_;
}
void StopRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
StopRequest::StopRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.StopRequest)
}
StopRequest::StopRequest(const StopRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  StopRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.StopRequest)
}

inline void StopRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

StopRequest::~StopRequest() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.StopRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void StopRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void StopRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void StopRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.StopRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StopRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.base.v1.StopRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StopRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.StopRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.base.v1.StopRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.StopRequest)
  return target;
}

size_t StopRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.StopRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    StopRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopRequest::GetClassData() const { return &_class_data_; }


void StopRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<StopRequest*>(&to_msg);
  auto& from = static_cast<const StopRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.StopRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StopRequest::CopyFrom(const StopRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.StopRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopRequest::IsInitialized() const {
  return true;
}

void StopRequest::InternalSwap(StopRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.extra_, other->_impl_.extra_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[4]);
}

// ===================================================================

class StopResponse::_Internal {
 public:
};

StopResponse::StopResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.StopResponse)
}
StopResponse::StopResponse(const StopResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  StopResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.StopResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StopResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StopResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata StopResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[5]);
}

// ===================================================================

class SetPowerRequest::_Internal {
 public:
  static const ::viam::common::v1::Vector3& linear(const SetPowerRequest* msg);
  static const ::viam::common::v1::Vector3& angular(const SetPowerRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const SetPowerRequest* msg);
};

const ::viam::common::v1::Vector3&
SetPowerRequest::_Internal::linear(const SetPowerRequest* msg) {
  return *msg->_impl_.linear_;
}
const ::viam::common::v1::Vector3&
SetPowerRequest::_Internal::angular(const SetPowerRequest* msg) {
  return *msg->_impl_.angular_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
SetPowerRequest::_Internal::extra(const SetPowerRequest* msg) {
  return *msg->_impl_.extra_;
}
void SetPowerRequest::clear_linear() {
  if (GetArenaForAllocation() == nullptr && _impl_.linear_ != nullptr) {
    delete _impl_.linear_;
  }
  _impl_.linear_ = nullptr;
}
void SetPowerRequest::clear_angular() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_ != nullptr) {
    delete _impl_.angular_;
  }
  _impl_.angular_ = nullptr;
}
void SetPowerRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
SetPowerRequest::SetPowerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.SetPowerRequest)
}
SetPowerRequest::SetPowerRequest(const SetPowerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetPowerRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.linear_){nullptr}
    , decltype(_impl_.angular_){nullptr}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_linear()) {
    _this->_impl_.linear_ = new ::viam::common::v1::Vector3(*from._impl_.linear_);
  }
  if (from._internal_has_angular()) {
    _this->_impl_.angular_ = new ::viam::common::v1::Vector3(*from._impl_.angular_);
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.SetPowerRequest)
}

inline void SetPowerRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.linear_){nullptr}
    , decltype(_impl_.angular_){nullptr}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetPowerRequest::~SetPowerRequest() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.SetPowerRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetPowerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.linear_;
  if (this != internal_default_instance()) delete _impl_.angular_;
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void SetPowerRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetPowerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.SetPowerRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.linear_ != nullptr) {
    delete _impl_.linear_;
  }
  _impl_.linear_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_ != nullptr) {
    delete _impl_.angular_;
  }
  _impl_.angular_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetPowerRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.base.v1.SetPowerRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Vector3 linear = 2 [json_name = "linear"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Vector3 angular = 3 [json_name = "angular"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetPowerRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.SetPowerRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.base.v1.SetPowerRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.Vector3 linear = 2 [json_name = "linear"];
  if (this->_internal_has_linear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::linear(this),
        _Internal::linear(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.Vector3 angular = 3 [json_name = "angular"];
  if (this->_internal_has_angular()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::angular(this),
        _Internal::angular(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.SetPowerRequest)
  return target;
}

size_t SetPowerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.SetPowerRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.Vector3 linear = 2 [json_name = "linear"];
  if (this->_internal_has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linear_);
  }

  // .viam.common.v1.Vector3 angular = 3 [json_name = "angular"];
  if (this->_internal_has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPowerRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetPowerRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPowerRequest::GetClassData() const { return &_class_data_; }


void SetPowerRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetPowerRequest*>(&to_msg);
  auto& from = static_cast<const SetPowerRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.SetPowerRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_linear()) {
    _this->_internal_mutable_linear()->::viam::common::v1::Vector3::MergeFrom(
        from._internal_linear());
  }
  if (from._internal_has_angular()) {
    _this->_internal_mutable_angular()->::viam::common::v1::Vector3::MergeFrom(
        from._internal_angular());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetPowerRequest::CopyFrom(const SetPowerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.SetPowerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetPowerRequest::IsInitialized() const {
  return true;
}

void SetPowerRequest::InternalSwap(SetPowerRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetPowerRequest, _impl_.extra_)
      + sizeof(SetPowerRequest::_impl_.extra_)
      - PROTOBUF_FIELD_OFFSET(SetPowerRequest, _impl_.linear_)>(
          reinterpret_cast<char*>(&_impl_.linear_),
          reinterpret_cast<char*>(&other->_impl_.linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetPowerRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[6]);
}

// ===================================================================

class SetPowerResponse::_Internal {
 public:
};

SetPowerResponse::SetPowerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.SetPowerResponse)
}
SetPowerResponse::SetPowerResponse(const SetPowerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetPowerResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.SetPowerResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetPowerResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetPowerResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetPowerResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[7]);
}

// ===================================================================

class SetVelocityRequest::_Internal {
 public:
  static const ::viam::common::v1::Vector3& linear(const SetVelocityRequest* msg);
  static const ::viam::common::v1::Vector3& angular(const SetVelocityRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Struct& extra(const SetVelocityRequest* msg);
};

const ::viam::common::v1::Vector3&
SetVelocityRequest::_Internal::linear(const SetVelocityRequest* msg) {
  return *msg->_impl_.linear_;
}
const ::viam::common::v1::Vector3&
SetVelocityRequest::_Internal::angular(const SetVelocityRequest* msg) {
  return *msg->_impl_.angular_;
}
const ::PROTOBUF_NAMESPACE_ID::Struct&
SetVelocityRequest::_Internal::extra(const SetVelocityRequest* msg) {
  return *msg->_impl_.extra_;
}
void SetVelocityRequest::clear_linear() {
  if (GetArenaForAllocation() == nullptr && _impl_.linear_ != nullptr) {
    delete _impl_.linear_;
  }
  _impl_.linear_ = nullptr;
}
void SetVelocityRequest::clear_angular() {
  if (GetArenaForAllocation() == nullptr && _impl_.angular_ != nullptr) {
    delete _impl_.angular_;
  }
  _impl_.angular_ = nullptr;
}
void SetVelocityRequest::clear_extra() {
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
}
SetVelocityRequest::SetVelocityRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.SetVelocityRequest)
}
SetVelocityRequest::SetVelocityRequest(const SetVelocityRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  SetVelocityRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.linear_){nullptr}
    , decltype(_impl_.angular_){nullptr}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_linear()) {
    _this->_impl_.linear_ = new ::viam::common::v1::Vector3(*from._impl_.linear_);
  }
  if (from._internal_has_angular()) {
    _this->_impl_.angular_ = new ::viam::common::v1::Vector3(*from._impl_.angular_);
  }
  if (from._internal_has_extra()) {
    _this->_impl_.extra_ = new ::PROTOBUF_NAMESPACE_ID::Struct(*from._impl_.extra_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.SetVelocityRequest)
}

inline void SetVelocityRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.linear_){nullptr}
    , decltype(_impl_.angular_){nullptr}
    , decltype(_impl_.extra_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetVelocityRequest::~SetVelocityRequest() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.SetVelocityRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void SetVelocityRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.linear_;
  if (this != internal_default_instance()) delete _impl_.angular_;
  if (this != internal_default_instance()) delete _impl_.extra_;
}

void SetVelocityRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void SetVelocityRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.SetVelocityRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.linear_ != nullptr) {
    delete _impl_.linear_;
  }
  _impl_.linear_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.angular_ != nullptr) {
    delete _impl_.angular_;
  }
  _impl_.angular_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.extra_ != nullptr) {
    delete _impl_.extra_;
  }
  _impl_.extra_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetVelocityRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.base.v1.SetVelocityRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Vector3 linear = 2 [json_name = "linear"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_linear(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.common.v1.Vector3 angular = 3 [json_name = "angular"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_angular(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Struct extra = 99 [json_name = "extra"];
      case 99:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_extra(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetVelocityRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.SetVelocityRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.base.v1.SetVelocityRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.common.v1.Vector3 linear = 2 [json_name = "linear"];
  if (this->_internal_has_linear()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::linear(this),
        _Internal::linear(this).GetCachedSize(), target, stream);
  }

  // .viam.common.v1.Vector3 angular = 3 [json_name = "angular"];
  if (this->_internal_has_angular()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::angular(this),
        _Internal::angular(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(99, _Internal::extra(this),
        _Internal::extra(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.SetVelocityRequest)
  return target;
}

size_t SetVelocityRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.SetVelocityRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.common.v1.Vector3 linear = 2 [json_name = "linear"];
  if (this->_internal_has_linear()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.linear_);
  }

  // .viam.common.v1.Vector3 angular = 3 [json_name = "angular"];
  if (this->_internal_has_angular()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.angular_);
  }

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  if (this->_internal_has_extra()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.extra_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVelocityRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    SetVelocityRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVelocityRequest::GetClassData() const { return &_class_data_; }


void SetVelocityRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<SetVelocityRequest*>(&to_msg);
  auto& from = static_cast<const SetVelocityRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.SetVelocityRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_linear()) {
    _this->_internal_mutable_linear()->::viam::common::v1::Vector3::MergeFrom(
        from._internal_linear());
  }
  if (from._internal_has_angular()) {
    _this->_internal_mutable_angular()->::viam::common::v1::Vector3::MergeFrom(
        from._internal_angular());
  }
  if (from._internal_has_extra()) {
    _this->_internal_mutable_extra()->::PROTOBUF_NAMESPACE_ID::Struct::MergeFrom(
        from._internal_extra());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetVelocityRequest::CopyFrom(const SetVelocityRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.SetVelocityRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetVelocityRequest::IsInitialized() const {
  return true;
}

void SetVelocityRequest::InternalSwap(SetVelocityRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SetVelocityRequest, _impl_.extra_)
      + sizeof(SetVelocityRequest::_impl_.extra_)
      - PROTOBUF_FIELD_OFFSET(SetVelocityRequest, _impl_.linear_)>(
          reinterpret_cast<char*>(&_impl_.linear_),
          reinterpret_cast<char*>(&other->_impl_.linear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[8]);
}

// ===================================================================

class SetVelocityResponse::_Internal {
 public:
};

SetVelocityResponse::SetVelocityResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.SetVelocityResponse)
}
SetVelocityResponse::SetVelocityResponse(const SetVelocityResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  SetVelocityResponse* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.SetVelocityResponse)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetVelocityResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetVelocityResponse::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata SetVelocityResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[9]);
}

// ===================================================================

class IsMovingRequest::_Internal {
 public:
};

IsMovingRequest::IsMovingRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.IsMovingRequest)
}
IsMovingRequest::IsMovingRequest(const IsMovingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsMovingRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.IsMovingRequest)
}

inline void IsMovingRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

IsMovingRequest::~IsMovingRequest() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.IsMovingRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsMovingRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void IsMovingRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsMovingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.IsMovingRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsMovingRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.base.v1.IsMovingRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsMovingRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.IsMovingRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.base.v1.IsMovingRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.IsMovingRequest)
  return target;
}

size_t IsMovingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.IsMovingRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsMovingRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsMovingRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsMovingRequest::GetClassData() const { return &_class_data_; }


void IsMovingRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsMovingRequest*>(&to_msg);
  auto& from = static_cast<const IsMovingRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.IsMovingRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsMovingRequest::CopyFrom(const IsMovingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.IsMovingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMovingRequest::IsInitialized() const {
  return true;
}

void IsMovingRequest::InternalSwap(IsMovingRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IsMovingRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[10]);
}

// ===================================================================

class IsMovingResponse::_Internal {
 public:
};

IsMovingResponse::IsMovingResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.base.v1.IsMovingResponse)
}
IsMovingResponse::IsMovingResponse(const IsMovingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  IsMovingResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.is_moving_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.is_moving_ = from._impl_.is_moving_;
  // @@protoc_insertion_point(copy_constructor:viam.component.base.v1.IsMovingResponse)
}

inline void IsMovingResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.is_moving_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

IsMovingResponse::~IsMovingResponse() {
  // @@protoc_insertion_point(destructor:viam.component.base.v1.IsMovingResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IsMovingResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IsMovingResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void IsMovingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.base.v1.IsMovingResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.is_moving_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IsMovingResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool is_moving = 1 [json_name = "isMoving"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.is_moving_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IsMovingResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.base.v1.IsMovingResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_moving = 1 [json_name = "isMoving"];
  if (this->_internal_is_moving() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_is_moving(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.base.v1.IsMovingResponse)
  return target;
}

size_t IsMovingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.base.v1.IsMovingResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool is_moving = 1 [json_name = "isMoving"];
  if (this->_internal_is_moving() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IsMovingResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    IsMovingResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IsMovingResponse::GetClassData() const { return &_class_data_; }


void IsMovingResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<IsMovingResponse*>(&to_msg);
  auto& from = static_cast<const IsMovingResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.base.v1.IsMovingResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_is_moving() != 0) {
    _this->_internal_set_is_moving(from._internal_is_moving());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IsMovingResponse::CopyFrom(const IsMovingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.base.v1.IsMovingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsMovingResponse::IsInitialized() const {
  return true;
}

void IsMovingResponse::InternalSwap(IsMovingResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.is_moving_, other->_impl_.is_moving_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IsMovingResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_getter, &descriptor_table_component_2fbase_2fv1_2fbase_2eproto_once,
      file_level_metadata_component_2fbase_2fv1_2fbase_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace base
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::MoveStraightRequest*
Arena::CreateMaybeMessage< ::viam::component::base::v1::MoveStraightRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::MoveStraightRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::MoveStraightResponse*
Arena::CreateMaybeMessage< ::viam::component::base::v1::MoveStraightResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::MoveStraightResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::SpinRequest*
Arena::CreateMaybeMessage< ::viam::component::base::v1::SpinRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::SpinRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::SpinResponse*
Arena::CreateMaybeMessage< ::viam::component::base::v1::SpinResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::SpinResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::StopRequest*
Arena::CreateMaybeMessage< ::viam::component::base::v1::StopRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::StopRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::StopResponse*
Arena::CreateMaybeMessage< ::viam::component::base::v1::StopResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::StopResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::SetPowerRequest*
Arena::CreateMaybeMessage< ::viam::component::base::v1::SetPowerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::SetPowerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::SetPowerResponse*
Arena::CreateMaybeMessage< ::viam::component::base::v1::SetPowerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::SetPowerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::SetVelocityRequest*
Arena::CreateMaybeMessage< ::viam::component::base::v1::SetVelocityRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::SetVelocityRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::SetVelocityResponse*
Arena::CreateMaybeMessage< ::viam::component::base::v1::SetVelocityResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::SetVelocityResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::IsMovingRequest*
Arena::CreateMaybeMessage< ::viam::component::base::v1::IsMovingRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::IsMovingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::base::v1::IsMovingResponse*
Arena::CreateMaybeMessage< ::viam::component::base::v1::IsMovingResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::base::v1::IsMovingResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
