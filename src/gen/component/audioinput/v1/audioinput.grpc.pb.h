// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/audioinput/v1/audioinput.proto
#ifndef GRPC_component_2faudioinput_2fv1_2faudioinput_2eproto__INCLUDED
#define GRPC_component_2faudioinput_2fv1_2faudioinput_2eproto__INCLUDED

#include "component/audioinput/v1/audioinput.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace component {
namespace audioinput {
namespace v1 {

// An AudioInputService services all audio inputs associated with a robot
class AudioInputService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.component.audioinput.v1.AudioInputService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Chunks returns audio chunks forever from an audio input of the underlying robot.
    std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>> Chunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>>(ChunksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>> AsyncChunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>>(AsyncChunksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>> PrepareAsyncChunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>>(PrepareAsyncChunksRaw(context, request, cq));
    }
    // Properties returns properties of an audio input of the underlying robot.
    virtual ::grpc::Status Properties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::viam::component::audioinput::v1::PropertiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::audioinput::v1::PropertiesResponse>> AsyncProperties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::audioinput::v1::PropertiesResponse>>(AsyncPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::audioinput::v1::PropertiesResponse>> PrepareAsyncProperties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::audioinput::v1::PropertiesResponse>>(PrepareAsyncPropertiesRaw(context, request, cq));
    }
    // Record records audio from an audio input of the underlying robot
    // to an HTTP response. A specific MIME type cannot be requested and may not necessarily
    // be the same one returned each time.
    virtual ::grpc::Status Record(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::google::api::HttpBody* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::HttpBody>> AsyncRecord(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::HttpBody>>(AsyncRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::HttpBody>> PrepareAsyncRecord(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::api::HttpBody>>(PrepareAsyncRecordRaw(context, request, cq));
    }
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Chunks returns audio chunks forever from an audio input of the underlying robot.
      virtual void Chunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest* request, ::grpc::ClientReadReactor< ::viam::component::audioinput::v1::ChunksResponse>* reactor) = 0;
      // Properties returns properties of an audio input of the underlying robot.
      virtual void Properties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest* request, ::viam::component::audioinput::v1::PropertiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Properties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest* request, ::viam::component::audioinput::v1::PropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Record records audio from an audio input of the underlying robot
      // to an HTTP response. A specific MIME type cannot be requested and may not necessarily
      // be the same one returned each time.
      virtual void Record(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest* request, ::google::api::HttpBody* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Record(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest* request, ::google::api::HttpBody* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DoCommand sends/receives arbitrary commands
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>* ChunksRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>* AsyncChunksRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::component::audioinput::v1::ChunksResponse>* PrepareAsyncChunksRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::audioinput::v1::PropertiesResponse>* AsyncPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::audioinput::v1::PropertiesResponse>* PrepareAsyncPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::HttpBody>* AsyncRecordRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::api::HttpBody>* PrepareAsyncRecordRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::viam::component::audioinput::v1::ChunksResponse>> Chunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::viam::component::audioinput::v1::ChunksResponse>>(ChunksRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::audioinput::v1::ChunksResponse>> AsyncChunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::audioinput::v1::ChunksResponse>>(AsyncChunksRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::audioinput::v1::ChunksResponse>> PrepareAsyncChunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::audioinput::v1::ChunksResponse>>(PrepareAsyncChunksRaw(context, request, cq));
    }
    ::grpc::Status Properties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::viam::component::audioinput::v1::PropertiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::audioinput::v1::PropertiesResponse>> AsyncProperties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::audioinput::v1::PropertiesResponse>>(AsyncPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::audioinput::v1::PropertiesResponse>> PrepareAsyncProperties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::audioinput::v1::PropertiesResponse>>(PrepareAsyncPropertiesRaw(context, request, cq));
    }
    ::grpc::Status Record(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::google::api::HttpBody* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::HttpBody>> AsyncRecord(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::HttpBody>>(AsyncRecordRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::HttpBody>> PrepareAsyncRecord(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::api::HttpBody>>(PrepareAsyncRecordRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Chunks(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest* request, ::grpc::ClientReadReactor< ::viam::component::audioinput::v1::ChunksResponse>* reactor) override;
      void Properties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest* request, ::viam::component::audioinput::v1::PropertiesResponse* response, std::function<void(::grpc::Status)>) override;
      void Properties(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest* request, ::viam::component::audioinput::v1::PropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Record(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest* request, ::google::api::HttpBody* response, std::function<void(::grpc::Status)>) override;
      void Record(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest* request, ::google::api::HttpBody* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::viam::component::audioinput::v1::ChunksResponse>* ChunksRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request) override;
    ::grpc::ClientAsyncReader< ::viam::component::audioinput::v1::ChunksResponse>* AsyncChunksRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::viam::component::audioinput::v1::ChunksResponse>* PrepareAsyncChunksRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::ChunksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::audioinput::v1::PropertiesResponse>* AsyncPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::audioinput::v1::PropertiesResponse>* PrepareAsyncPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::PropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::HttpBody>* AsyncRecordRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::api::HttpBody>* PrepareAsyncRecordRaw(::grpc::ClientContext* context, const ::viam::component::audioinput::v1::RecordRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Chunks_;
    const ::grpc::internal::RpcMethod rpcmethod_Properties_;
    const ::grpc::internal::RpcMethod rpcmethod_Record_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Chunks returns audio chunks forever from an audio input of the underlying robot.
    virtual ::grpc::Status Chunks(::grpc::ServerContext* context, const ::viam::component::audioinput::v1::ChunksRequest* request, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* writer);
    // Properties returns properties of an audio input of the underlying robot.
    virtual ::grpc::Status Properties(::grpc::ServerContext* context, const ::viam::component::audioinput::v1::PropertiesRequest* request, ::viam::component::audioinput::v1::PropertiesResponse* response);
    // Record records audio from an audio input of the underlying robot
    // to an HTTP response. A specific MIME type cannot be requested and may not necessarily
    // be the same one returned each time.
    virtual ::grpc::Status Record(::grpc::ServerContext* context, const ::viam::component::audioinput::v1::RecordRequest* request, ::google::api::HttpBody* response);
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Chunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Chunks() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Chunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunks(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChunks(::grpc::ServerContext* context, ::viam::component::audioinput::v1::ChunksRequest* request, ::grpc::ServerAsyncWriter< ::viam::component::audioinput::v1::ChunksResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Properties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Properties() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Properties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Properties(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProperties(::grpc::ServerContext* context, ::viam::component::audioinput::v1::PropertiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::audioinput::v1::PropertiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Record() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecord(::grpc::ServerContext* context, ::viam::component::audioinput::v1::RecordRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::api::HttpBody>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Chunks<WithAsyncMethod_Properties<WithAsyncMethod_Record<WithAsyncMethod_DoCommand<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Chunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Chunks() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::viam::component::audioinput::v1::ChunksRequest, ::viam::component::audioinput::v1::ChunksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::audioinput::v1::ChunksRequest* request) { return this->Chunks(context, request); }));
    }
    ~WithCallbackMethod_Chunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunks(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::viam::component::audioinput::v1::ChunksResponse>* Chunks(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Properties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Properties() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::audioinput::v1::PropertiesRequest, ::viam::component::audioinput::v1::PropertiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::audioinput::v1::PropertiesRequest* request, ::viam::component::audioinput::v1::PropertiesResponse* response) { return this->Properties(context, request, response); }));}
    void SetMessageAllocatorFor_Properties(
        ::grpc::MessageAllocator< ::viam::component::audioinput::v1::PropertiesRequest, ::viam::component::audioinput::v1::PropertiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::audioinput::v1::PropertiesRequest, ::viam::component::audioinput::v1::PropertiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Properties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Properties(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Properties(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Record() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::audioinput::v1::RecordRequest, ::google::api::HttpBody>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::audioinput::v1::RecordRequest* request, ::google::api::HttpBody* response) { return this->Record(context, request, response); }));}
    void SetMessageAllocatorFor_Record(
        ::grpc::MessageAllocator< ::viam::component::audioinput::v1::RecordRequest, ::google::api::HttpBody>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::audioinput::v1::RecordRequest, ::google::api::HttpBody>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Record(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Chunks<WithCallbackMethod_Properties<WithCallbackMethod_Record<WithCallbackMethod_DoCommand<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Chunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Chunks() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Chunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunks(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Properties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Properties() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Properties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Properties(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Record() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Chunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Chunks() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Chunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunks(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestChunks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Properties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Properties() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Properties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Properties(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Record() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRecord(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Chunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Chunks() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Chunks(context, request); }));
    }
    ~WithRawCallbackMethod_Chunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Chunks(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Chunks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Properties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Properties() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Properties(context, request, response); }));
    }
    ~WithRawCallbackMethod_Properties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Properties(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Properties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Record() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Record(context, request, response); }));
    }
    ~WithRawCallbackMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Record(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Record(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Properties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Properties() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::audioinput::v1::PropertiesRequest, ::viam::component::audioinput::v1::PropertiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::audioinput::v1::PropertiesRequest, ::viam::component::audioinput::v1::PropertiesResponse>* streamer) {
                       return this->StreamedProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Properties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Properties(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::PropertiesRequest* /*request*/, ::viam::component::audioinput::v1::PropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::audioinput::v1::PropertiesRequest,::viam::component::audioinput::v1::PropertiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Record : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Record() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::audioinput::v1::RecordRequest, ::google::api::HttpBody>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::audioinput::v1::RecordRequest, ::google::api::HttpBody>* streamer) {
                       return this->StreamedRecord(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Record() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Record(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::RecordRequest* /*request*/, ::google::api::HttpBody* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRecord(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::audioinput::v1::RecordRequest,::google::api::HttpBody>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Properties<WithStreamedUnaryMethod_Record<WithStreamedUnaryMethod_DoCommand<Service > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Chunks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Chunks() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::viam::component::audioinput::v1::ChunksRequest, ::viam::component::audioinput::v1::ChunksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::viam::component::audioinput::v1::ChunksRequest, ::viam::component::audioinput::v1::ChunksResponse>* streamer) {
                       return this->StreamedChunks(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Chunks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Chunks(::grpc::ServerContext* /*context*/, const ::viam::component::audioinput::v1::ChunksRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::audioinput::v1::ChunksResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedChunks(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::viam::component::audioinput::v1::ChunksRequest,::viam::component::audioinput::v1::ChunksResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Chunks<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Chunks<WithStreamedUnaryMethod_Properties<WithStreamedUnaryMethod_Record<WithStreamedUnaryMethod_DoCommand<Service > > > > StreamedService;
};

}  // namespace v1
}  // namespace audioinput
}  // namespace component
}  // namespace viam


#endif  // GRPC_component_2faudioinput_2fv1_2faudioinput_2eproto__INCLUDED
