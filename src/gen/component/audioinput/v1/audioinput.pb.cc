// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/audioinput/v1/audioinput.proto

#include "component/audioinput/v1/audioinput.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace component {
namespace audioinput {
namespace v1 {
PROTOBUF_CONSTEXPR RecordRequest::RecordRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.duration_)*/nullptr
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct RecordRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RecordRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RecordRequestDefaultTypeInternal() {}
  union {
    RecordRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RecordRequestDefaultTypeInternal _RecordRequest_default_instance_;
PROTOBUF_CONSTEXPR AudioChunkInfo::AudioChunkInfo(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.sample_format_)*/0
  , /*decltype(_impl_.channels_)*/0u
  , /*decltype(_impl_.sampling_rate_)*/int64_t{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioChunkInfoDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkInfoDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkInfoDefaultTypeInternal() {}
  union {
    AudioChunkInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkInfoDefaultTypeInternal _AudioChunkInfo_default_instance_;
PROTOBUF_CONSTEXPR AudioChunk::AudioChunk(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.data_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.length_)*/0u
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct AudioChunkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AudioChunkDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~AudioChunkDefaultTypeInternal() {}
  union {
    AudioChunk _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
PROTOBUF_CONSTEXPR ChunksRequest::ChunksRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.sample_format_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct ChunksRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunksRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunksRequestDefaultTypeInternal() {}
  union {
    ChunksRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunksRequestDefaultTypeInternal _ChunksRequest_default_instance_;
PROTOBUF_CONSTEXPR ChunksResponse::ChunksResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.type_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct ChunksResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ChunksResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~ChunksResponseDefaultTypeInternal() {}
  union {
    ChunksResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ChunksResponseDefaultTypeInternal _ChunksResponse_default_instance_;
PROTOBUF_CONSTEXPR PropertiesRequest::PropertiesRequest(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.name_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertiesRequestDefaultTypeInternal() {}
  union {
    PropertiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertiesRequestDefaultTypeInternal _PropertiesRequest_default_instance_;
PROTOBUF_CONSTEXPR PropertiesResponse::PropertiesResponse(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.latency_)*/nullptr
  , /*decltype(_impl_.channel_count_)*/0u
  , /*decltype(_impl_.sample_rate_)*/0u
  , /*decltype(_impl_.sample_size_)*/0u
  , /*decltype(_impl_.is_big_endian_)*/false
  , /*decltype(_impl_.is_float_)*/false
  , /*decltype(_impl_.is_interleaved_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct PropertiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertiesResponseDefaultTypeInternal() {}
  union {
    PropertiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertiesResponseDefaultTypeInternal _PropertiesResponse_default_instance_;
}  // namespace v1
}  // namespace audioinput
}  // namespace component
}  // namespace viam
static ::_pb::Metadata file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_component_2faudioinput_2fv1_2faudioinput_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_component_2faudioinput_2fv1_2faudioinput_2eproto = nullptr;

const uint32_t TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::RecordRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::RecordRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::RecordRequest, _impl_.duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunkInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunkInfo, _impl_.sample_format_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunkInfo, _impl_.channels_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunkInfo, _impl_.sampling_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunk, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunk, _impl_.data_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::AudioChunk, _impl_.length_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::ChunksRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::ChunksRequest, _impl_.name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::ChunksRequest, _impl_.sample_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::ChunksResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::ChunksResponse, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::ChunksResponse, _impl_.type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesRequest, _impl_.name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.channel_count_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.latency_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.sample_rate_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.sample_size_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.is_big_endian_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.is_float_),
  PROTOBUF_FIELD_OFFSET(::viam::component::audioinput::v1::PropertiesResponse, _impl_.is_interleaved_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::component::audioinput::v1::RecordRequest)},
  { 8, -1, -1, sizeof(::viam::component::audioinput::v1::AudioChunkInfo)},
  { 17, -1, -1, sizeof(::viam::component::audioinput::v1::AudioChunk)},
  { 25, -1, -1, sizeof(::viam::component::audioinput::v1::ChunksRequest)},
  { 33, -1, -1, sizeof(::viam::component::audioinput::v1::ChunksResponse)},
  { 42, -1, -1, sizeof(::viam::component::audioinput::v1::PropertiesRequest)},
  { 49, -1, -1, sizeof(::viam::component::audioinput::v1::PropertiesResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::component::audioinput::v1::_RecordRequest_default_instance_._instance,
  &::viam::component::audioinput::v1::_AudioChunkInfo_default_instance_._instance,
  &::viam::component::audioinput::v1::_AudioChunk_default_instance_._instance,
  &::viam::component::audioinput::v1::_ChunksRequest_default_instance_._instance,
  &::viam::component::audioinput::v1::_ChunksResponse_default_instance_._instance,
  &::viam::component::audioinput::v1::_PropertiesRequest_default_instance_._instance,
  &::viam::component::audioinput::v1::_PropertiesResponse_default_instance_._instance,
};

const char descriptor_table_protodef_component_2faudioinput_2fv1_2faudioinput_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(component/audioinput/v1/audioinput.pro"
  "to\022\034viam.component.audioinput.v1\032\034google"
  "/api/annotations.proto\032\031google/api/httpb"
  "ody.proto\032\036google/protobuf/duration.prot"
  "o\"Z\n\rRecordRequest\022\022\n\004name\030\001 \001(\tR\004name\0225"
  "\n\010duration\030\002 \001(\0132\031.google.protobuf.Durat"
  "ionR\010duration\"\242\001\n\016AudioChunkInfo\022O\n\rsamp"
  "le_format\030\001 \001(\0162*.viam.component.audioin"
  "put.v1.SampleFormatR\014sampleFormat\022\032\n\010cha"
  "nnels\030\002 \001(\rR\010channels\022#\n\rsampling_rate\030\003"
  " \001(\003R\014samplingRate\"8\n\nAudioChunk\022\022\n\004data"
  "\030\001 \001(\014R\004data\022\026\n\006length\030\002 \001(\rR\006length\"t\n\r"
  "ChunksRequest\022\022\n\004name\030\001 \001(\tR\004name\022O\n\rsam"
  "ple_format\030\002 \001(\0162*.viam.component.audioi"
  "nput.v1.SampleFormatR\014sampleFormat\"\236\001\n\016C"
  "hunksResponse\022B\n\004info\030\001 \001(\0132,.viam.compo"
  "nent.audioinput.v1.AudioChunkInfoH\000R\004inf"
  "o\022@\n\005chunk\030\002 \001(\0132(.viam.component.audioi"
  "nput.v1.AudioChunkH\000R\005chunkB\006\n\004type\"\'\n\021P"
  "ropertiesRequest\022\022\n\004name\030\001 \001(\tR\004name\"\226\002\n"
  "\022PropertiesResponse\022#\n\rchannel_count\030\001 \001"
  "(\rR\014channelCount\0223\n\007latency\030\002 \001(\0132\031.goog"
  "le.protobuf.DurationR\007latency\022\037\n\013sample_"
  "rate\030\003 \001(\rR\nsampleRate\022\037\n\013sample_size\030\004 "
  "\001(\rR\nsampleSize\022\"\n\ris_big_endian\030\005 \001(\010R\013"
  "isBigEndian\022\031\n\010is_float\030\006 \001(\010R\007isFloat\022%"
  "\n\016is_interleaved\030\007 \001(\010R\risInterleaved*y\n"
  "\014SampleFormat\022\035\n\031SAMPLE_FORMAT_UNSPECIFI"
  "ED\020\000\022#\n\037SAMPLE_FORMAT_INT16_INTERLEAVED\020"
  "\001\022%\n!SAMPLE_FORMAT_FLOAT32_INTERLEAVED\020\002"
  "2\260\003\n\021AudioInputService\022e\n\006Chunks\022+.viam."
  "component.audioinput.v1.ChunksRequest\032,."
  "viam.component.audioinput.v1.ChunksRespo"
  "nse0\001\022\254\001\n\nProperties\022/.viam.component.au"
  "dioinput.v1.PropertiesRequest\0320.viam.com"
  "ponent.audioinput.v1.PropertiesResponse\""
  ";\202\323\344\223\0025\0223/viam/api/v1/component/audioinp"
  "ut/{name}/properties\022\204\001\n\006Record\022+.viam.c"
  "omponent.audioinput.v1.RecordRequest\032\024.g"
  "oogle.api.HttpBody\"7\202\323\344\223\0021\022//viam/api/v1"
  "/component/audioinput/{name}/recordBK\n c"
  "om.viam.component.audioinput.v1Z\'go.viam"
  ".com/api/component/audioinput/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_deps[3] = {
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fhttpbody_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::_pbi::once_flag descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto = {
    false, false, 1720, descriptor_table_protodef_component_2faudioinput_2fv1_2faudioinput_2eproto,
    "component/audioinput/v1/audioinput.proto",
    &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once, descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_deps, 3, 7,
    schemas, file_default_instances, TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto::offsets,
    file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto, file_level_enum_descriptors_component_2faudioinput_2fv1_2faudioinput_2eproto,
    file_level_service_descriptors_component_2faudioinput_2fv1_2faudioinput_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter() {
  return &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_component_2faudioinput_2fv1_2faudioinput_2eproto(&descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto);
namespace viam {
namespace component {
namespace audioinput {
namespace v1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SampleFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto);
  return file_level_enum_descriptors_component_2faudioinput_2fv1_2faudioinput_2eproto[0];
}
bool SampleFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class RecordRequest::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const RecordRequest* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
RecordRequest::_Internal::duration(const RecordRequest* msg) {
  return *msg->_impl_.duration_;
}
void RecordRequest::clear_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
}
RecordRequest::RecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.RecordRequest)
}
RecordRequest::RecordRequest(const RecordRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  RecordRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_duration()) {
    _this->_impl_.duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.duration_);
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.RecordRequest)
}

inline void RecordRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.duration_){nullptr}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RecordRequest::~RecordRequest() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.RecordRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RecordRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
  if (this != internal_default_instance()) delete _impl_.duration_;
}

void RecordRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void RecordRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.RecordRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.duration_ != nullptr) {
    delete _impl_.duration_;
  }
  _impl_.duration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioinput.v1.RecordRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 2 [json_name = "duration"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RecordRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.RecordRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioinput.v1.RecordRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .google.protobuf.Duration duration = 2 [json_name = "duration"];
  if (this->_internal_has_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::duration(this),
        _Internal::duration(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.RecordRequest)
  return target;
}

size_t RecordRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.RecordRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .google.protobuf.Duration duration = 2 [json_name = "duration"];
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.duration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RecordRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    RecordRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RecordRequest::GetClassData() const { return &_class_data_; }


void RecordRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<RecordRequest*>(&to_msg);
  auto& from = static_cast<const RecordRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.RecordRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_has_duration()) {
    _this->_internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_duration());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RecordRequest::CopyFrom(const RecordRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.RecordRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordRequest::IsInitialized() const {
  return true;
}

void RecordRequest::InternalSwap(RecordRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.duration_, other->_impl_.duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[0]);
}

// ===================================================================

class AudioChunkInfo::_Internal {
 public:
};

AudioChunkInfo::AudioChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.AudioChunkInfo)
}
AudioChunkInfo::AudioChunkInfo(const AudioChunkInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioChunkInfo* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_format_){}
    , decltype(_impl_.channels_){}
    , decltype(_impl_.sampling_rate_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.sample_format_, &from._impl_.sample_format_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.sampling_rate_) -
    reinterpret_cast<char*>(&_impl_.sample_format_)) + sizeof(_impl_.sampling_rate_));
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.AudioChunkInfo)
}

inline void AudioChunkInfo::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.sample_format_){0}
    , decltype(_impl_.channels_){0u}
    , decltype(_impl_.sampling_rate_){int64_t{0}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

AudioChunkInfo::~AudioChunkInfo() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.AudioChunkInfo)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunkInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AudioChunkInfo::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioChunkInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.AudioChunkInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&_impl_.sample_format_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.sampling_rate_) -
      reinterpret_cast<char*>(&_impl_.sample_format_)) + sizeof(_impl_.sampling_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunkInfo::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.component.audioinput.v1.SampleFormat sample_format = 1 [json_name = "sampleFormat"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sample_format(static_cast<::viam::component::audioinput::v1::SampleFormat>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 channels = 2 [json_name = "channels"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.channels_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 sampling_rate = 3 [json_name = "samplingRate"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sampling_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioChunkInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.AudioChunkInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.component.audioinput.v1.SampleFormat sample_format = 1 [json_name = "sampleFormat"];
  if (this->_internal_sample_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_sample_format(), target);
  }

  // uint32 channels = 2 [json_name = "channels"];
  if (this->_internal_channels() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_channels(), target);
  }

  // int64 sampling_rate = 3 [json_name = "samplingRate"];
  if (this->_internal_sampling_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt64ToArray(3, this->_internal_sampling_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.AudioChunkInfo)
  return target;
}

size_t AudioChunkInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.AudioChunkInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.component.audioinput.v1.SampleFormat sample_format = 1 [json_name = "sampleFormat"];
  if (this->_internal_sample_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sample_format());
  }

  // uint32 channels = 2 [json_name = "channels"];
  if (this->_internal_channels() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channels());
  }

  // int64 sampling_rate = 3 [json_name = "samplingRate"];
  if (this->_internal_sampling_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(this->_internal_sampling_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunkInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioChunkInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunkInfo::GetClassData() const { return &_class_data_; }


void AudioChunkInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioChunkInfo*>(&to_msg);
  auto& from = static_cast<const AudioChunkInfo&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.AudioChunkInfo)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sample_format() != 0) {
    _this->_internal_set_sample_format(from._internal_sample_format());
  }
  if (from._internal_channels() != 0) {
    _this->_internal_set_channels(from._internal_channels());
  }
  if (from._internal_sampling_rate() != 0) {
    _this->_internal_set_sampling_rate(from._internal_sampling_rate());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunkInfo::CopyFrom(const AudioChunkInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.AudioChunkInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunkInfo::IsInitialized() const {
  return true;
}

void AudioChunkInfo::InternalSwap(AudioChunkInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AudioChunkInfo, _impl_.sampling_rate_)
      + sizeof(AudioChunkInfo::_impl_.sampling_rate_)
      - PROTOBUF_FIELD_OFFSET(AudioChunkInfo, _impl_.sample_format_)>(
          reinterpret_cast<char*>(&_impl_.sample_format_),
          reinterpret_cast<char*>(&other->_impl_.sample_format_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunkInfo::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[1]);
}

// ===================================================================

class AudioChunk::_Internal {
 public:
};

AudioChunk::AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.AudioChunk)
}
AudioChunk::AudioChunk(const AudioChunk& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  AudioChunk* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.length_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_data().empty()) {
    _this->_impl_.data_.Set(from._internal_data(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.length_ = from._impl_.length_;
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.AudioChunk)
}

inline void AudioChunk::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.data_){}
    , decltype(_impl_.length_){0u}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.data_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.data_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

AudioChunk::~AudioChunk() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.AudioChunk)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void AudioChunk::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.data_.Destroy();
}

void AudioChunk::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void AudioChunk::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.AudioChunk)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.data_.ClearToEmpty();
  _impl_.length_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AudioChunk::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes data = 1 [json_name = "data"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_data();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 length = 2 [json_name = "length"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AudioChunk::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.AudioChunk)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_data(), target);
  }

  // uint32 length = 2 [json_name = "length"];
  if (this->_internal_length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.AudioChunk)
  return target;
}

size_t AudioChunk::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.AudioChunk)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 1 [json_name = "data"];
  if (!this->_internal_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 length = 2 [json_name = "length"];
  if (this->_internal_length() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_length());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AudioChunk::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    AudioChunk::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AudioChunk::GetClassData() const { return &_class_data_; }


void AudioChunk::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<AudioChunk*>(&to_msg);
  auto& from = static_cast<const AudioChunk&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.AudioChunk)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_data().empty()) {
    _this->_internal_set_data(from._internal_data());
  }
  if (from._internal_length() != 0) {
    _this->_internal_set_length(from._internal_length());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AudioChunk::CopyFrom(const AudioChunk& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.AudioChunk)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioChunk::IsInitialized() const {
  return true;
}

void AudioChunk::InternalSwap(AudioChunk* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.data_, lhs_arena,
      &other->_impl_.data_, rhs_arena
  );
  swap(_impl_.length_, other->_impl_.length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AudioChunk::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[2]);
}

// ===================================================================

class ChunksRequest::_Internal {
 public:
};

ChunksRequest::ChunksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.ChunksRequest)
}
ChunksRequest::ChunksRequest(const ChunksRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChunksRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sample_format_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.sample_format_ = from._impl_.sample_format_;
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.ChunksRequest)
}

inline void ChunksRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , decltype(_impl_.sample_format_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ChunksRequest::~ChunksRequest() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.ChunksRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunksRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void ChunksRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunksRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.ChunksRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _impl_.sample_format_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunksRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioinput.v1.ChunksRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // .viam.component.audioinput.v1.SampleFormat sample_format = 2 [json_name = "sampleFormat"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_sample_format(static_cast<::viam::component::audioinput::v1::SampleFormat>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChunksRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.ChunksRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioinput.v1.ChunksRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // .viam.component.audioinput.v1.SampleFormat sample_format = 2 [json_name = "sampleFormat"];
  if (this->_internal_sample_format() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_sample_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.ChunksRequest)
  return target;
}

size_t ChunksRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.ChunksRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .viam.component.audioinput.v1.SampleFormat sample_format = 2 [json_name = "sampleFormat"];
  if (this->_internal_sample_format() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_sample_format());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunksRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunksRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunksRequest::GetClassData() const { return &_class_data_; }


void ChunksRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunksRequest*>(&to_msg);
  auto& from = static_cast<const ChunksRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.ChunksRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_sample_format() != 0) {
    _this->_internal_set_sample_format(from._internal_sample_format());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunksRequest::CopyFrom(const ChunksRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.ChunksRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunksRequest::IsInitialized() const {
  return true;
}

void ChunksRequest::InternalSwap(ChunksRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
  swap(_impl_.sample_format_, other->_impl_.sample_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunksRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[3]);
}

// ===================================================================

class ChunksResponse::_Internal {
 public:
  static const ::viam::component::audioinput::v1::AudioChunkInfo& info(const ChunksResponse* msg);
  static const ::viam::component::audioinput::v1::AudioChunk& chunk(const ChunksResponse* msg);
};

const ::viam::component::audioinput::v1::AudioChunkInfo&
ChunksResponse::_Internal::info(const ChunksResponse* msg) {
  return *msg->_impl_.type_.info_;
}
const ::viam::component::audioinput::v1::AudioChunk&
ChunksResponse::_Internal::chunk(const ChunksResponse* msg) {
  return *msg->_impl_.type_.chunk_;
}
void ChunksResponse::set_allocated_info(::viam::component::audioinput::v1::AudioChunkInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    set_has_info();
    _impl_.type_.info_ = info;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.ChunksResponse.info)
}
void ChunksResponse::set_allocated_chunk(::viam::component::audioinput::v1::AudioChunk* chunk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_type();
  if (chunk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(chunk);
    if (message_arena != submessage_arena) {
      chunk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chunk, submessage_arena);
    }
    set_has_chunk();
    _impl_.type_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.ChunksResponse.chunk)
}
ChunksResponse::ChunksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.ChunksResponse)
}
ChunksResponse::ChunksResponse(const ChunksResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  ChunksResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kInfo: {
      _this->_internal_mutable_info()->::viam::component::audioinput::v1::AudioChunkInfo::MergeFrom(
          from._internal_info());
      break;
    }
    case kChunk: {
      _this->_internal_mutable_chunk()->::viam::component::audioinput::v1::AudioChunk::MergeFrom(
          from._internal_chunk());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.ChunksResponse)
}

inline void ChunksResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.type_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  clear_has_type();
}

ChunksResponse::~ChunksResponse() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.ChunksResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void ChunksResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_type()) {
    clear_type();
  }
}

void ChunksResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void ChunksResponse::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:viam.component.audioinput.v1.ChunksResponse)
  switch (type_case()) {
    case kInfo: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.info_;
      }
      break;
    }
    case kChunk: {
      if (GetArenaForAllocation() == nullptr) {
        delete _impl_.type_.chunk_;
      }
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = TYPE_NOT_SET;
}


void ChunksResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.ChunksResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChunksResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .viam.component.audioinput.v1.AudioChunkInfo info = 1 [json_name = "info"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_info(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.component.audioinput.v1.AudioChunk chunk = 2 [json_name = "chunk"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_chunk(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChunksResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.ChunksResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .viam.component.audioinput.v1.AudioChunkInfo info = 1 [json_name = "info"];
  if (_internal_has_info()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::info(this),
        _Internal::info(this).GetCachedSize(), target, stream);
  }

  // .viam.component.audioinput.v1.AudioChunk chunk = 2 [json_name = "chunk"];
  if (_internal_has_chunk()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::chunk(this),
        _Internal::chunk(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.ChunksResponse)
  return target;
}

size_t ChunksResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.ChunksResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .viam.component.audioinput.v1.AudioChunkInfo info = 1 [json_name = "info"];
    case kInfo: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.info_);
      break;
    }
    // .viam.component.audioinput.v1.AudioChunk chunk = 2 [json_name = "chunk"];
    case kChunk: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.type_.chunk_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChunksResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    ChunksResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChunksResponse::GetClassData() const { return &_class_data_; }


void ChunksResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<ChunksResponse*>(&to_msg);
  auto& from = static_cast<const ChunksResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.ChunksResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kInfo: {
      _this->_internal_mutable_info()->::viam::component::audioinput::v1::AudioChunkInfo::MergeFrom(
          from._internal_info());
      break;
    }
    case kChunk: {
      _this->_internal_mutable_chunk()->::viam::component::audioinput::v1::AudioChunk::MergeFrom(
          from._internal_chunk());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChunksResponse::CopyFrom(const ChunksResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.ChunksResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChunksResponse::IsInitialized() const {
  return true;
}

void ChunksResponse::InternalSwap(ChunksResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.type_, other->_impl_.type_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChunksResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[4]);
}

// ===================================================================

class PropertiesRequest::_Internal {
 public:
};

PropertiesRequest::PropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.PropertiesRequest)
}
PropertiesRequest::PropertiesRequest(const PropertiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertiesRequest* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    _this->_impl_.name_.Set(from._internal_name(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.PropertiesRequest)
}

inline void PropertiesRequest::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.name_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PropertiesRequest::~PropertiesRequest() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.PropertiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.name_.Destroy();
}

void PropertiesRequest::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.PropertiesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.audioinput.v1.PropertiesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertiesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.PropertiesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.audioinput.v1.PropertiesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.PropertiesRequest)
  return target;
}

size_t PropertiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.PropertiesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertiesRequest::GetClassData() const { return &_class_data_; }


void PropertiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertiesRequest*>(&to_msg);
  auto& from = static_cast<const PropertiesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.PropertiesRequest)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertiesRequest::CopyFrom(const PropertiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.PropertiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertiesRequest::IsInitialized() const {
  return true;
}

void PropertiesRequest::InternalSwap(PropertiesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.name_, lhs_arena,
      &other->_impl_.name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[5]);
}

// ===================================================================

class PropertiesResponse::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& latency(const PropertiesResponse* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
PropertiesResponse::_Internal::latency(const PropertiesResponse* msg) {
  return *msg->_impl_.latency_;
}
void PropertiesResponse::clear_latency() {
  if (GetArenaForAllocation() == nullptr && _impl_.latency_ != nullptr) {
    delete _impl_.latency_;
  }
  _impl_.latency_ = nullptr;
}
PropertiesResponse::PropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:viam.component.audioinput.v1.PropertiesResponse)
}
PropertiesResponse::PropertiesResponse(const PropertiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  PropertiesResponse* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.latency_){nullptr}
    , decltype(_impl_.channel_count_){}
    , decltype(_impl_.sample_rate_){}
    , decltype(_impl_.sample_size_){}
    , decltype(_impl_.is_big_endian_){}
    , decltype(_impl_.is_float_){}
    , decltype(_impl_.is_interleaved_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_latency()) {
    _this->_impl_.latency_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.latency_);
  }
  ::memcpy(&_impl_.channel_count_, &from._impl_.channel_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.is_interleaved_) -
    reinterpret_cast<char*>(&_impl_.channel_count_)) + sizeof(_impl_.is_interleaved_));
  // @@protoc_insertion_point(copy_constructor:viam.component.audioinput.v1.PropertiesResponse)
}

inline void PropertiesResponse::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.latency_){nullptr}
    , decltype(_impl_.channel_count_){0u}
    , decltype(_impl_.sample_rate_){0u}
    , decltype(_impl_.sample_size_){0u}
    , decltype(_impl_.is_big_endian_){false}
    , decltype(_impl_.is_float_){false}
    , decltype(_impl_.is_interleaved_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

PropertiesResponse::~PropertiesResponse() {
  // @@protoc_insertion_point(destructor:viam.component.audioinput.v1.PropertiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void PropertiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.latency_;
}

void PropertiesResponse::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void PropertiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.audioinput.v1.PropertiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && _impl_.latency_ != nullptr) {
    delete _impl_.latency_;
  }
  _impl_.latency_ = nullptr;
  ::memset(&_impl_.channel_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.is_interleaved_) -
      reinterpret_cast<char*>(&_impl_.channel_count_)) + sizeof(_impl_.is_interleaved_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 channel_count = 1 [json_name = "channelCount"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.channel_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration latency = 2 [json_name = "latency"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_latency(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_rate = 3 [json_name = "sampleRate"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _impl_.sample_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 sample_size = 4 [json_name = "sampleSize"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.sample_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_big_endian = 5 [json_name = "isBigEndian"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _impl_.is_big_endian_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_float = 6 [json_name = "isFloat"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          _impl_.is_float_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_interleaved = 7 [json_name = "isInterleaved"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          _impl_.is_interleaved_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PropertiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.audioinput.v1.PropertiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 channel_count = 1 [json_name = "channelCount"];
  if (this->_internal_channel_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_channel_count(), target);
  }

  // .google.protobuf.Duration latency = 2 [json_name = "latency"];
  if (this->_internal_has_latency()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::latency(this),
        _Internal::latency(this).GetCachedSize(), target, stream);
  }

  // uint32 sample_rate = 3 [json_name = "sampleRate"];
  if (this->_internal_sample_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_sample_rate(), target);
  }

  // uint32 sample_size = 4 [json_name = "sampleSize"];
  if (this->_internal_sample_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sample_size(), target);
  }

  // bool is_big_endian = 5 [json_name = "isBigEndian"];
  if (this->_internal_is_big_endian() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(5, this->_internal_is_big_endian(), target);
  }

  // bool is_float = 6 [json_name = "isFloat"];
  if (this->_internal_is_float() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(6, this->_internal_is_float(), target);
  }

  // bool is_interleaved = 7 [json_name = "isInterleaved"];
  if (this->_internal_is_interleaved() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(7, this->_internal_is_interleaved(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.audioinput.v1.PropertiesResponse)
  return target;
}

size_t PropertiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.audioinput.v1.PropertiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Duration latency = 2 [json_name = "latency"];
  if (this->_internal_has_latency()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.latency_);
  }

  // uint32 channel_count = 1 [json_name = "channelCount"];
  if (this->_internal_channel_count() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_channel_count());
  }

  // uint32 sample_rate = 3 [json_name = "sampleRate"];
  if (this->_internal_sample_rate() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_rate());
  }

  // uint32 sample_size = 4 [json_name = "sampleSize"];
  if (this->_internal_sample_size() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_sample_size());
  }

  // bool is_big_endian = 5 [json_name = "isBigEndian"];
  if (this->_internal_is_big_endian() != 0) {
    total_size += 1 + 1;
  }

  // bool is_float = 6 [json_name = "isFloat"];
  if (this->_internal_is_float() != 0) {
    total_size += 1 + 1;
  }

  // bool is_interleaved = 7 [json_name = "isInterleaved"];
  if (this->_internal_is_interleaved() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PropertiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    PropertiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PropertiesResponse::GetClassData() const { return &_class_data_; }


void PropertiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<PropertiesResponse*>(&to_msg);
  auto& from = static_cast<const PropertiesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:viam.component.audioinput.v1.PropertiesResponse)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_latency()) {
    _this->_internal_mutable_latency()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_latency());
  }
  if (from._internal_channel_count() != 0) {
    _this->_internal_set_channel_count(from._internal_channel_count());
  }
  if (from._internal_sample_rate() != 0) {
    _this->_internal_set_sample_rate(from._internal_sample_rate());
  }
  if (from._internal_sample_size() != 0) {
    _this->_internal_set_sample_size(from._internal_sample_size());
  }
  if (from._internal_is_big_endian() != 0) {
    _this->_internal_set_is_big_endian(from._internal_is_big_endian());
  }
  if (from._internal_is_float() != 0) {
    _this->_internal_set_is_float(from._internal_is_float());
  }
  if (from._internal_is_interleaved() != 0) {
    _this->_internal_set_is_interleaved(from._internal_is_interleaved());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PropertiesResponse::CopyFrom(const PropertiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.audioinput.v1.PropertiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertiesResponse::IsInitialized() const {
  return true;
}

void PropertiesResponse::InternalSwap(PropertiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PropertiesResponse, _impl_.is_interleaved_)
      + sizeof(PropertiesResponse::_impl_.is_interleaved_)
      - PROTOBUF_FIELD_OFFSET(PropertiesResponse, _impl_.latency_)>(
          reinterpret_cast<char*>(&_impl_.latency_),
          reinterpret_cast<char*>(&other->_impl_.latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_getter, &descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto_once,
      file_level_metadata_component_2faudioinput_2fv1_2faudioinput_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace audioinput
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::RecordRequest*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::RecordRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::RecordRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::AudioChunkInfo*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::AudioChunkInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::AudioChunkInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::AudioChunk*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::AudioChunk >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::AudioChunk >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::ChunksRequest*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::ChunksRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::ChunksRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::ChunksResponse*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::ChunksResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::ChunksResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::PropertiesRequest*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::PropertiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::PropertiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::audioinput::v1::PropertiesResponse*
Arena::CreateMaybeMessage< ::viam::component::audioinput::v1::PropertiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::audioinput::v1::PropertiesResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
