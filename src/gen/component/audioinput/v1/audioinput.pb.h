// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/audioinput/v1/audioinput.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2faudioinput_2fv1_2faudioinput_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2faudioinput_2fv1_2faudioinput_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/httpbody.pb.h"
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2faudioinput_2fv1_2faudioinput_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2faudioinput_2fv1_2faudioinput_2eproto;
namespace viam {
namespace component {
namespace audioinput {
namespace v1 {
class AudioChunk;
struct AudioChunkDefaultTypeInternal;
extern AudioChunkDefaultTypeInternal _AudioChunk_default_instance_;
class AudioChunkInfo;
struct AudioChunkInfoDefaultTypeInternal;
extern AudioChunkInfoDefaultTypeInternal _AudioChunkInfo_default_instance_;
class ChunksRequest;
struct ChunksRequestDefaultTypeInternal;
extern ChunksRequestDefaultTypeInternal _ChunksRequest_default_instance_;
class ChunksResponse;
struct ChunksResponseDefaultTypeInternal;
extern ChunksResponseDefaultTypeInternal _ChunksResponse_default_instance_;
class PropertiesRequest;
struct PropertiesRequestDefaultTypeInternal;
extern PropertiesRequestDefaultTypeInternal _PropertiesRequest_default_instance_;
class PropertiesResponse;
struct PropertiesResponseDefaultTypeInternal;
extern PropertiesResponseDefaultTypeInternal _PropertiesResponse_default_instance_;
class RecordRequest;
struct RecordRequestDefaultTypeInternal;
extern RecordRequestDefaultTypeInternal _RecordRequest_default_instance_;
}  // namespace v1
}  // namespace audioinput
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::audioinput::v1::AudioChunk* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::AudioChunk>(Arena*);
template<> ::viam::component::audioinput::v1::AudioChunkInfo* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::AudioChunkInfo>(Arena*);
template<> ::viam::component::audioinput::v1::ChunksRequest* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::ChunksRequest>(Arena*);
template<> ::viam::component::audioinput::v1::ChunksResponse* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::ChunksResponse>(Arena*);
template<> ::viam::component::audioinput::v1::PropertiesRequest* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::PropertiesRequest>(Arena*);
template<> ::viam::component::audioinput::v1::PropertiesResponse* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::PropertiesResponse>(Arena*);
template<> ::viam::component::audioinput::v1::RecordRequest* Arena::CreateMaybeMessage<::viam::component::audioinput::v1::RecordRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace audioinput {
namespace v1 {

enum SampleFormat : int {
  SAMPLE_FORMAT_UNSPECIFIED = 0,
  SAMPLE_FORMAT_INT16_INTERLEAVED = 1,
  SAMPLE_FORMAT_FLOAT32_INTERLEAVED = 2,
  SampleFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  SampleFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool SampleFormat_IsValid(int value);
constexpr SampleFormat SampleFormat_MIN = SAMPLE_FORMAT_UNSPECIFIED;
constexpr SampleFormat SampleFormat_MAX = SAMPLE_FORMAT_FLOAT32_INTERLEAVED;
constexpr int SampleFormat_ARRAYSIZE = SampleFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SampleFormat_descriptor();
template<typename T>
inline const std::string& SampleFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SampleFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SampleFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SampleFormat_descriptor(), enum_t_value);
}
inline bool SampleFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, SampleFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SampleFormat>(
    SampleFormat_descriptor(), name, value);
}
// ===================================================================

class RecordRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.RecordRequest) */ {
 public:
  inline RecordRequest() : RecordRequest(nullptr) {}
  ~RecordRequest() override;
  explicit PROTOBUF_CONSTEXPR RecordRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordRequest(const RecordRequest& from);
  RecordRequest(RecordRequest&& from) noexcept
    : RecordRequest() {
    *this = ::std::move(from);
  }

  inline RecordRequest& operator=(const RecordRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordRequest& operator=(RecordRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordRequest* internal_default_instance() {
    return reinterpret_cast<const RecordRequest*>(
               &_RecordRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RecordRequest& a, RecordRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RecordRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RecordRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RecordRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RecordRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.RecordRequest";
  }
  protected:
  explicit RecordRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kDurationFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .google.protobuf.Duration duration = 2 [json_name = "duration"];
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.RecordRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// -------------------------------------------------------------------

class AudioChunkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.AudioChunkInfo) */ {
 public:
  inline AudioChunkInfo() : AudioChunkInfo(nullptr) {}
  ~AudioChunkInfo() override;
  explicit PROTOBUF_CONSTEXPR AudioChunkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioChunkInfo(const AudioChunkInfo& from);
  AudioChunkInfo(AudioChunkInfo&& from) noexcept
    : AudioChunkInfo() {
    *this = ::std::move(from);
  }

  inline AudioChunkInfo& operator=(const AudioChunkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioChunkInfo& operator=(AudioChunkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioChunkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioChunkInfo* internal_default_instance() {
    return reinterpret_cast<const AudioChunkInfo*>(
               &_AudioChunkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AudioChunkInfo& a, AudioChunkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioChunkInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioChunkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioChunkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioChunkInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioChunkInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioChunkInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioChunkInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.AudioChunkInfo";
  }
  protected:
  explicit AudioChunkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSampleFormatFieldNumber = 1,
    kChannelsFieldNumber = 2,
    kSamplingRateFieldNumber = 3,
  };
  // .viam.component.audioinput.v1.SampleFormat sample_format = 1 [json_name = "sampleFormat"];
  void clear_sample_format();
  ::viam::component::audioinput::v1::SampleFormat sample_format() const;
  void set_sample_format(::viam::component::audioinput::v1::SampleFormat value);
  private:
  ::viam::component::audioinput::v1::SampleFormat _internal_sample_format() const;
  void _internal_set_sample_format(::viam::component::audioinput::v1::SampleFormat value);
  public:

  // uint32 channels = 2 [json_name = "channels"];
  void clear_channels();
  uint32_t channels() const;
  void set_channels(uint32_t value);
  private:
  uint32_t _internal_channels() const;
  void _internal_set_channels(uint32_t value);
  public:

  // int64 sampling_rate = 3 [json_name = "samplingRate"];
  void clear_sampling_rate();
  int64_t sampling_rate() const;
  void set_sampling_rate(int64_t value);
  private:
  int64_t _internal_sampling_rate() const;
  void _internal_set_sampling_rate(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.AudioChunkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int sample_format_;
  uint32_t channels_;
  int64_t sampling_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// -------------------------------------------------------------------

class AudioChunk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.AudioChunk) */ {
 public:
  inline AudioChunk() : AudioChunk(nullptr) {}
  ~AudioChunk() override;
  explicit PROTOBUF_CONSTEXPR AudioChunk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AudioChunk(const AudioChunk& from);
  AudioChunk(AudioChunk&& from) noexcept
    : AudioChunk() {
    *this = ::std::move(from);
  }

  inline AudioChunk& operator=(const AudioChunk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AudioChunk& operator=(AudioChunk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AudioChunk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AudioChunk* internal_default_instance() {
    return reinterpret_cast<const AudioChunk*>(
               &_AudioChunk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AudioChunk& a, AudioChunk& b) {
    a.Swap(&b);
  }
  inline void Swap(AudioChunk* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AudioChunk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AudioChunk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AudioChunk>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AudioChunk& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AudioChunk& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AudioChunk* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.AudioChunk";
  }
  protected:
  explicit AudioChunk(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // bytes data = 1 [json_name = "data"];
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 length = 2 [json_name = "length"];
  void clear_length();
  uint32_t length() const;
  void set_length(uint32_t value);
  private:
  uint32_t _internal_length() const;
  void _internal_set_length(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.AudioChunk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  uint32_t length_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// -------------------------------------------------------------------

class ChunksRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.ChunksRequest) */ {
 public:
  inline ChunksRequest() : ChunksRequest(nullptr) {}
  ~ChunksRequest() override;
  explicit PROTOBUF_CONSTEXPR ChunksRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunksRequest(const ChunksRequest& from);
  ChunksRequest(ChunksRequest&& from) noexcept
    : ChunksRequest() {
    *this = ::std::move(from);
  }

  inline ChunksRequest& operator=(const ChunksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunksRequest& operator=(ChunksRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunksRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChunksRequest* internal_default_instance() {
    return reinterpret_cast<const ChunksRequest*>(
               &_ChunksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ChunksRequest& a, ChunksRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunksRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunksRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunksRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunksRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunksRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChunksRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunksRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.ChunksRequest";
  }
  protected:
  explicit ChunksRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSampleFormatFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .viam.component.audioinput.v1.SampleFormat sample_format = 2 [json_name = "sampleFormat"];
  void clear_sample_format();
  ::viam::component::audioinput::v1::SampleFormat sample_format() const;
  void set_sample_format(::viam::component::audioinput::v1::SampleFormat value);
  private:
  ::viam::component::audioinput::v1::SampleFormat _internal_sample_format() const;
  void _internal_set_sample_format(::viam::component::audioinput::v1::SampleFormat value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.ChunksRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int sample_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// -------------------------------------------------------------------

class ChunksResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.ChunksResponse) */ {
 public:
  inline ChunksResponse() : ChunksResponse(nullptr) {}
  ~ChunksResponse() override;
  explicit PROTOBUF_CONSTEXPR ChunksResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChunksResponse(const ChunksResponse& from);
  ChunksResponse(ChunksResponse&& from) noexcept
    : ChunksResponse() {
    *this = ::std::move(from);
  }

  inline ChunksResponse& operator=(const ChunksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChunksResponse& operator=(ChunksResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChunksResponse& default_instance() {
    return *internal_default_instance();
  }
  enum TypeCase {
    kInfo = 1,
    kChunk = 2,
    TYPE_NOT_SET = 0,
  };

  static inline const ChunksResponse* internal_default_instance() {
    return reinterpret_cast<const ChunksResponse*>(
               &_ChunksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChunksResponse& a, ChunksResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChunksResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChunksResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChunksResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChunksResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChunksResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChunksResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChunksResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.ChunksResponse";
  }
  protected:
  explicit ChunksResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoFieldNumber = 1,
    kChunkFieldNumber = 2,
  };
  // .viam.component.audioinput.v1.AudioChunkInfo info = 1 [json_name = "info"];
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::viam::component::audioinput::v1::AudioChunkInfo& info() const;
  PROTOBUF_NODISCARD ::viam::component::audioinput::v1::AudioChunkInfo* release_info();
  ::viam::component::audioinput::v1::AudioChunkInfo* mutable_info();
  void set_allocated_info(::viam::component::audioinput::v1::AudioChunkInfo* info);
  private:
  const ::viam::component::audioinput::v1::AudioChunkInfo& _internal_info() const;
  ::viam::component::audioinput::v1::AudioChunkInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::viam::component::audioinput::v1::AudioChunkInfo* info);
  ::viam::component::audioinput::v1::AudioChunkInfo* unsafe_arena_release_info();

  // .viam.component.audioinput.v1.AudioChunk chunk = 2 [json_name = "chunk"];
  bool has_chunk() const;
  private:
  bool _internal_has_chunk() const;
  public:
  void clear_chunk();
  const ::viam::component::audioinput::v1::AudioChunk& chunk() const;
  PROTOBUF_NODISCARD ::viam::component::audioinput::v1::AudioChunk* release_chunk();
  ::viam::component::audioinput::v1::AudioChunk* mutable_chunk();
  void set_allocated_chunk(::viam::component::audioinput::v1::AudioChunk* chunk);
  private:
  const ::viam::component::audioinput::v1::AudioChunk& _internal_chunk() const;
  ::viam::component::audioinput::v1::AudioChunk* _internal_mutable_chunk();
  public:
  void unsafe_arena_set_allocated_chunk(
      ::viam::component::audioinput::v1::AudioChunk* chunk);
  ::viam::component::audioinput::v1::AudioChunk* unsafe_arena_release_chunk();

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.ChunksResponse)
 private:
  class _Internal;
  void set_has_info();
  void set_has_chunk();

  inline bool has_type() const;
  inline void clear_has_type();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union TypeUnion {
    constexpr TypeUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::viam::component::audioinput::v1::AudioChunkInfo* info_;
    ::viam::component::audioinput::v1::AudioChunk* chunk_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// -------------------------------------------------------------------

class PropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.PropertiesRequest) */ {
 public:
  inline PropertiesRequest() : PropertiesRequest(nullptr) {}
  ~PropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR PropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertiesRequest(const PropertiesRequest& from);
  PropertiesRequest(PropertiesRequest&& from) noexcept
    : PropertiesRequest() {
    *this = ::std::move(from);
  }

  inline PropertiesRequest& operator=(const PropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertiesRequest& operator=(PropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const PropertiesRequest*>(
               &_PropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PropertiesRequest& a, PropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertiesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.PropertiesRequest";
  }
  protected:
  explicit PropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.PropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// -------------------------------------------------------------------

class PropertiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.audioinput.v1.PropertiesResponse) */ {
 public:
  inline PropertiesResponse() : PropertiesResponse(nullptr) {}
  ~PropertiesResponse() override;
  explicit PROTOBUF_CONSTEXPR PropertiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertiesResponse(const PropertiesResponse& from);
  PropertiesResponse(PropertiesResponse&& from) noexcept
    : PropertiesResponse() {
    *this = ::std::move(from);
  }

  inline PropertiesResponse& operator=(const PropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertiesResponse& operator=(PropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const PropertiesResponse*>(
               &_PropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PropertiesResponse& a, PropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PropertiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PropertiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PropertiesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.audioinput.v1.PropertiesResponse";
  }
  protected:
  explicit PropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatencyFieldNumber = 2,
    kChannelCountFieldNumber = 1,
    kSampleRateFieldNumber = 3,
    kSampleSizeFieldNumber = 4,
    kIsBigEndianFieldNumber = 5,
    kIsFloatFieldNumber = 6,
    kIsInterleavedFieldNumber = 7,
  };
  // .google.protobuf.Duration latency = 2 [json_name = "latency"];
  bool has_latency() const;
  private:
  bool _internal_has_latency() const;
  public:
  void clear_latency();
  const ::PROTOBUF_NAMESPACE_ID::Duration& latency() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_latency();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_latency();
  void set_allocated_latency(::PROTOBUF_NAMESPACE_ID::Duration* latency);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_latency() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_latency();
  public:
  void unsafe_arena_set_allocated_latency(
      ::PROTOBUF_NAMESPACE_ID::Duration* latency);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_latency();

  // uint32 channel_count = 1 [json_name = "channelCount"];
  void clear_channel_count();
  uint32_t channel_count() const;
  void set_channel_count(uint32_t value);
  private:
  uint32_t _internal_channel_count() const;
  void _internal_set_channel_count(uint32_t value);
  public:

  // uint32 sample_rate = 3 [json_name = "sampleRate"];
  void clear_sample_rate();
  uint32_t sample_rate() const;
  void set_sample_rate(uint32_t value);
  private:
  uint32_t _internal_sample_rate() const;
  void _internal_set_sample_rate(uint32_t value);
  public:

  // uint32 sample_size = 4 [json_name = "sampleSize"];
  void clear_sample_size();
  uint32_t sample_size() const;
  void set_sample_size(uint32_t value);
  private:
  uint32_t _internal_sample_size() const;
  void _internal_set_sample_size(uint32_t value);
  public:

  // bool is_big_endian = 5 [json_name = "isBigEndian"];
  void clear_is_big_endian();
  bool is_big_endian() const;
  void set_is_big_endian(bool value);
  private:
  bool _internal_is_big_endian() const;
  void _internal_set_is_big_endian(bool value);
  public:

  // bool is_float = 6 [json_name = "isFloat"];
  void clear_is_float();
  bool is_float() const;
  void set_is_float(bool value);
  private:
  bool _internal_is_float() const;
  void _internal_set_is_float(bool value);
  public:

  // bool is_interleaved = 7 [json_name = "isInterleaved"];
  void clear_is_interleaved();
  bool is_interleaved() const;
  void set_is_interleaved(bool value);
  private:
  bool _internal_is_interleaved() const;
  void _internal_set_is_interleaved(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.audioinput.v1.PropertiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Duration* latency_;
  uint32_t channel_count_;
  uint32_t sample_rate_;
  uint32_t sample_size_;
  bool is_big_endian_;
  bool is_float_;
  bool is_interleaved_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2faudioinput_2fv1_2faudioinput_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RecordRequest

// string name = 1 [json_name = "name"];
inline void RecordRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RecordRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.RecordRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.RecordRequest.name)
}
inline std::string* RecordRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.RecordRequest.name)
  return _s;
}
inline const std::string& RecordRequest::_internal_name() const {
  return name_.Get();
}
inline void RecordRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* RecordRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* RecordRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.RecordRequest.name)
  return name_.Release();
}
inline void RecordRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.RecordRequest.name)
}

// .google.protobuf.Duration duration = 2 [json_name = "duration"];
inline bool RecordRequest::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool RecordRequest::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RecordRequest::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& RecordRequest::duration() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.RecordRequest.duration)
  return _internal_duration();
}
inline void RecordRequest::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioinput.v1.RecordRequest.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecordRequest::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecordRequest::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.RecordRequest.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecordRequest::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* RecordRequest::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.RecordRequest.duration)
  return _msg;
}
inline void RecordRequest::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.RecordRequest.duration)
}

// -------------------------------------------------------------------

// AudioChunkInfo

// .viam.component.audioinput.v1.SampleFormat sample_format = 1 [json_name = "sampleFormat"];
inline void AudioChunkInfo::clear_sample_format() {
  sample_format_ = 0;
}
inline ::viam::component::audioinput::v1::SampleFormat AudioChunkInfo::_internal_sample_format() const {
  return static_cast< ::viam::component::audioinput::v1::SampleFormat >(sample_format_);
}
inline ::viam::component::audioinput::v1::SampleFormat AudioChunkInfo::sample_format() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.AudioChunkInfo.sample_format)
  return _internal_sample_format();
}
inline void AudioChunkInfo::_internal_set_sample_format(::viam::component::audioinput::v1::SampleFormat value) {
  
  sample_format_ = value;
}
inline void AudioChunkInfo::set_sample_format(::viam::component::audioinput::v1::SampleFormat value) {
  _internal_set_sample_format(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.AudioChunkInfo.sample_format)
}

// uint32 channels = 2 [json_name = "channels"];
inline void AudioChunkInfo::clear_channels() {
  channels_ = 0u;
}
inline uint32_t AudioChunkInfo::_internal_channels() const {
  return channels_;
}
inline uint32_t AudioChunkInfo::channels() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.AudioChunkInfo.channels)
  return _internal_channels();
}
inline void AudioChunkInfo::_internal_set_channels(uint32_t value) {
  
  channels_ = value;
}
inline void AudioChunkInfo::set_channels(uint32_t value) {
  _internal_set_channels(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.AudioChunkInfo.channels)
}

// int64 sampling_rate = 3 [json_name = "samplingRate"];
inline void AudioChunkInfo::clear_sampling_rate() {
  sampling_rate_ = int64_t{0};
}
inline int64_t AudioChunkInfo::_internal_sampling_rate() const {
  return sampling_rate_;
}
inline int64_t AudioChunkInfo::sampling_rate() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.AudioChunkInfo.sampling_rate)
  return _internal_sampling_rate();
}
inline void AudioChunkInfo::_internal_set_sampling_rate(int64_t value) {
  
  sampling_rate_ = value;
}
inline void AudioChunkInfo::set_sampling_rate(int64_t value) {
  _internal_set_sampling_rate(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.AudioChunkInfo.sampling_rate)
}

// -------------------------------------------------------------------

// AudioChunk

// bytes data = 1 [json_name = "data"];
inline void AudioChunk::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& AudioChunk::data() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.AudioChunk.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AudioChunk::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.AudioChunk.data)
}
inline std::string* AudioChunk::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.AudioChunk.data)
  return _s;
}
inline const std::string& AudioChunk::_internal_data() const {
  return data_.Get();
}
inline void AudioChunk::_internal_set_data(const std::string& value) {
  
  data_.Set(value, GetArenaForAllocation());
}
inline std::string* AudioChunk::_internal_mutable_data() {
  
  return data_.Mutable(GetArenaForAllocation());
}
inline std::string* AudioChunk::release_data() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.AudioChunk.data)
  return data_.Release();
}
inline void AudioChunk::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(data, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault()) {
    data_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.AudioChunk.data)
}

// uint32 length = 2 [json_name = "length"];
inline void AudioChunk::clear_length() {
  length_ = 0u;
}
inline uint32_t AudioChunk::_internal_length() const {
  return length_;
}
inline uint32_t AudioChunk::length() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.AudioChunk.length)
  return _internal_length();
}
inline void AudioChunk::_internal_set_length(uint32_t value) {
  
  length_ = value;
}
inline void AudioChunk::set_length(uint32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.AudioChunk.length)
}

// -------------------------------------------------------------------

// ChunksRequest

// string name = 1 [json_name = "name"];
inline void ChunksRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChunksRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.ChunksRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChunksRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.ChunksRequest.name)
}
inline std::string* ChunksRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.ChunksRequest.name)
  return _s;
}
inline const std::string& ChunksRequest::_internal_name() const {
  return name_.Get();
}
inline void ChunksRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* ChunksRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* ChunksRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.ChunksRequest.name)
  return name_.Release();
}
inline void ChunksRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.ChunksRequest.name)
}

// .viam.component.audioinput.v1.SampleFormat sample_format = 2 [json_name = "sampleFormat"];
inline void ChunksRequest::clear_sample_format() {
  sample_format_ = 0;
}
inline ::viam::component::audioinput::v1::SampleFormat ChunksRequest::_internal_sample_format() const {
  return static_cast< ::viam::component::audioinput::v1::SampleFormat >(sample_format_);
}
inline ::viam::component::audioinput::v1::SampleFormat ChunksRequest::sample_format() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.ChunksRequest.sample_format)
  return _internal_sample_format();
}
inline void ChunksRequest::_internal_set_sample_format(::viam::component::audioinput::v1::SampleFormat value) {
  
  sample_format_ = value;
}
inline void ChunksRequest::set_sample_format(::viam::component::audioinput::v1::SampleFormat value) {
  _internal_set_sample_format(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.ChunksRequest.sample_format)
}

// -------------------------------------------------------------------

// ChunksResponse

// .viam.component.audioinput.v1.AudioChunkInfo info = 1 [json_name = "info"];
inline bool ChunksResponse::_internal_has_info() const {
  return type_case() == kInfo;
}
inline bool ChunksResponse::has_info() const {
  return _internal_has_info();
}
inline void ChunksResponse::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void ChunksResponse::clear_info() {
  if (_internal_has_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.info_;
    }
    clear_has_type();
  }
}
inline ::viam::component::audioinput::v1::AudioChunkInfo* ChunksResponse::release_info() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.ChunksResponse.info)
  if (_internal_has_info()) {
    clear_has_type();
    ::viam::component::audioinput::v1::AudioChunkInfo* temp = type_.info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::component::audioinput::v1::AudioChunkInfo& ChunksResponse::_internal_info() const {
  return _internal_has_info()
      ? *type_.info_
      : reinterpret_cast< ::viam::component::audioinput::v1::AudioChunkInfo&>(::viam::component::audioinput::v1::_AudioChunkInfo_default_instance_);
}
inline const ::viam::component::audioinput::v1::AudioChunkInfo& ChunksResponse::info() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.ChunksResponse.info)
  return _internal_info();
}
inline ::viam::component::audioinput::v1::AudioChunkInfo* ChunksResponse::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.component.audioinput.v1.ChunksResponse.info)
  if (_internal_has_info()) {
    clear_has_type();
    ::viam::component::audioinput::v1::AudioChunkInfo* temp = type_.info_;
    type_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChunksResponse::unsafe_arena_set_allocated_info(::viam::component::audioinput::v1::AudioChunkInfo* info) {
  clear_type();
  if (info) {
    set_has_info();
    type_.info_ = info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioinput.v1.ChunksResponse.info)
}
inline ::viam::component::audioinput::v1::AudioChunkInfo* ChunksResponse::_internal_mutable_info() {
  if (!_internal_has_info()) {
    clear_type();
    set_has_info();
    type_.info_ = CreateMaybeMessage< ::viam::component::audioinput::v1::AudioChunkInfo >(GetArenaForAllocation());
  }
  return type_.info_;
}
inline ::viam::component::audioinput::v1::AudioChunkInfo* ChunksResponse::mutable_info() {
  ::viam::component::audioinput::v1::AudioChunkInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.ChunksResponse.info)
  return _msg;
}

// .viam.component.audioinput.v1.AudioChunk chunk = 2 [json_name = "chunk"];
inline bool ChunksResponse::_internal_has_chunk() const {
  return type_case() == kChunk;
}
inline bool ChunksResponse::has_chunk() const {
  return _internal_has_chunk();
}
inline void ChunksResponse::set_has_chunk() {
  _oneof_case_[0] = kChunk;
}
inline void ChunksResponse::clear_chunk() {
  if (_internal_has_chunk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete type_.chunk_;
    }
    clear_has_type();
  }
}
inline ::viam::component::audioinput::v1::AudioChunk* ChunksResponse::release_chunk() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.ChunksResponse.chunk)
  if (_internal_has_chunk()) {
    clear_has_type();
    ::viam::component::audioinput::v1::AudioChunk* temp = type_.chunk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    type_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::viam::component::audioinput::v1::AudioChunk& ChunksResponse::_internal_chunk() const {
  return _internal_has_chunk()
      ? *type_.chunk_
      : reinterpret_cast< ::viam::component::audioinput::v1::AudioChunk&>(::viam::component::audioinput::v1::_AudioChunk_default_instance_);
}
inline const ::viam::component::audioinput::v1::AudioChunk& ChunksResponse::chunk() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.ChunksResponse.chunk)
  return _internal_chunk();
}
inline ::viam::component::audioinput::v1::AudioChunk* ChunksResponse::unsafe_arena_release_chunk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:viam.component.audioinput.v1.ChunksResponse.chunk)
  if (_internal_has_chunk()) {
    clear_has_type();
    ::viam::component::audioinput::v1::AudioChunk* temp = type_.chunk_;
    type_.chunk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChunksResponse::unsafe_arena_set_allocated_chunk(::viam::component::audioinput::v1::AudioChunk* chunk) {
  clear_type();
  if (chunk) {
    set_has_chunk();
    type_.chunk_ = chunk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioinput.v1.ChunksResponse.chunk)
}
inline ::viam::component::audioinput::v1::AudioChunk* ChunksResponse::_internal_mutable_chunk() {
  if (!_internal_has_chunk()) {
    clear_type();
    set_has_chunk();
    type_.chunk_ = CreateMaybeMessage< ::viam::component::audioinput::v1::AudioChunk >(GetArenaForAllocation());
  }
  return type_.chunk_;
}
inline ::viam::component::audioinput::v1::AudioChunk* ChunksResponse::mutable_chunk() {
  ::viam::component::audioinput::v1::AudioChunk* _msg = _internal_mutable_chunk();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.ChunksResponse.chunk)
  return _msg;
}

inline bool ChunksResponse::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void ChunksResponse::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ChunksResponse::TypeCase ChunksResponse::type_case() const {
  return ChunksResponse::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// PropertiesRequest

// string name = 1 [json_name = "name"];
inline void PropertiesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PropertiesRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertiesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesRequest.name)
}
inline std::string* PropertiesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.PropertiesRequest.name)
  return _s;
}
inline const std::string& PropertiesRequest::_internal_name() const {
  return name_.Get();
}
inline void PropertiesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* PropertiesRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* PropertiesRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.PropertiesRequest.name)
  return name_.Release();
}
inline void PropertiesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.PropertiesRequest.name)
}

// -------------------------------------------------------------------

// PropertiesResponse

// uint32 channel_count = 1 [json_name = "channelCount"];
inline void PropertiesResponse::clear_channel_count() {
  channel_count_ = 0u;
}
inline uint32_t PropertiesResponse::_internal_channel_count() const {
  return channel_count_;
}
inline uint32_t PropertiesResponse::channel_count() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.channel_count)
  return _internal_channel_count();
}
inline void PropertiesResponse::_internal_set_channel_count(uint32_t value) {
  
  channel_count_ = value;
}
inline void PropertiesResponse::set_channel_count(uint32_t value) {
  _internal_set_channel_count(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesResponse.channel_count)
}

// .google.protobuf.Duration latency = 2 [json_name = "latency"];
inline bool PropertiesResponse::_internal_has_latency() const {
  return this != internal_default_instance() && latency_ != nullptr;
}
inline bool PropertiesResponse::has_latency() const {
  return _internal_has_latency();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& PropertiesResponse::_internal_latency() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = latency_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& PropertiesResponse::latency() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.latency)
  return _internal_latency();
}
inline void PropertiesResponse::unsafe_arena_set_allocated_latency(
    ::PROTOBUF_NAMESPACE_ID::Duration* latency) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  latency_ = latency;
  if (latency) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.audioinput.v1.PropertiesResponse.latency)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PropertiesResponse::release_latency() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = latency_;
  latency_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PropertiesResponse::unsafe_arena_release_latency() {
  // @@protoc_insertion_point(field_release:viam.component.audioinput.v1.PropertiesResponse.latency)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = latency_;
  latency_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PropertiesResponse::_internal_mutable_latency() {
  
  if (latency_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    latency_ = p;
  }
  return latency_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* PropertiesResponse::mutable_latency() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_latency();
  // @@protoc_insertion_point(field_mutable:viam.component.audioinput.v1.PropertiesResponse.latency)
  return _msg;
}
inline void PropertiesResponse::set_allocated_latency(::PROTOBUF_NAMESPACE_ID::Duration* latency) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency_);
  }
  if (latency) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(latency));
    if (message_arena != submessage_arena) {
      latency = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, latency, submessage_arena);
    }
    
  } else {
    
  }
  latency_ = latency;
  // @@protoc_insertion_point(field_set_allocated:viam.component.audioinput.v1.PropertiesResponse.latency)
}

// uint32 sample_rate = 3 [json_name = "sampleRate"];
inline void PropertiesResponse::clear_sample_rate() {
  sample_rate_ = 0u;
}
inline uint32_t PropertiesResponse::_internal_sample_rate() const {
  return sample_rate_;
}
inline uint32_t PropertiesResponse::sample_rate() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.sample_rate)
  return _internal_sample_rate();
}
inline void PropertiesResponse::_internal_set_sample_rate(uint32_t value) {
  
  sample_rate_ = value;
}
inline void PropertiesResponse::set_sample_rate(uint32_t value) {
  _internal_set_sample_rate(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesResponse.sample_rate)
}

// uint32 sample_size = 4 [json_name = "sampleSize"];
inline void PropertiesResponse::clear_sample_size() {
  sample_size_ = 0u;
}
inline uint32_t PropertiesResponse::_internal_sample_size() const {
  return sample_size_;
}
inline uint32_t PropertiesResponse::sample_size() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.sample_size)
  return _internal_sample_size();
}
inline void PropertiesResponse::_internal_set_sample_size(uint32_t value) {
  
  sample_size_ = value;
}
inline void PropertiesResponse::set_sample_size(uint32_t value) {
  _internal_set_sample_size(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesResponse.sample_size)
}

// bool is_big_endian = 5 [json_name = "isBigEndian"];
inline void PropertiesResponse::clear_is_big_endian() {
  is_big_endian_ = false;
}
inline bool PropertiesResponse::_internal_is_big_endian() const {
  return is_big_endian_;
}
inline bool PropertiesResponse::is_big_endian() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.is_big_endian)
  return _internal_is_big_endian();
}
inline void PropertiesResponse::_internal_set_is_big_endian(bool value) {
  
  is_big_endian_ = value;
}
inline void PropertiesResponse::set_is_big_endian(bool value) {
  _internal_set_is_big_endian(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesResponse.is_big_endian)
}

// bool is_float = 6 [json_name = "isFloat"];
inline void PropertiesResponse::clear_is_float() {
  is_float_ = false;
}
inline bool PropertiesResponse::_internal_is_float() const {
  return is_float_;
}
inline bool PropertiesResponse::is_float() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.is_float)
  return _internal_is_float();
}
inline void PropertiesResponse::_internal_set_is_float(bool value) {
  
  is_float_ = value;
}
inline void PropertiesResponse::set_is_float(bool value) {
  _internal_set_is_float(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesResponse.is_float)
}

// bool is_interleaved = 7 [json_name = "isInterleaved"];
inline void PropertiesResponse::clear_is_interleaved() {
  is_interleaved_ = false;
}
inline bool PropertiesResponse::_internal_is_interleaved() const {
  return is_interleaved_;
}
inline bool PropertiesResponse::is_interleaved() const {
  // @@protoc_insertion_point(field_get:viam.component.audioinput.v1.PropertiesResponse.is_interleaved)
  return _internal_is_interleaved();
}
inline void PropertiesResponse::_internal_set_is_interleaved(bool value) {
  
  is_interleaved_ = value;
}
inline void PropertiesResponse::set_is_interleaved(bool value) {
  _internal_set_is_interleaved(value);
  // @@protoc_insertion_point(field_set:viam.component.audioinput.v1.PropertiesResponse.is_interleaved)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace audioinput
}  // namespace component
}  // namespace viam

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::viam::component::audioinput::v1::SampleFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::viam::component::audioinput::v1::SampleFormat>() {
  return ::viam::component::audioinput::v1::SampleFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2faudioinput_2fv1_2faudioinput_2eproto
