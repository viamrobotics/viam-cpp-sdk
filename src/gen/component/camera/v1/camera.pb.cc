// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/camera/v1/camera.proto

#include "component/camera/v1/camera.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace viam {
namespace component {
namespace camera {
namespace v1 {
PROTOBUF_CONSTEXPR GetImageRequest::GetImageRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImageRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImageRequestDefaultTypeInternal() {}
  union {
    GetImageRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
PROTOBUF_CONSTEXPR GetImageResponse::GetImageResponse(
    ::_pbi::ConstantInitialized)
  : mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , image_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImageResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImageResponseDefaultTypeInternal() {}
  union {
    GetImageResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImageResponseDefaultTypeInternal _GetImageResponse_default_instance_;
PROTOBUF_CONSTEXPR RenderFrameRequest::RenderFrameRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct RenderFrameRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR RenderFrameRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~RenderFrameRequestDefaultTypeInternal() {}
  union {
    RenderFrameRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 RenderFrameRequestDefaultTypeInternal _RenderFrameRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPointCloudRequest::GetPointCloudRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetPointCloudRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPointCloudRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPointCloudRequestDefaultTypeInternal() {}
  union {
    GetPointCloudRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPointCloudRequestDefaultTypeInternal _GetPointCloudRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPointCloudResponse::GetPointCloudResponse(
    ::_pbi::ConstantInitialized)
  : mime_type_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , point_cloud_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetPointCloudResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPointCloudResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPointCloudResponseDefaultTypeInternal() {}
  union {
    GetPointCloudResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPointCloudResponseDefaultTypeInternal _GetPointCloudResponse_default_instance_;
PROTOBUF_CONSTEXPR GetPropertiesRequest::GetPropertiesRequest(
    ::_pbi::ConstantInitialized)
  : name_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct GetPropertiesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertiesRequestDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertiesRequestDefaultTypeInternal() {}
  union {
    GetPropertiesRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
PROTOBUF_CONSTEXPR GetPropertiesResponse::GetPropertiesResponse(
    ::_pbi::ConstantInitialized)
  : intrinsic_parameters_(nullptr)
  , distortion_parameters_(nullptr)
  , supports_pcd_(false){}
struct GetPropertiesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetPropertiesResponseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetPropertiesResponseDefaultTypeInternal() {}
  union {
    GetPropertiesResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
PROTOBUF_CONSTEXPR Webcams::Webcams(
    ::_pbi::ConstantInitialized)
  : webcams_(){}
struct WebcamsDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebcamsDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebcamsDefaultTypeInternal() {}
  union {
    Webcams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebcamsDefaultTypeInternal _Webcams_default_instance_;
PROTOBUF_CONSTEXPR Webcam::Webcam(
    ::_pbi::ConstantInitialized)
  : properties_()
  , label_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , status_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct WebcamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR WebcamDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~WebcamDefaultTypeInternal() {}
  union {
    Webcam _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 WebcamDefaultTypeInternal _Webcam_default_instance_;
PROTOBUF_CONSTEXPR Property::Property(
    ::_pbi::ConstantInitialized)
  : frame_format_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{})
  , width_px_(0)
  , height_px_(0){}
struct PropertyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR PropertyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~PropertyDefaultTypeInternal() {}
  union {
    Property _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 PropertyDefaultTypeInternal _Property_default_instance_;
PROTOBUF_CONSTEXPR IntrinsicParameters::IntrinsicParameters(
    ::_pbi::ConstantInitialized)
  : width_px_(0u)
  , height_px_(0u)
  , focal_x_px_(0)
  , focal_y_px_(0)
  , center_x_px_(0)
  , center_y_px_(0){}
struct IntrinsicParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IntrinsicParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~IntrinsicParametersDefaultTypeInternal() {}
  union {
    IntrinsicParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IntrinsicParametersDefaultTypeInternal _IntrinsicParameters_default_instance_;
PROTOBUF_CONSTEXPR DistortionParameters::DistortionParameters(
    ::_pbi::ConstantInitialized)
  : parameters_()
  , model_(&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}){}
struct DistortionParametersDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DistortionParametersDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~DistortionParametersDefaultTypeInternal() {}
  union {
    DistortionParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DistortionParametersDefaultTypeInternal _DistortionParameters_default_instance_;
}  // namespace v1
}  // namespace camera
}  // namespace component
}  // namespace viam
static ::_pb::Metadata file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[12];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_component_2fcamera_2fv1_2fcamera_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_component_2fcamera_2fv1_2fcamera_2eproto = nullptr;

const uint32_t TableStruct_component_2fcamera_2fv1_2fcamera_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetImageRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetImageRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetImageRequest, mime_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetImageResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetImageResponse, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetImageResponse, image_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::RenderFrameRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::RenderFrameRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::RenderFrameRequest, mime_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPointCloudRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPointCloudRequest, name_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPointCloudRequest, mime_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPointCloudResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPointCloudResponse, mime_type_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPointCloudResponse, point_cloud_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPropertiesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPropertiesRequest, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPropertiesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPropertiesResponse, supports_pcd_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPropertiesResponse, intrinsic_parameters_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::GetPropertiesResponse, distortion_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Webcams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Webcams, webcams_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Webcam, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Webcam, label_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Webcam, status_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Webcam, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Property, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Property, width_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Property, height_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::Property, frame_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, width_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, height_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, focal_x_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, focal_y_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, center_x_px_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::IntrinsicParameters, center_y_px_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::DistortionParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::DistortionParameters, model_),
  PROTOBUF_FIELD_OFFSET(::viam::component::camera::v1::DistortionParameters, parameters_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::viam::component::camera::v1::GetImageRequest)},
  { 8, -1, -1, sizeof(::viam::component::camera::v1::GetImageResponse)},
  { 16, -1, -1, sizeof(::viam::component::camera::v1::RenderFrameRequest)},
  { 24, -1, -1, sizeof(::viam::component::camera::v1::GetPointCloudRequest)},
  { 32, -1, -1, sizeof(::viam::component::camera::v1::GetPointCloudResponse)},
  { 40, -1, -1, sizeof(::viam::component::camera::v1::GetPropertiesRequest)},
  { 47, -1, -1, sizeof(::viam::component::camera::v1::GetPropertiesResponse)},
  { 56, -1, -1, sizeof(::viam::component::camera::v1::Webcams)},
  { 63, -1, -1, sizeof(::viam::component::camera::v1::Webcam)},
  { 72, -1, -1, sizeof(::viam::component::camera::v1::Property)},
  { 81, -1, -1, sizeof(::viam::component::camera::v1::IntrinsicParameters)},
  { 93, -1, -1, sizeof(::viam::component::camera::v1::DistortionParameters)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::viam::component::camera::v1::_GetImageRequest_default_instance_._instance,
  &::viam::component::camera::v1::_GetImageResponse_default_instance_._instance,
  &::viam::component::camera::v1::_RenderFrameRequest_default_instance_._instance,
  &::viam::component::camera::v1::_GetPointCloudRequest_default_instance_._instance,
  &::viam::component::camera::v1::_GetPointCloudResponse_default_instance_._instance,
  &::viam::component::camera::v1::_GetPropertiesRequest_default_instance_._instance,
  &::viam::component::camera::v1::_GetPropertiesResponse_default_instance_._instance,
  &::viam::component::camera::v1::_Webcams_default_instance_._instance,
  &::viam::component::camera::v1::_Webcam_default_instance_._instance,
  &::viam::component::camera::v1::_Property_default_instance_._instance,
  &::viam::component::camera::v1::_IntrinsicParameters_default_instance_._instance,
  &::viam::component::camera::v1::_DistortionParameters_default_instance_._instance,
};

const char descriptor_table_protodef_component_2fcamera_2fv1_2fcamera_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n component/camera/v1/camera.proto\022\030viam"
  ".component.camera.v1\032\026common/v1/common.p"
  "roto\032\034google/api/annotations.proto\032\031goog"
  "le/api/httpbody.proto\"B\n\017GetImageRequest"
  "\022\022\n\004name\030\001 \001(\tR\004name\022\033\n\tmime_type\030\002 \001(\tR"
  "\010mimeType\"E\n\020GetImageResponse\022\033\n\tmime_ty"
  "pe\030\001 \001(\tR\010mimeType\022\024\n\005image\030\002 \001(\014R\005image"
  "\"E\n\022RenderFrameRequest\022\022\n\004name\030\001 \001(\tR\004na"
  "me\022\033\n\tmime_type\030\002 \001(\tR\010mimeType\"G\n\024GetPo"
  "intCloudRequest\022\022\n\004name\030\001 \001(\tR\004name\022\033\n\tm"
  "ime_type\030\002 \001(\tR\010mimeType\"U\n\025GetPointClou"
  "dResponse\022\033\n\tmime_type\030\001 \001(\tR\010mimeType\022\037"
  "\n\013point_cloud\030\002 \001(\014R\npointCloud\"*\n\024GetPr"
  "opertiesRequest\022\022\n\004name\030\001 \001(\tR\004name\"\201\002\n\025"
  "GetPropertiesResponse\022!\n\014supports_pcd\030\001 "
  "\001(\010R\013supportsPcd\022`\n\024intrinsic_parameters"
  "\030\002 \001(\0132-.viam.component.camera.v1.Intrin"
  "sicParametersR\023intrinsicParameters\022c\n\025di"
  "stortion_parameters\030\003 \001(\0132..viam.compone"
  "nt.camera.v1.DistortionParametersR\024disto"
  "rtionParameters\"E\n\007Webcams\022:\n\007webcams\030\001 "
  "\003(\0132 .viam.component.camera.v1.WebcamR\007w"
  "ebcams\"z\n\006Webcam\022\024\n\005label\030\001 \001(\tR\005label\022\026"
  "\n\006status\030\002 \001(\tR\006status\022B\n\nproperties\030\003 \003"
  "(\0132\".viam.component.camera.v1.PropertyR\n"
  "properties\"e\n\010Property\022\031\n\010width_px\030\001 \001(\005"
  "R\007widthPx\022\033\n\theight_px\030\002 \001(\005R\010heightPx\022!"
  "\n\014frame_format\030\003 \001(\tR\013frameFormat\"\311\001\n\023In"
  "trinsicParameters\022\031\n\010width_px\030\001 \001(\rR\007wid"
  "thPx\022\033\n\theight_px\030\002 \001(\rR\010heightPx\022\034\n\nfoc"
  "al_x_px\030\003 \001(\001R\010focalXPx\022\034\n\nfocal_y_px\030\004 "
  "\001(\001R\010focalYPx\022\036\n\013center_x_px\030\005 \001(\001R\tcent"
  "erXPx\022\036\n\013center_y_px\030\006 \001(\001R\tcenterYPx\"L\n"
  "\024DistortionParameters\022\024\n\005model\030\001 \001(\tR\005mo"
  "del\022\036\n\nparameters\030\002 \003(\001R\nparameters2\233\006\n\r"
  "CameraService\022\225\001\n\010GetImage\022).viam.compon"
  "ent.camera.v1.GetImageRequest\032*.viam.com"
  "ponent.camera.v1.GetImageResponse\"2\202\323\344\223\002"
  ",\022*/viam/api/v1/component/camera/{name}/"
  "image\022\214\001\n\013RenderFrame\022,.viam.component.c"
  "amera.v1.RenderFrameRequest\032\024.google.api"
  ".HttpBody\"9\202\323\344\223\0023\0221/viam/api/v1/componen"
  "t/camera/{name}/render_frame\022\252\001\n\rGetPoin"
  "tCloud\022..viam.component.camera.v1.GetPoi"
  "ntCloudRequest\032/.viam.component.camera.v"
  "1.GetPointCloudResponse\"8\202\323\344\223\0022\0220/viam/a"
  "pi/v1/component/camera/{name}/point_clou"
  "d\022\251\001\n\rGetProperties\022..viam.component.cam"
  "era.v1.GetPropertiesRequest\032/.viam.compo"
  "nent.camera.v1.GetPropertiesResponse\"7\202\323"
  "\344\223\0021\022//viam/api/v1/component/camera/{nam"
  "e}/properties\022\211\001\n\tDoCommand\022 .viam.commo"
  "n.v1.DoCommandRequest\032!.viam.common.v1.D"
  "oCommandResponse\"7\202\323\344\223\0021\"//viam/api/v1/c"
  "omponent/camera/{name}/do_commandBC\n\034com"
  ".viam.component.camera.v1Z#go.viam.com/a"
  "pi/component/camera/v1b\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_deps[3] = {
  &::descriptor_table_common_2fv1_2fcommon_2eproto,
  &::descriptor_table_google_2fapi_2fannotations_2eproto,
  &::descriptor_table_google_2fapi_2fhttpbody_2eproto,
};
static ::_pbi::once_flag descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto = {
    false, false, 2270, descriptor_table_protodef_component_2fcamera_2fv1_2fcamera_2eproto,
    "component/camera/v1/camera.proto",
    &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once, descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_deps, 3, 12,
    schemas, file_default_instances, TableStruct_component_2fcamera_2fv1_2fcamera_2eproto::offsets,
    file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto, file_level_enum_descriptors_component_2fcamera_2fv1_2fcamera_2eproto,
    file_level_service_descriptors_component_2fcamera_2fv1_2fcamera_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter() {
  return &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_component_2fcamera_2fv1_2fcamera_2eproto(&descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto);
namespace viam {
namespace component {
namespace camera {
namespace v1 {

// ===================================================================

class GetImageRequest::_Internal {
 public:
};

GetImageRequest::GetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.GetImageRequest)
}
GetImageRequest::GetImageRequest(const GetImageRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.GetImageRequest)
}

inline void GetImageRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetImageRequest::~GetImageRequest() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.GetImageRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetImageRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  mime_type_.Destroy();
}

void GetImageRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.GetImageRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImageRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetImageRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 2 [json_name = "mimeType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetImageRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetImageRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.GetImageRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetImageRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string mime_type = 2 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetImageRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.GetImageRequest)
  return target;
}

size_t GetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.GetImageRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mime_type = 2 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetImageRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetImageRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetImageRequest::GetClassData() const { return &_class_data_; }

void GetImageRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetImageRequest *>(to)->MergeFrom(
      static_cast<const GetImageRequest &>(from));
}


void GetImageRequest::MergeFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.GetImageRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetImageRequest::CopyFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.GetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageRequest::IsInitialized() const {
  return true;
}

void GetImageRequest::InternalSwap(GetImageRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[0]);
}

// ===================================================================

class GetImageResponse::_Internal {
 public:
};

GetImageResponse::GetImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.GetImageResponse)
}
GetImageResponse::GetImageResponse(const GetImageResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  image_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    image_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_image().empty()) {
    image_.Set(from._internal_image(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.GetImageResponse)
}

inline void GetImageResponse::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
image_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  image_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetImageResponse::~GetImageResponse() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.GetImageResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetImageResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
  image_.Destroy();
}

void GetImageResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.GetImageResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mime_type_.ClearToEmpty();
  image_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetImageResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime_type = 1 [json_name = "mimeType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetImageResponse.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // bytes image = 2 [json_name = "image"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_image();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetImageResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.GetImageResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetImageResponse.mime_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_image(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.GetImageResponse)
  return target;
}

size_t GetImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.GetImageResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // bytes image = 2 [json_name = "image"];
  if (!this->_internal_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetImageResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetImageResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetImageResponse::GetClassData() const { return &_class_data_; }

void GetImageResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetImageResponse *>(to)->MergeFrom(
      static_cast<const GetImageResponse &>(from));
}


void GetImageResponse::MergeFrom(const GetImageResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.GetImageResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_image().empty()) {
    _internal_set_image(from._internal_image());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetImageResponse::CopyFrom(const GetImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.GetImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetImageResponse::IsInitialized() const {
  return true;
}

void GetImageResponse::InternalSwap(GetImageResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &image_, lhs_arena,
      &other->image_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[1]);
}

// ===================================================================

class RenderFrameRequest::_Internal {
 public:
};

RenderFrameRequest::RenderFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.RenderFrameRequest)
}
RenderFrameRequest::RenderFrameRequest(const RenderFrameRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.RenderFrameRequest)
}

inline void RenderFrameRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RenderFrameRequest::~RenderFrameRequest() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.RenderFrameRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void RenderFrameRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  mime_type_.Destroy();
}

void RenderFrameRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RenderFrameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.RenderFrameRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RenderFrameRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.RenderFrameRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 2 [json_name = "mimeType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.RenderFrameRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RenderFrameRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.RenderFrameRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.RenderFrameRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string mime_type = 2 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.RenderFrameRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.RenderFrameRequest)
  return target;
}

size_t RenderFrameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.RenderFrameRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mime_type = 2 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RenderFrameRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RenderFrameRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RenderFrameRequest::GetClassData() const { return &_class_data_; }

void RenderFrameRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RenderFrameRequest *>(to)->MergeFrom(
      static_cast<const RenderFrameRequest &>(from));
}


void RenderFrameRequest::MergeFrom(const RenderFrameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.RenderFrameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RenderFrameRequest::CopyFrom(const RenderFrameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.RenderFrameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenderFrameRequest::IsInitialized() const {
  return true;
}

void RenderFrameRequest::InternalSwap(RenderFrameRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RenderFrameRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[2]);
}

// ===================================================================

class GetPointCloudRequest::_Internal {
 public:
};

GetPointCloudRequest::GetPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.GetPointCloudRequest)
}
GetPointCloudRequest::GetPointCloudRequest(const GetPointCloudRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.GetPointCloudRequest)
}

inline void GetPointCloudRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPointCloudRequest::~GetPointCloudRequest() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.GetPointCloudRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPointCloudRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
  mime_type_.Destroy();
}

void GetPointCloudRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPointCloudRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.GetPointCloudRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  mime_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPointCloudRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetPointCloudRequest.name"));
        } else
          goto handle_unusual;
        continue;
      // string mime_type = 2 [json_name = "mimeType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetPointCloudRequest.mime_type"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPointCloudRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.GetPointCloudRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetPointCloudRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string mime_type = 2 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetPointCloudRequest.mime_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_mime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.GetPointCloudRequest)
  return target;
}

size_t GetPointCloudRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.GetPointCloudRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string mime_type = 2 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPointCloudRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPointCloudRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPointCloudRequest::GetClassData() const { return &_class_data_; }

void GetPointCloudRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPointCloudRequest *>(to)->MergeFrom(
      static_cast<const GetPointCloudRequest &>(from));
}


void GetPointCloudRequest::MergeFrom(const GetPointCloudRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.GetPointCloudRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPointCloudRequest::CopyFrom(const GetPointCloudRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.GetPointCloudRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPointCloudRequest::IsInitialized() const {
  return true;
}

void GetPointCloudRequest::InternalSwap(GetPointCloudRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPointCloudRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[3]);
}

// ===================================================================

class GetPointCloudResponse::_Internal {
 public:
};

GetPointCloudResponse::GetPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.GetPointCloudResponse)
}
GetPointCloudResponse::GetPointCloudResponse(const GetPointCloudResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  mime_type_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    mime_type_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_mime_type().empty()) {
    mime_type_.Set(from._internal_mime_type(), 
      GetArenaForAllocation());
  }
  point_cloud_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    point_cloud_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_point_cloud().empty()) {
    point_cloud_.Set(from._internal_point_cloud(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.GetPointCloudResponse)
}

inline void GetPointCloudResponse::SharedCtor() {
mime_type_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  mime_type_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
point_cloud_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  point_cloud_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPointCloudResponse::~GetPointCloudResponse() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.GetPointCloudResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPointCloudResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  mime_type_.Destroy();
  point_cloud_.Destroy();
}

void GetPointCloudResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPointCloudResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.GetPointCloudResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mime_type_.ClearToEmpty();
  point_cloud_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPointCloudResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string mime_type = 1 [json_name = "mimeType"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_mime_type();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetPointCloudResponse.mime_type"));
        } else
          goto handle_unusual;
        continue;
      // bytes point_cloud = 2 [json_name = "pointCloud"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_point_cloud();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPointCloudResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.GetPointCloudResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_mime_type().data(), static_cast<int>(this->_internal_mime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetPointCloudResponse.mime_type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_mime_type(), target);
  }

  // bytes point_cloud = 2 [json_name = "pointCloud"];
  if (!this->_internal_point_cloud().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_point_cloud(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.GetPointCloudResponse)
  return target;
}

size_t GetPointCloudResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.GetPointCloudResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string mime_type = 1 [json_name = "mimeType"];
  if (!this->_internal_mime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_mime_type());
  }

  // bytes point_cloud = 2 [json_name = "pointCloud"];
  if (!this->_internal_point_cloud().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_point_cloud());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPointCloudResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPointCloudResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPointCloudResponse::GetClassData() const { return &_class_data_; }

void GetPointCloudResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPointCloudResponse *>(to)->MergeFrom(
      static_cast<const GetPointCloudResponse &>(from));
}


void GetPointCloudResponse::MergeFrom(const GetPointCloudResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.GetPointCloudResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_mime_type().empty()) {
    _internal_set_mime_type(from._internal_mime_type());
  }
  if (!from._internal_point_cloud().empty()) {
    _internal_set_point_cloud(from._internal_point_cloud());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPointCloudResponse::CopyFrom(const GetPointCloudResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.GetPointCloudResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPointCloudResponse::IsInitialized() const {
  return true;
}

void GetPointCloudResponse::InternalSwap(GetPointCloudResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &mime_type_, lhs_arena,
      &other->mime_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &point_cloud_, lhs_arena,
      &other->point_cloud_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPointCloudResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[4]);
}

// ===================================================================

class GetPropertiesRequest::_Internal {
 public:
};

GetPropertiesRequest::GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.GetPropertiesRequest)
}
GetPropertiesRequest::GetPropertiesRequest(const GetPropertiesRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.GetPropertiesRequest)
}

inline void GetPropertiesRequest::SharedCtor() {
name_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetPropertiesRequest::~GetPropertiesRequest() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.GetPropertiesRequest)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertiesRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.Destroy();
}

void GetPropertiesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPropertiesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.GetPropertiesRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertiesRequest::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.GetPropertiesRequest.name"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertiesRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.GetPropertiesRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.GetPropertiesRequest.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.GetPropertiesRequest)
  return target;
}

size_t GetPropertiesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.GetPropertiesRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertiesRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPropertiesRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertiesRequest::GetClassData() const { return &_class_data_; }

void GetPropertiesRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPropertiesRequest *>(to)->MergeFrom(
      static_cast<const GetPropertiesRequest &>(from));
}


void GetPropertiesRequest::MergeFrom(const GetPropertiesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.GetPropertiesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertiesRequest::CopyFrom(const GetPropertiesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.GetPropertiesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertiesRequest::IsInitialized() const {
  return true;
}

void GetPropertiesRequest::InternalSwap(GetPropertiesRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertiesRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[5]);
}

// ===================================================================

class GetPropertiesResponse::_Internal {
 public:
  static const ::viam::component::camera::v1::IntrinsicParameters& intrinsic_parameters(const GetPropertiesResponse* msg);
  static const ::viam::component::camera::v1::DistortionParameters& distortion_parameters(const GetPropertiesResponse* msg);
};

const ::viam::component::camera::v1::IntrinsicParameters&
GetPropertiesResponse::_Internal::intrinsic_parameters(const GetPropertiesResponse* msg) {
  return *msg->intrinsic_parameters_;
}
const ::viam::component::camera::v1::DistortionParameters&
GetPropertiesResponse::_Internal::distortion_parameters(const GetPropertiesResponse* msg) {
  return *msg->distortion_parameters_;
}
GetPropertiesResponse::GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.GetPropertiesResponse)
}
GetPropertiesResponse::GetPropertiesResponse(const GetPropertiesResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_intrinsic_parameters()) {
    intrinsic_parameters_ = new ::viam::component::camera::v1::IntrinsicParameters(*from.intrinsic_parameters_);
  } else {
    intrinsic_parameters_ = nullptr;
  }
  if (from._internal_has_distortion_parameters()) {
    distortion_parameters_ = new ::viam::component::camera::v1::DistortionParameters(*from.distortion_parameters_);
  } else {
    distortion_parameters_ = nullptr;
  }
  supports_pcd_ = from.supports_pcd_;
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.GetPropertiesResponse)
}

inline void GetPropertiesResponse::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&intrinsic_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&supports_pcd_) -
    reinterpret_cast<char*>(&intrinsic_parameters_)) + sizeof(supports_pcd_));
}

GetPropertiesResponse::~GetPropertiesResponse() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.GetPropertiesResponse)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void GetPropertiesResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete intrinsic_parameters_;
  if (this != internal_default_instance()) delete distortion_parameters_;
}

void GetPropertiesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPropertiesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.GetPropertiesResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && intrinsic_parameters_ != nullptr) {
    delete intrinsic_parameters_;
  }
  intrinsic_parameters_ = nullptr;
  if (GetArenaForAllocation() == nullptr && distortion_parameters_ != nullptr) {
    delete distortion_parameters_;
  }
  distortion_parameters_ = nullptr;
  supports_pcd_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPropertiesResponse::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool supports_pcd = 1 [json_name = "supportsPcd"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          supports_pcd_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_intrinsic_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_distortion_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetPropertiesResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.GetPropertiesResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool supports_pcd = 1 [json_name = "supportsPcd"];
  if (this->_internal_supports_pcd() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_supports_pcd(), target);
  }

  // .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
  if (this->_internal_has_intrinsic_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::intrinsic_parameters(this),
        _Internal::intrinsic_parameters(this).GetCachedSize(), target, stream);
  }

  // .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
  if (this->_internal_has_distortion_parameters()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::distortion_parameters(this),
        _Internal::distortion_parameters(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.GetPropertiesResponse)
  return target;
}

size_t GetPropertiesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.GetPropertiesResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
  if (this->_internal_has_intrinsic_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *intrinsic_parameters_);
  }

  // .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
  if (this->_internal_has_distortion_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *distortion_parameters_);
  }

  // bool supports_pcd = 1 [json_name = "supportsPcd"];
  if (this->_internal_supports_pcd() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPropertiesResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPropertiesResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPropertiesResponse::GetClassData() const { return &_class_data_; }

void GetPropertiesResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetPropertiesResponse *>(to)->MergeFrom(
      static_cast<const GetPropertiesResponse &>(from));
}


void GetPropertiesResponse::MergeFrom(const GetPropertiesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.GetPropertiesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_intrinsic_parameters()) {
    _internal_mutable_intrinsic_parameters()->::viam::component::camera::v1::IntrinsicParameters::MergeFrom(from._internal_intrinsic_parameters());
  }
  if (from._internal_has_distortion_parameters()) {
    _internal_mutable_distortion_parameters()->::viam::component::camera::v1::DistortionParameters::MergeFrom(from._internal_distortion_parameters());
  }
  if (from._internal_supports_pcd() != 0) {
    _internal_set_supports_pcd(from._internal_supports_pcd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPropertiesResponse::CopyFrom(const GetPropertiesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.GetPropertiesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPropertiesResponse::IsInitialized() const {
  return true;
}

void GetPropertiesResponse::InternalSwap(GetPropertiesResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetPropertiesResponse, supports_pcd_)
      + sizeof(GetPropertiesResponse::supports_pcd_)
      - PROTOBUF_FIELD_OFFSET(GetPropertiesResponse, intrinsic_parameters_)>(
          reinterpret_cast<char*>(&intrinsic_parameters_),
          reinterpret_cast<char*>(&other->intrinsic_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPropertiesResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[6]);
}

// ===================================================================

class Webcams::_Internal {
 public:
};

Webcams::Webcams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  webcams_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.Webcams)
}
Webcams::Webcams(const Webcams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      webcams_(from.webcams_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.Webcams)
}

inline void Webcams::SharedCtor() {
}

Webcams::~Webcams() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.Webcams)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Webcams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Webcams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Webcams::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.Webcams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  webcams_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Webcams::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_webcams(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Webcams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.Webcams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_webcams_size()); i < n; i++) {
    const auto& repfield = this->_internal_webcams(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.Webcams)
  return target;
}

size_t Webcams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.Webcams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
  total_size += 1UL * this->_internal_webcams_size();
  for (const auto& msg : this->webcams_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Webcams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Webcams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Webcams::GetClassData() const { return &_class_data_; }

void Webcams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Webcams *>(to)->MergeFrom(
      static_cast<const Webcams &>(from));
}


void Webcams::MergeFrom(const Webcams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.Webcams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  webcams_.MergeFrom(from.webcams_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Webcams::CopyFrom(const Webcams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.Webcams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Webcams::IsInitialized() const {
  return true;
}

void Webcams::InternalSwap(Webcams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  webcams_.InternalSwap(&other->webcams_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Webcams::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[7]);
}

// ===================================================================

class Webcam::_Internal {
 public:
};

Webcam::Webcam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.Webcam)
}
Webcam::Webcam(const Webcam& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      properties_(from.properties_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  label_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    label_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_label().empty()) {
    label_.Set(from._internal_label(), 
      GetArenaForAllocation());
  }
  status_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.Webcam)
}

inline void Webcam::SharedCtor() {
label_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  label_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
status_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Webcam::~Webcam() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.Webcam)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Webcam::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  label_.Destroy();
  status_.Destroy();
}

void Webcam::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Webcam::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.Webcam)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  label_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Webcam::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string label = 1 [json_name = "label"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_label();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.Webcam.label"));
        } else
          goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.Webcam.status"));
        } else
          goto handle_unusual;
        continue;
      // repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_properties(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Webcam::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.Webcam)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string label = 1 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.Webcam.label");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_label(), target);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.Webcam.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  // repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_properties_size()); i < n; i++) {
    const auto& repfield = this->_internal_properties(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.Webcam)
  return target;
}

size_t Webcam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.Webcam)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
  total_size += 1UL * this->_internal_properties_size();
  for (const auto& msg : this->properties_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string label = 1 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Webcam::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Webcam::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Webcam::GetClassData() const { return &_class_data_; }

void Webcam::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Webcam *>(to)->MergeFrom(
      static_cast<const Webcam &>(from));
}


void Webcam::MergeFrom(const Webcam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.Webcam)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Webcam::CopyFrom(const Webcam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.Webcam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Webcam::IsInitialized() const {
  return true;
}

void Webcam::InternalSwap(Webcam* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &label_, lhs_arena,
      &other->label_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Webcam::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[8]);
}

// ===================================================================

class Property::_Internal {
 public:
};

Property::Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.Property)
}
Property::Property(const Property& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  frame_format_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    frame_format_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_frame_format().empty()) {
    frame_format_.Set(from._internal_frame_format(), 
      GetArenaForAllocation());
  }
  ::memcpy(&width_px_, &from.width_px_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_px_) -
    reinterpret_cast<char*>(&width_px_)) + sizeof(height_px_));
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.Property)
}

inline void Property::SharedCtor() {
frame_format_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  frame_format_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_px_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&height_px_) -
    reinterpret_cast<char*>(&width_px_)) + sizeof(height_px_));
}

Property::~Property() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.Property)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void Property::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  frame_format_.Destroy();
}

void Property::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Property::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.Property)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  frame_format_.ClearToEmpty();
  ::memset(&width_px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_px_) -
      reinterpret_cast<char*>(&width_px_)) + sizeof(height_px_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Property::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 width_px = 1 [json_name = "widthPx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height_px = 2 [json_name = "heightPx"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string frame_format = 3 [json_name = "frameFormat"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_frame_format();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.Property.frame_format"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Property::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.Property)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 width_px = 1 [json_name = "widthPx"];
  if (this->_internal_width_px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_width_px(), target);
  }

  // int32 height_px = 2 [json_name = "heightPx"];
  if (this->_internal_height_px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_height_px(), target);
  }

  // string frame_format = 3 [json_name = "frameFormat"];
  if (!this->_internal_frame_format().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_frame_format().data(), static_cast<int>(this->_internal_frame_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.Property.frame_format");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_frame_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.Property)
  return target;
}

size_t Property::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.Property)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string frame_format = 3 [json_name = "frameFormat"];
  if (!this->_internal_frame_format().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_frame_format());
  }

  // int32 width_px = 1 [json_name = "widthPx"];
  if (this->_internal_width_px() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_width_px());
  }

  // int32 height_px = 2 [json_name = "heightPx"];
  if (this->_internal_height_px() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_height_px());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Property::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Property::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Property::GetClassData() const { return &_class_data_; }

void Property::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Property *>(to)->MergeFrom(
      static_cast<const Property &>(from));
}


void Property::MergeFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.Property)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_frame_format().empty()) {
    _internal_set_frame_format(from._internal_frame_format());
  }
  if (from._internal_width_px() != 0) {
    _internal_set_width_px(from._internal_width_px());
  }
  if (from._internal_height_px() != 0) {
    _internal_set_height_px(from._internal_height_px());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Property::CopyFrom(const Property& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.Property)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Property::IsInitialized() const {
  return true;
}

void Property::InternalSwap(Property* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &frame_format_, lhs_arena,
      &other->frame_format_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Property, height_px_)
      + sizeof(Property::height_px_)
      - PROTOBUF_FIELD_OFFSET(Property, width_px_)>(
          reinterpret_cast<char*>(&width_px_),
          reinterpret_cast<char*>(&other->width_px_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Property::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[9]);
}

// ===================================================================

class IntrinsicParameters::_Internal {
 public:
};

IntrinsicParameters::IntrinsicParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.IntrinsicParameters)
}
IntrinsicParameters::IntrinsicParameters(const IntrinsicParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_px_, &from.width_px_,
    static_cast<size_t>(reinterpret_cast<char*>(&center_y_px_) -
    reinterpret_cast<char*>(&width_px_)) + sizeof(center_y_px_));
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.IntrinsicParameters)
}

inline void IntrinsicParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&width_px_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&center_y_px_) -
    reinterpret_cast<char*>(&width_px_)) + sizeof(center_y_px_));
}

IntrinsicParameters::~IntrinsicParameters() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.IntrinsicParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void IntrinsicParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void IntrinsicParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntrinsicParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.IntrinsicParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&width_px_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&center_y_px_) -
      reinterpret_cast<char*>(&width_px_)) + sizeof(center_y_px_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntrinsicParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 width_px = 1 [json_name = "widthPx"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          width_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 height_px = 2 [json_name = "heightPx"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          height_px_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double focal_x_px = 3 [json_name = "focalXPx"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          focal_x_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double focal_y_px = 4 [json_name = "focalYPx"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          focal_y_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double center_x_px = 5 [json_name = "centerXPx"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          center_x_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double center_y_px = 6 [json_name = "centerYPx"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          center_y_px_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IntrinsicParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.IntrinsicParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 width_px = 1 [json_name = "widthPx"];
  if (this->_internal_width_px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width_px(), target);
  }

  // uint32 height_px = 2 [json_name = "heightPx"];
  if (this->_internal_height_px() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height_px(), target);
  }

  // double focal_x_px = 3 [json_name = "focalXPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_focal_x_px = this->_internal_focal_x_px();
  uint64_t raw_focal_x_px;
  memcpy(&raw_focal_x_px, &tmp_focal_x_px, sizeof(tmp_focal_x_px));
  if (raw_focal_x_px != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(3, this->_internal_focal_x_px(), target);
  }

  // double focal_y_px = 4 [json_name = "focalYPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_focal_y_px = this->_internal_focal_y_px();
  uint64_t raw_focal_y_px;
  memcpy(&raw_focal_y_px, &tmp_focal_y_px, sizeof(tmp_focal_y_px));
  if (raw_focal_y_px != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(4, this->_internal_focal_y_px(), target);
  }

  // double center_x_px = 5 [json_name = "centerXPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_center_x_px = this->_internal_center_x_px();
  uint64_t raw_center_x_px;
  memcpy(&raw_center_x_px, &tmp_center_x_px, sizeof(tmp_center_x_px));
  if (raw_center_x_px != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(5, this->_internal_center_x_px(), target);
  }

  // double center_y_px = 6 [json_name = "centerYPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_center_y_px = this->_internal_center_y_px();
  uint64_t raw_center_y_px;
  memcpy(&raw_center_y_px, &tmp_center_y_px, sizeof(tmp_center_y_px));
  if (raw_center_y_px != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteDoubleToArray(6, this->_internal_center_y_px(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.IntrinsicParameters)
  return target;
}

size_t IntrinsicParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.IntrinsicParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 width_px = 1 [json_name = "widthPx"];
  if (this->_internal_width_px() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_width_px());
  }

  // uint32 height_px = 2 [json_name = "heightPx"];
  if (this->_internal_height_px() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_height_px());
  }

  // double focal_x_px = 3 [json_name = "focalXPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_focal_x_px = this->_internal_focal_x_px();
  uint64_t raw_focal_x_px;
  memcpy(&raw_focal_x_px, &tmp_focal_x_px, sizeof(tmp_focal_x_px));
  if (raw_focal_x_px != 0) {
    total_size += 1 + 8;
  }

  // double focal_y_px = 4 [json_name = "focalYPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_focal_y_px = this->_internal_focal_y_px();
  uint64_t raw_focal_y_px;
  memcpy(&raw_focal_y_px, &tmp_focal_y_px, sizeof(tmp_focal_y_px));
  if (raw_focal_y_px != 0) {
    total_size += 1 + 8;
  }

  // double center_x_px = 5 [json_name = "centerXPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_center_x_px = this->_internal_center_x_px();
  uint64_t raw_center_x_px;
  memcpy(&raw_center_x_px, &tmp_center_x_px, sizeof(tmp_center_x_px));
  if (raw_center_x_px != 0) {
    total_size += 1 + 8;
  }

  // double center_y_px = 6 [json_name = "centerYPx"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_center_y_px = this->_internal_center_y_px();
  uint64_t raw_center_y_px;
  memcpy(&raw_center_y_px, &tmp_center_y_px, sizeof(tmp_center_y_px));
  if (raw_center_y_px != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntrinsicParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntrinsicParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntrinsicParameters::GetClassData() const { return &_class_data_; }

void IntrinsicParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IntrinsicParameters *>(to)->MergeFrom(
      static_cast<const IntrinsicParameters &>(from));
}


void IntrinsicParameters::MergeFrom(const IntrinsicParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.IntrinsicParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_width_px() != 0) {
    _internal_set_width_px(from._internal_width_px());
  }
  if (from._internal_height_px() != 0) {
    _internal_set_height_px(from._internal_height_px());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_focal_x_px = from._internal_focal_x_px();
  uint64_t raw_focal_x_px;
  memcpy(&raw_focal_x_px, &tmp_focal_x_px, sizeof(tmp_focal_x_px));
  if (raw_focal_x_px != 0) {
    _internal_set_focal_x_px(from._internal_focal_x_px());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_focal_y_px = from._internal_focal_y_px();
  uint64_t raw_focal_y_px;
  memcpy(&raw_focal_y_px, &tmp_focal_y_px, sizeof(tmp_focal_y_px));
  if (raw_focal_y_px != 0) {
    _internal_set_focal_y_px(from._internal_focal_y_px());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_center_x_px = from._internal_center_x_px();
  uint64_t raw_center_x_px;
  memcpy(&raw_center_x_px, &tmp_center_x_px, sizeof(tmp_center_x_px));
  if (raw_center_x_px != 0) {
    _internal_set_center_x_px(from._internal_center_x_px());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_center_y_px = from._internal_center_y_px();
  uint64_t raw_center_y_px;
  memcpy(&raw_center_y_px, &tmp_center_y_px, sizeof(tmp_center_y_px));
  if (raw_center_y_px != 0) {
    _internal_set_center_y_px(from._internal_center_y_px());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntrinsicParameters::CopyFrom(const IntrinsicParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.IntrinsicParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntrinsicParameters::IsInitialized() const {
  return true;
}

void IntrinsicParameters::InternalSwap(IntrinsicParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IntrinsicParameters, center_y_px_)
      + sizeof(IntrinsicParameters::center_y_px_)
      - PROTOBUF_FIELD_OFFSET(IntrinsicParameters, width_px_)>(
          reinterpret_cast<char*>(&width_px_),
          reinterpret_cast<char*>(&other->width_px_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IntrinsicParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[10]);
}

// ===================================================================

class DistortionParameters::_Internal {
 public:
};

DistortionParameters::DistortionParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  parameters_(arena) {
  SharedCtor();
  // @@protoc_insertion_point(arena_constructor:viam.component.camera.v1.DistortionParameters)
}
DistortionParameters::DistortionParameters(const DistortionParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parameters_(from.parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  model_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(from._internal_model(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:viam.component.camera.v1.DistortionParameters)
}

inline void DistortionParameters::SharedCtor() {
model_.InitDefault();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set("", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

DistortionParameters::~DistortionParameters() {
  // @@protoc_insertion_point(destructor:viam.component.camera.v1.DistortionParameters)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void DistortionParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  model_.Destroy();
}

void DistortionParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DistortionParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:viam.component.camera.v1.DistortionParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parameters_.Clear();
  model_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DistortionParameters::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string model = 1 [json_name = "model"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_model();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "viam.component.camera.v1.DistortionParameters.model"));
        } else
          goto handle_unusual;
        continue;
      // repeated double parameters = 2 [json_name = "parameters"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_parameters(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 17) {
          _internal_add_parameters(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DistortionParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:viam.component.camera.v1.DistortionParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string model = 1 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "viam.component.camera.v1.DistortionParameters.model");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_model(), target);
  }

  // repeated double parameters = 2 [json_name = "parameters"];
  if (this->_internal_parameters_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_parameters(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:viam.component.camera.v1.DistortionParameters)
  return target;
}

size_t DistortionParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:viam.component.camera.v1.DistortionParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double parameters = 2 [json_name = "parameters"];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_parameters_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    total_size += data_size;
  }

  // string model = 1 [json_name = "model"];
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DistortionParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DistortionParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DistortionParameters::GetClassData() const { return &_class_data_; }

void DistortionParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DistortionParameters *>(to)->MergeFrom(
      static_cast<const DistortionParameters &>(from));
}


void DistortionParameters::MergeFrom(const DistortionParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:viam.component.camera.v1.DistortionParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  parameters_.MergeFrom(from.parameters_);
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DistortionParameters::CopyFrom(const DistortionParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:viam.component.camera.v1.DistortionParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DistortionParameters::IsInitialized() const {
  return true;
}

void DistortionParameters::InternalSwap(DistortionParameters* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  parameters_.InternalSwap(&other->parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DistortionParameters::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_getter, &descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto_once,
      file_level_metadata_component_2fcamera_2fv1_2fcamera_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace camera
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::GetImageRequest*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::GetImageRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::GetImageRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::GetImageResponse*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::GetImageResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::GetImageResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::RenderFrameRequest*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::RenderFrameRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::RenderFrameRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::GetPointCloudRequest*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::GetPointCloudRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::GetPointCloudRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::GetPointCloudResponse*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::GetPointCloudResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::GetPointCloudResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::GetPropertiesRequest*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::GetPropertiesRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::GetPropertiesRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::GetPropertiesResponse*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::GetPropertiesResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::GetPropertiesResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::Webcams*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::Webcams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::Webcams >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::Webcam*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::Webcam >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::Webcam >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::Property*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::Property >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::Property >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::IntrinsicParameters*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::IntrinsicParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::IntrinsicParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::viam::component::camera::v1::DistortionParameters*
Arena::CreateMaybeMessage< ::viam::component::camera::v1::DistortionParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::viam::component::camera::v1::DistortionParameters >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
