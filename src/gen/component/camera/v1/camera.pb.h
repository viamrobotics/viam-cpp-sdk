// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/camera/v1/camera.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2fcamera_2fv1_2fcamera_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2fcamera_2fv1_2fcamera_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include "google/api/httpbody.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2fcamera_2fv1_2fcamera_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2fcamera_2fv1_2fcamera_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2fcamera_2fv1_2fcamera_2eproto;
namespace viam {
namespace component {
namespace camera {
namespace v1 {
class DistortionParameters;
struct DistortionParametersDefaultTypeInternal;
extern DistortionParametersDefaultTypeInternal _DistortionParameters_default_instance_;
class GetImageRequest;
struct GetImageRequestDefaultTypeInternal;
extern GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
class GetImageResponse;
struct GetImageResponseDefaultTypeInternal;
extern GetImageResponseDefaultTypeInternal _GetImageResponse_default_instance_;
class GetPointCloudRequest;
struct GetPointCloudRequestDefaultTypeInternal;
extern GetPointCloudRequestDefaultTypeInternal _GetPointCloudRequest_default_instance_;
class GetPointCloudResponse;
struct GetPointCloudResponseDefaultTypeInternal;
extern GetPointCloudResponseDefaultTypeInternal _GetPointCloudResponse_default_instance_;
class GetPropertiesRequest;
struct GetPropertiesRequestDefaultTypeInternal;
extern GetPropertiesRequestDefaultTypeInternal _GetPropertiesRequest_default_instance_;
class GetPropertiesResponse;
struct GetPropertiesResponseDefaultTypeInternal;
extern GetPropertiesResponseDefaultTypeInternal _GetPropertiesResponse_default_instance_;
class IntrinsicParameters;
struct IntrinsicParametersDefaultTypeInternal;
extern IntrinsicParametersDefaultTypeInternal _IntrinsicParameters_default_instance_;
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class RenderFrameRequest;
struct RenderFrameRequestDefaultTypeInternal;
extern RenderFrameRequestDefaultTypeInternal _RenderFrameRequest_default_instance_;
class Webcam;
struct WebcamDefaultTypeInternal;
extern WebcamDefaultTypeInternal _Webcam_default_instance_;
class Webcams;
struct WebcamsDefaultTypeInternal;
extern WebcamsDefaultTypeInternal _Webcams_default_instance_;
}  // namespace v1
}  // namespace camera
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::camera::v1::DistortionParameters* Arena::CreateMaybeMessage<::viam::component::camera::v1::DistortionParameters>(Arena*);
template<> ::viam::component::camera::v1::GetImageRequest* Arena::CreateMaybeMessage<::viam::component::camera::v1::GetImageRequest>(Arena*);
template<> ::viam::component::camera::v1::GetImageResponse* Arena::CreateMaybeMessage<::viam::component::camera::v1::GetImageResponse>(Arena*);
template<> ::viam::component::camera::v1::GetPointCloudRequest* Arena::CreateMaybeMessage<::viam::component::camera::v1::GetPointCloudRequest>(Arena*);
template<> ::viam::component::camera::v1::GetPointCloudResponse* Arena::CreateMaybeMessage<::viam::component::camera::v1::GetPointCloudResponse>(Arena*);
template<> ::viam::component::camera::v1::GetPropertiesRequest* Arena::CreateMaybeMessage<::viam::component::camera::v1::GetPropertiesRequest>(Arena*);
template<> ::viam::component::camera::v1::GetPropertiesResponse* Arena::CreateMaybeMessage<::viam::component::camera::v1::GetPropertiesResponse>(Arena*);
template<> ::viam::component::camera::v1::IntrinsicParameters* Arena::CreateMaybeMessage<::viam::component::camera::v1::IntrinsicParameters>(Arena*);
template<> ::viam::component::camera::v1::Property* Arena::CreateMaybeMessage<::viam::component::camera::v1::Property>(Arena*);
template<> ::viam::component::camera::v1::RenderFrameRequest* Arena::CreateMaybeMessage<::viam::component::camera::v1::RenderFrameRequest>(Arena*);
template<> ::viam::component::camera::v1::Webcam* Arena::CreateMaybeMessage<::viam::component::camera::v1::Webcam>(Arena*);
template<> ::viam::component::camera::v1::Webcams* Arena::CreateMaybeMessage<::viam::component::camera::v1::Webcams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace camera {
namespace v1 {

// ===================================================================

class GetImageRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetImageRequest) */ {
 public:
  inline GetImageRequest() : GetImageRequest(nullptr) {}
  ~GetImageRequest() override;
  explicit PROTOBUF_CONSTEXPR GetImageRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImageRequest(const GetImageRequest& from);
  GetImageRequest(GetImageRequest&& from) noexcept
    : GetImageRequest() {
    *this = ::std::move(from);
  }

  inline GetImageRequest& operator=(const GetImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageRequest& operator=(GetImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageRequest* internal_default_instance() {
    return reinterpret_cast<const GetImageRequest*>(
               &_GetImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetImageRequest& a, GetImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImageRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImageRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetImageRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.GetImageRequest";
  }
  protected:
  explicit GetImageRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetImageRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetImageResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetImageResponse) */ {
 public:
  inline GetImageResponse() : GetImageResponse(nullptr) {}
  ~GetImageResponse() override;
  explicit PROTOBUF_CONSTEXPR GetImageResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetImageResponse(const GetImageResponse& from);
  GetImageResponse(GetImageResponse&& from) noexcept
    : GetImageResponse() {
    *this = ::std::move(from);
  }

  inline GetImageResponse& operator=(const GetImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetImageResponse& operator=(GetImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetImageResponse* internal_default_instance() {
    return reinterpret_cast<const GetImageResponse*>(
               &_GetImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetImageResponse& a, GetImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetImageResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetImageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetImageResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetImageResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetImageResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetImageResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.GetImageResponse";
  }
  protected:
  explicit GetImageResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kImageFieldNumber = 2,
  };
  // string mime_type = 1 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // bytes image = 2 [json_name = "image"];
  void clear_image();
  const std::string& image() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_image(ArgT0&& arg0, ArgT... args);
  std::string* mutable_image();
  PROTOBUF_NODISCARD std::string* release_image();
  void set_allocated_image(std::string* image);
  private:
  const std::string& _internal_image() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image(const std::string& value);
  std::string* _internal_mutable_image();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetImageResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class RenderFrameRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.RenderFrameRequest) */ {
 public:
  inline RenderFrameRequest() : RenderFrameRequest(nullptr) {}
  ~RenderFrameRequest() override;
  explicit PROTOBUF_CONSTEXPR RenderFrameRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RenderFrameRequest(const RenderFrameRequest& from);
  RenderFrameRequest(RenderFrameRequest&& from) noexcept
    : RenderFrameRequest() {
    *this = ::std::move(from);
  }

  inline RenderFrameRequest& operator=(const RenderFrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RenderFrameRequest& operator=(RenderFrameRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RenderFrameRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RenderFrameRequest* internal_default_instance() {
    return reinterpret_cast<const RenderFrameRequest*>(
               &_RenderFrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RenderFrameRequest& a, RenderFrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RenderFrameRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RenderFrameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RenderFrameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RenderFrameRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RenderFrameRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RenderFrameRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RenderFrameRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.RenderFrameRequest";
  }
  protected:
  explicit RenderFrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.RenderFrameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPointCloudRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPointCloudRequest) */ {
 public:
  inline GetPointCloudRequest() : GetPointCloudRequest(nullptr) {}
  ~GetPointCloudRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPointCloudRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPointCloudRequest(const GetPointCloudRequest& from);
  GetPointCloudRequest(GetPointCloudRequest&& from) noexcept
    : GetPointCloudRequest() {
    *this = ::std::move(from);
  }

  inline GetPointCloudRequest& operator=(const GetPointCloudRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudRequest& operator=(GetPointCloudRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudRequest* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudRequest*>(
               &_GetPointCloudRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPointCloudRequest& a, GetPointCloudRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPointCloudRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPointCloudRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPointCloudRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.GetPointCloudRequest";
  }
  protected:
  explicit GetPointCloudRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMimeTypeFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string mime_type = 2 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPointCloudRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPointCloudResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPointCloudResponse) */ {
 public:
  inline GetPointCloudResponse() : GetPointCloudResponse(nullptr) {}
  ~GetPointCloudResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPointCloudResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPointCloudResponse(const GetPointCloudResponse& from);
  GetPointCloudResponse(GetPointCloudResponse&& from) noexcept
    : GetPointCloudResponse() {
    *this = ::std::move(from);
  }

  inline GetPointCloudResponse& operator=(const GetPointCloudResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPointCloudResponse& operator=(GetPointCloudResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPointCloudResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPointCloudResponse* internal_default_instance() {
    return reinterpret_cast<const GetPointCloudResponse*>(
               &_GetPointCloudResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPointCloudResponse& a, GetPointCloudResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPointCloudResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPointCloudResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPointCloudResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPointCloudResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPointCloudResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPointCloudResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPointCloudResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.GetPointCloudResponse";
  }
  protected:
  explicit GetPointCloudResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMimeTypeFieldNumber = 1,
    kPointCloudFieldNumber = 2,
  };
  // string mime_type = 1 [json_name = "mimeType"];
  void clear_mime_type();
  const std::string& mime_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mime_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mime_type();
  PROTOBUF_NODISCARD std::string* release_mime_type();
  void set_allocated_mime_type(std::string* mime_type);
  private:
  const std::string& _internal_mime_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mime_type(const std::string& value);
  std::string* _internal_mutable_mime_type();
  public:

  // bytes point_cloud = 2 [json_name = "pointCloud"];
  void clear_point_cloud();
  const std::string& point_cloud() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_point_cloud(ArgT0&& arg0, ArgT... args);
  std::string* mutable_point_cloud();
  PROTOBUF_NODISCARD std::string* release_point_cloud();
  void set_allocated_point_cloud(std::string* point_cloud);
  private:
  const std::string& _internal_point_cloud() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_point_cloud(const std::string& value);
  std::string* _internal_mutable_point_cloud();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPointCloudResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mime_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr point_cloud_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPropertiesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPropertiesRequest) */ {
 public:
  inline GetPropertiesRequest() : GetPropertiesRequest(nullptr) {}
  ~GetPropertiesRequest() override;
  explicit PROTOBUF_CONSTEXPR GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertiesRequest(const GetPropertiesRequest& from);
  GetPropertiesRequest(GetPropertiesRequest&& from) noexcept
    : GetPropertiesRequest() {
    *this = ::std::move(from);
  }

  inline GetPropertiesRequest& operator=(const GetPropertiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesRequest& operator=(GetPropertiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesRequest*>(
               &_GetPropertiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPropertiesRequest& a, GetPropertiesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertiesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPropertiesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertiesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.GetPropertiesRequest";
  }
  protected:
  explicit GetPropertiesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPropertiesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class GetPropertiesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.GetPropertiesResponse) */ {
 public:
  inline GetPropertiesResponse() : GetPropertiesResponse(nullptr) {}
  ~GetPropertiesResponse() override;
  explicit PROTOBUF_CONSTEXPR GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPropertiesResponse(const GetPropertiesResponse& from);
  GetPropertiesResponse(GetPropertiesResponse&& from) noexcept
    : GetPropertiesResponse() {
    *this = ::std::move(from);
  }

  inline GetPropertiesResponse& operator=(const GetPropertiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPropertiesResponse& operator=(GetPropertiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPropertiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPropertiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetPropertiesResponse*>(
               &_GetPropertiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPropertiesResponse& a, GetPropertiesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPropertiesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPropertiesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPropertiesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPropertiesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPropertiesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPropertiesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPropertiesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.GetPropertiesResponse";
  }
  protected:
  explicit GetPropertiesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntrinsicParametersFieldNumber = 2,
    kDistortionParametersFieldNumber = 3,
    kSupportsPcdFieldNumber = 1,
  };
  // .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
  bool has_intrinsic_parameters() const;
  private:
  bool _internal_has_intrinsic_parameters() const;
  public:
  void clear_intrinsic_parameters();
  const ::viam::component::camera::v1::IntrinsicParameters& intrinsic_parameters() const;
  PROTOBUF_NODISCARD ::viam::component::camera::v1::IntrinsicParameters* release_intrinsic_parameters();
  ::viam::component::camera::v1::IntrinsicParameters* mutable_intrinsic_parameters();
  void set_allocated_intrinsic_parameters(::viam::component::camera::v1::IntrinsicParameters* intrinsic_parameters);
  private:
  const ::viam::component::camera::v1::IntrinsicParameters& _internal_intrinsic_parameters() const;
  ::viam::component::camera::v1::IntrinsicParameters* _internal_mutable_intrinsic_parameters();
  public:
  void unsafe_arena_set_allocated_intrinsic_parameters(
      ::viam::component::camera::v1::IntrinsicParameters* intrinsic_parameters);
  ::viam::component::camera::v1::IntrinsicParameters* unsafe_arena_release_intrinsic_parameters();

  // .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
  bool has_distortion_parameters() const;
  private:
  bool _internal_has_distortion_parameters() const;
  public:
  void clear_distortion_parameters();
  const ::viam::component::camera::v1::DistortionParameters& distortion_parameters() const;
  PROTOBUF_NODISCARD ::viam::component::camera::v1::DistortionParameters* release_distortion_parameters();
  ::viam::component::camera::v1::DistortionParameters* mutable_distortion_parameters();
  void set_allocated_distortion_parameters(::viam::component::camera::v1::DistortionParameters* distortion_parameters);
  private:
  const ::viam::component::camera::v1::DistortionParameters& _internal_distortion_parameters() const;
  ::viam::component::camera::v1::DistortionParameters* _internal_mutable_distortion_parameters();
  public:
  void unsafe_arena_set_allocated_distortion_parameters(
      ::viam::component::camera::v1::DistortionParameters* distortion_parameters);
  ::viam::component::camera::v1::DistortionParameters* unsafe_arena_release_distortion_parameters();

  // bool supports_pcd = 1 [json_name = "supportsPcd"];
  void clear_supports_pcd();
  bool supports_pcd() const;
  void set_supports_pcd(bool value);
  private:
  bool _internal_supports_pcd() const;
  void _internal_set_supports_pcd(bool value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.GetPropertiesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::component::camera::v1::IntrinsicParameters* intrinsic_parameters_;
  ::viam::component::camera::v1::DistortionParameters* distortion_parameters_;
  bool supports_pcd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Webcams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Webcams) */ {
 public:
  inline Webcams() : Webcams(nullptr) {}
  ~Webcams() override;
  explicit PROTOBUF_CONSTEXPR Webcams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Webcams(const Webcams& from);
  Webcams(Webcams&& from) noexcept
    : Webcams() {
    *this = ::std::move(from);
  }

  inline Webcams& operator=(const Webcams& from) {
    CopyFrom(from);
    return *this;
  }
  inline Webcams& operator=(Webcams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Webcams& default_instance() {
    return *internal_default_instance();
  }
  static inline const Webcams* internal_default_instance() {
    return reinterpret_cast<const Webcams*>(
               &_Webcams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Webcams& a, Webcams& b) {
    a.Swap(&b);
  }
  inline void Swap(Webcams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Webcams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Webcams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Webcams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Webcams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Webcams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Webcams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.Webcams";
  }
  protected:
  explicit Webcams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWebcamsFieldNumber = 1,
  };
  // repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
  int webcams_size() const;
  private:
  int _internal_webcams_size() const;
  public:
  void clear_webcams();
  ::viam::component::camera::v1::Webcam* mutable_webcams(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Webcam >*
      mutable_webcams();
  private:
  const ::viam::component::camera::v1::Webcam& _internal_webcams(int index) const;
  ::viam::component::camera::v1::Webcam* _internal_add_webcams();
  public:
  const ::viam::component::camera::v1::Webcam& webcams(int index) const;
  ::viam::component::camera::v1::Webcam* add_webcams();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Webcam >&
      webcams() const;

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Webcams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Webcam > webcams_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Webcam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Webcam) */ {
 public:
  inline Webcam() : Webcam(nullptr) {}
  ~Webcam() override;
  explicit PROTOBUF_CONSTEXPR Webcam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Webcam(const Webcam& from);
  Webcam(Webcam&& from) noexcept
    : Webcam() {
    *this = ::std::move(from);
  }

  inline Webcam& operator=(const Webcam& from) {
    CopyFrom(from);
    return *this;
  }
  inline Webcam& operator=(Webcam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Webcam& default_instance() {
    return *internal_default_instance();
  }
  static inline const Webcam* internal_default_instance() {
    return reinterpret_cast<const Webcam*>(
               &_Webcam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Webcam& a, Webcam& b) {
    a.Swap(&b);
  }
  inline void Swap(Webcam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Webcam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Webcam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Webcam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Webcam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Webcam& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Webcam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.Webcam";
  }
  protected:
  explicit Webcam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 3,
    kLabelFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  ::viam::component::camera::v1::Property* mutable_properties(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Property >*
      mutable_properties();
  private:
  const ::viam::component::camera::v1::Property& _internal_properties(int index) const;
  ::viam::component::camera::v1::Property* _internal_add_properties();
  public:
  const ::viam::component::camera::v1::Property& properties(int index) const;
  ::viam::component::camera::v1::Property* add_properties();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Property >&
      properties() const;

  // string label = 1 [json_name = "label"];
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_NODISCARD std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Webcam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Property > properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class Property final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() override;
  explicit PROTOBUF_CONSTEXPR Property(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Property(const Property& from);
  Property(Property&& from) noexcept
    : Property() {
    *this = ::std::move(from);
  }

  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
               &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Property& a, Property& b) {
    a.Swap(&b);
  }
  inline void Swap(Property* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Property>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Property& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Property* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.Property";
  }
  protected:
  explicit Property(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFrameFormatFieldNumber = 3,
    kWidthPxFieldNumber = 1,
    kHeightPxFieldNumber = 2,
  };
  // string frame_format = 3 [json_name = "frameFormat"];
  void clear_frame_format();
  const std::string& frame_format() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_frame_format(ArgT0&& arg0, ArgT... args);
  std::string* mutable_frame_format();
  PROTOBUF_NODISCARD std::string* release_frame_format();
  void set_allocated_frame_format(std::string* frame_format);
  private:
  const std::string& _internal_frame_format() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_frame_format(const std::string& value);
  std::string* _internal_mutable_frame_format();
  public:

  // int32 width_px = 1 [json_name = "widthPx"];
  void clear_width_px();
  int32_t width_px() const;
  void set_width_px(int32_t value);
  private:
  int32_t _internal_width_px() const;
  void _internal_set_width_px(int32_t value);
  public:

  // int32 height_px = 2 [json_name = "heightPx"];
  void clear_height_px();
  int32_t height_px() const;
  void set_height_px(int32_t value);
  private:
  int32_t _internal_height_px() const;
  void _internal_set_height_px(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.Property)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr frame_format_;
  int32_t width_px_;
  int32_t height_px_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class IntrinsicParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.IntrinsicParameters) */ {
 public:
  inline IntrinsicParameters() : IntrinsicParameters(nullptr) {}
  ~IntrinsicParameters() override;
  explicit PROTOBUF_CONSTEXPR IntrinsicParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntrinsicParameters(const IntrinsicParameters& from);
  IntrinsicParameters(IntrinsicParameters&& from) noexcept
    : IntrinsicParameters() {
    *this = ::std::move(from);
  }

  inline IntrinsicParameters& operator=(const IntrinsicParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntrinsicParameters& operator=(IntrinsicParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntrinsicParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntrinsicParameters* internal_default_instance() {
    return reinterpret_cast<const IntrinsicParameters*>(
               &_IntrinsicParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(IntrinsicParameters& a, IntrinsicParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(IntrinsicParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntrinsicParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  IntrinsicParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<IntrinsicParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntrinsicParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntrinsicParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntrinsicParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.IntrinsicParameters";
  }
  protected:
  explicit IntrinsicParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidthPxFieldNumber = 1,
    kHeightPxFieldNumber = 2,
    kFocalXPxFieldNumber = 3,
    kFocalYPxFieldNumber = 4,
    kCenterXPxFieldNumber = 5,
    kCenterYPxFieldNumber = 6,
  };
  // uint32 width_px = 1 [json_name = "widthPx"];
  void clear_width_px();
  uint32_t width_px() const;
  void set_width_px(uint32_t value);
  private:
  uint32_t _internal_width_px() const;
  void _internal_set_width_px(uint32_t value);
  public:

  // uint32 height_px = 2 [json_name = "heightPx"];
  void clear_height_px();
  uint32_t height_px() const;
  void set_height_px(uint32_t value);
  private:
  uint32_t _internal_height_px() const;
  void _internal_set_height_px(uint32_t value);
  public:

  // double focal_x_px = 3 [json_name = "focalXPx"];
  void clear_focal_x_px();
  double focal_x_px() const;
  void set_focal_x_px(double value);
  private:
  double _internal_focal_x_px() const;
  void _internal_set_focal_x_px(double value);
  public:

  // double focal_y_px = 4 [json_name = "focalYPx"];
  void clear_focal_y_px();
  double focal_y_px() const;
  void set_focal_y_px(double value);
  private:
  double _internal_focal_y_px() const;
  void _internal_set_focal_y_px(double value);
  public:

  // double center_x_px = 5 [json_name = "centerXPx"];
  void clear_center_x_px();
  double center_x_px() const;
  void set_center_x_px(double value);
  private:
  double _internal_center_x_px() const;
  void _internal_set_center_x_px(double value);
  public:

  // double center_y_px = 6 [json_name = "centerYPx"];
  void clear_center_y_px();
  double center_y_px() const;
  void set_center_y_px(double value);
  private:
  double _internal_center_y_px() const;
  void _internal_set_center_y_px(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.IntrinsicParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t width_px_;
  uint32_t height_px_;
  double focal_x_px_;
  double focal_y_px_;
  double center_x_px_;
  double center_y_px_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// -------------------------------------------------------------------

class DistortionParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.camera.v1.DistortionParameters) */ {
 public:
  inline DistortionParameters() : DistortionParameters(nullptr) {}
  ~DistortionParameters() override;
  explicit PROTOBUF_CONSTEXPR DistortionParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DistortionParameters(const DistortionParameters& from);
  DistortionParameters(DistortionParameters&& from) noexcept
    : DistortionParameters() {
    *this = ::std::move(from);
  }

  inline DistortionParameters& operator=(const DistortionParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline DistortionParameters& operator=(DistortionParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DistortionParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const DistortionParameters* internal_default_instance() {
    return reinterpret_cast<const DistortionParameters*>(
               &_DistortionParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DistortionParameters& a, DistortionParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(DistortionParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DistortionParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DistortionParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DistortionParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DistortionParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DistortionParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DistortionParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.camera.v1.DistortionParameters";
  }
  protected:
  explicit DistortionParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParametersFieldNumber = 2,
    kModelFieldNumber = 1,
  };
  // repeated double parameters = 2 [json_name = "parameters"];
  int parameters_size() const;
  private:
  int _internal_parameters_size() const;
  public:
  void clear_parameters();
  private:
  double _internal_parameters(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_parameters() const;
  void _internal_add_parameters(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_parameters();
  public:
  double parameters(int index) const;
  void set_parameters(int index, double value);
  void add_parameters(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      parameters() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_parameters();

  // string model = 1 [json_name = "model"];
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.camera.v1.DistortionParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2fcamera_2fv1_2fcamera_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetImageRequest

// string name = 1 [json_name = "name"];
inline void GetImageRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetImageRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageRequest.name)
}
inline std::string* GetImageRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageRequest.name)
  return _s;
}
inline const std::string& GetImageRequest::_internal_name() const {
  return name_.Get();
}
inline void GetImageRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImageRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImageRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageRequest.name)
  return name_.Release();
}
inline void GetImageRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageRequest.name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void GetImageRequest::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetImageRequest::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageRequest.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageRequest::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageRequest.mime_type)
}
inline std::string* GetImageRequest::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageRequest.mime_type)
  return _s;
}
inline const std::string& GetImageRequest::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetImageRequest::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImageRequest::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImageRequest::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageRequest.mime_type)
  return mime_type_.Release();
}
inline void GetImageRequest::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageRequest.mime_type)
}

// -------------------------------------------------------------------

// GetImageResponse

// string mime_type = 1 [json_name = "mimeType"];
inline void GetImageResponse::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetImageResponse::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageResponse.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageResponse::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageResponse.mime_type)
}
inline std::string* GetImageResponse::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageResponse.mime_type)
  return _s;
}
inline const std::string& GetImageResponse::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetImageResponse::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImageResponse::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImageResponse::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageResponse.mime_type)
  return mime_type_.Release();
}
inline void GetImageResponse::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageResponse.mime_type)
}

// bytes image = 2 [json_name = "image"];
inline void GetImageResponse::clear_image() {
  image_.ClearToEmpty();
}
inline const std::string& GetImageResponse::image() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetImageResponse.image)
  return _internal_image();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetImageResponse::set_image(ArgT0&& arg0, ArgT... args) {
 
 image_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetImageResponse.image)
}
inline std::string* GetImageResponse::mutable_image() {
  std::string* _s = _internal_mutable_image();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetImageResponse.image)
  return _s;
}
inline const std::string& GetImageResponse::_internal_image() const {
  return image_.Get();
}
inline void GetImageResponse::_internal_set_image(const std::string& value) {
  
  image_.Set(value, GetArenaForAllocation());
}
inline std::string* GetImageResponse::_internal_mutable_image() {
  
  return image_.Mutable(GetArenaForAllocation());
}
inline std::string* GetImageResponse::release_image() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetImageResponse.image)
  return image_.Release();
}
inline void GetImageResponse::set_allocated_image(std::string* image) {
  if (image != nullptr) {
    
  } else {
    
  }
  image_.SetAllocated(image, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (image_.IsDefault()) {
    image_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetImageResponse.image)
}

// -------------------------------------------------------------------

// RenderFrameRequest

// string name = 1 [json_name = "name"];
inline void RenderFrameRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RenderFrameRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.RenderFrameRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenderFrameRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.RenderFrameRequest.name)
}
inline std::string* RenderFrameRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.RenderFrameRequest.name)
  return _s;
}
inline const std::string& RenderFrameRequest::_internal_name() const {
  return name_.Get();
}
inline void RenderFrameRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* RenderFrameRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* RenderFrameRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.RenderFrameRequest.name)
  return name_.Release();
}
inline void RenderFrameRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.RenderFrameRequest.name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void RenderFrameRequest::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& RenderFrameRequest::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.RenderFrameRequest.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RenderFrameRequest::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.RenderFrameRequest.mime_type)
}
inline std::string* RenderFrameRequest::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.RenderFrameRequest.mime_type)
  return _s;
}
inline const std::string& RenderFrameRequest::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void RenderFrameRequest::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* RenderFrameRequest::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* RenderFrameRequest::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.RenderFrameRequest.mime_type)
  return mime_type_.Release();
}
inline void RenderFrameRequest::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.RenderFrameRequest.mime_type)
}

// -------------------------------------------------------------------

// GetPointCloudRequest

// string name = 1 [json_name = "name"];
inline void GetPointCloudRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPointCloudRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPointCloudRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudRequest.name)
}
inline std::string* GetPointCloudRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudRequest.name)
  return _s;
}
inline const std::string& GetPointCloudRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPointCloudRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPointCloudRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPointCloudRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudRequest.name)
  return name_.Release();
}
inline void GetPointCloudRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudRequest.name)
}

// string mime_type = 2 [json_name = "mimeType"];
inline void GetPointCloudRequest::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetPointCloudRequest::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudRequest.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPointCloudRequest::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudRequest.mime_type)
}
inline std::string* GetPointCloudRequest::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudRequest.mime_type)
  return _s;
}
inline const std::string& GetPointCloudRequest::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetPointCloudRequest::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPointCloudRequest::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPointCloudRequest::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudRequest.mime_type)
  return mime_type_.Release();
}
inline void GetPointCloudRequest::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudRequest.mime_type)
}

// -------------------------------------------------------------------

// GetPointCloudResponse

// string mime_type = 1 [json_name = "mimeType"];
inline void GetPointCloudResponse::clear_mime_type() {
  mime_type_.ClearToEmpty();
}
inline const std::string& GetPointCloudResponse::mime_type() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudResponse.mime_type)
  return _internal_mime_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPointCloudResponse::set_mime_type(ArgT0&& arg0, ArgT... args) {
 
 mime_type_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudResponse.mime_type)
}
inline std::string* GetPointCloudResponse::mutable_mime_type() {
  std::string* _s = _internal_mutable_mime_type();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudResponse.mime_type)
  return _s;
}
inline const std::string& GetPointCloudResponse::_internal_mime_type() const {
  return mime_type_.Get();
}
inline void GetPointCloudResponse::_internal_set_mime_type(const std::string& value) {
  
  mime_type_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPointCloudResponse::_internal_mutable_mime_type() {
  
  return mime_type_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPointCloudResponse::release_mime_type() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudResponse.mime_type)
  return mime_type_.Release();
}
inline void GetPointCloudResponse::set_allocated_mime_type(std::string* mime_type) {
  if (mime_type != nullptr) {
    
  } else {
    
  }
  mime_type_.SetAllocated(mime_type, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (mime_type_.IsDefault()) {
    mime_type_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudResponse.mime_type)
}

// bytes point_cloud = 2 [json_name = "pointCloud"];
inline void GetPointCloudResponse::clear_point_cloud() {
  point_cloud_.ClearToEmpty();
}
inline const std::string& GetPointCloudResponse::point_cloud() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
  return _internal_point_cloud();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPointCloudResponse::set_point_cloud(ArgT0&& arg0, ArgT... args) {
 
 point_cloud_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
}
inline std::string* GetPointCloudResponse::mutable_point_cloud() {
  std::string* _s = _internal_mutable_point_cloud();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
  return _s;
}
inline const std::string& GetPointCloudResponse::_internal_point_cloud() const {
  return point_cloud_.Get();
}
inline void GetPointCloudResponse::_internal_set_point_cloud(const std::string& value) {
  
  point_cloud_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPointCloudResponse::_internal_mutable_point_cloud() {
  
  return point_cloud_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPointCloudResponse::release_point_cloud() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
  return point_cloud_.Release();
}
inline void GetPointCloudResponse::set_allocated_point_cloud(std::string* point_cloud) {
  if (point_cloud != nullptr) {
    
  } else {
    
  }
  point_cloud_.SetAllocated(point_cloud, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (point_cloud_.IsDefault()) {
    point_cloud_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPointCloudResponse.point_cloud)
}

// -------------------------------------------------------------------

// GetPropertiesRequest

// string name = 1 [json_name = "name"];
inline void GetPropertiesRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& GetPropertiesRequest::name() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPropertiesRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPropertiesRequest.name)
}
inline std::string* GetPropertiesRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesRequest.name)
  return _s;
}
inline const std::string& GetPropertiesRequest::_internal_name() const {
  return name_.Get();
}
inline void GetPropertiesRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(value, GetArenaForAllocation());
}
inline std::string* GetPropertiesRequest::_internal_mutable_name() {
  
  return name_.Mutable(GetArenaForAllocation());
}
inline std::string* GetPropertiesRequest::release_name() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPropertiesRequest.name)
  return name_.Release();
}
inline void GetPropertiesRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault()) {
    name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPropertiesRequest.name)
}

// -------------------------------------------------------------------

// GetPropertiesResponse

// bool supports_pcd = 1 [json_name = "supportsPcd"];
inline void GetPropertiesResponse::clear_supports_pcd() {
  supports_pcd_ = false;
}
inline bool GetPropertiesResponse::_internal_supports_pcd() const {
  return supports_pcd_;
}
inline bool GetPropertiesResponse::supports_pcd() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.supports_pcd)
  return _internal_supports_pcd();
}
inline void GetPropertiesResponse::_internal_set_supports_pcd(bool value) {
  
  supports_pcd_ = value;
}
inline void GetPropertiesResponse::set_supports_pcd(bool value) {
  _internal_set_supports_pcd(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.GetPropertiesResponse.supports_pcd)
}

// .viam.component.camera.v1.IntrinsicParameters intrinsic_parameters = 2 [json_name = "intrinsicParameters"];
inline bool GetPropertiesResponse::_internal_has_intrinsic_parameters() const {
  return this != internal_default_instance() && intrinsic_parameters_ != nullptr;
}
inline bool GetPropertiesResponse::has_intrinsic_parameters() const {
  return _internal_has_intrinsic_parameters();
}
inline void GetPropertiesResponse::clear_intrinsic_parameters() {
  if (GetArenaForAllocation() == nullptr && intrinsic_parameters_ != nullptr) {
    delete intrinsic_parameters_;
  }
  intrinsic_parameters_ = nullptr;
}
inline const ::viam::component::camera::v1::IntrinsicParameters& GetPropertiesResponse::_internal_intrinsic_parameters() const {
  const ::viam::component::camera::v1::IntrinsicParameters* p = intrinsic_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::camera::v1::IntrinsicParameters&>(
      ::viam::component::camera::v1::_IntrinsicParameters_default_instance_);
}
inline const ::viam::component::camera::v1::IntrinsicParameters& GetPropertiesResponse::intrinsic_parameters() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
  return _internal_intrinsic_parameters();
}
inline void GetPropertiesResponse::unsafe_arena_set_allocated_intrinsic_parameters(
    ::viam::component::camera::v1::IntrinsicParameters* intrinsic_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(intrinsic_parameters_);
  }
  intrinsic_parameters_ = intrinsic_parameters;
  if (intrinsic_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::release_intrinsic_parameters() {
  
  ::viam::component::camera::v1::IntrinsicParameters* temp = intrinsic_parameters_;
  intrinsic_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::unsafe_arena_release_intrinsic_parameters() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
  
  ::viam::component::camera::v1::IntrinsicParameters* temp = intrinsic_parameters_;
  intrinsic_parameters_ = nullptr;
  return temp;
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::_internal_mutable_intrinsic_parameters() {
  
  if (intrinsic_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::camera::v1::IntrinsicParameters>(GetArenaForAllocation());
    intrinsic_parameters_ = p;
  }
  return intrinsic_parameters_;
}
inline ::viam::component::camera::v1::IntrinsicParameters* GetPropertiesResponse::mutable_intrinsic_parameters() {
  ::viam::component::camera::v1::IntrinsicParameters* _msg = _internal_mutable_intrinsic_parameters();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
  return _msg;
}
inline void GetPropertiesResponse::set_allocated_intrinsic_parameters(::viam::component::camera::v1::IntrinsicParameters* intrinsic_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete intrinsic_parameters_;
  }
  if (intrinsic_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(intrinsic_parameters);
    if (message_arena != submessage_arena) {
      intrinsic_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, intrinsic_parameters, submessage_arena);
    }
    
  } else {
    
  }
  intrinsic_parameters_ = intrinsic_parameters;
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPropertiesResponse.intrinsic_parameters)
}

// .viam.component.camera.v1.DistortionParameters distortion_parameters = 3 [json_name = "distortionParameters"];
inline bool GetPropertiesResponse::_internal_has_distortion_parameters() const {
  return this != internal_default_instance() && distortion_parameters_ != nullptr;
}
inline bool GetPropertiesResponse::has_distortion_parameters() const {
  return _internal_has_distortion_parameters();
}
inline void GetPropertiesResponse::clear_distortion_parameters() {
  if (GetArenaForAllocation() == nullptr && distortion_parameters_ != nullptr) {
    delete distortion_parameters_;
  }
  distortion_parameters_ = nullptr;
}
inline const ::viam::component::camera::v1::DistortionParameters& GetPropertiesResponse::_internal_distortion_parameters() const {
  const ::viam::component::camera::v1::DistortionParameters* p = distortion_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::camera::v1::DistortionParameters&>(
      ::viam::component::camera::v1::_DistortionParameters_default_instance_);
}
inline const ::viam::component::camera::v1::DistortionParameters& GetPropertiesResponse::distortion_parameters() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
  return _internal_distortion_parameters();
}
inline void GetPropertiesResponse::unsafe_arena_set_allocated_distortion_parameters(
    ::viam::component::camera::v1::DistortionParameters* distortion_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(distortion_parameters_);
  }
  distortion_parameters_ = distortion_parameters;
  if (distortion_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::release_distortion_parameters() {
  
  ::viam::component::camera::v1::DistortionParameters* temp = distortion_parameters_;
  distortion_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::unsafe_arena_release_distortion_parameters() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
  
  ::viam::component::camera::v1::DistortionParameters* temp = distortion_parameters_;
  distortion_parameters_ = nullptr;
  return temp;
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::_internal_mutable_distortion_parameters() {
  
  if (distortion_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::camera::v1::DistortionParameters>(GetArenaForAllocation());
    distortion_parameters_ = p;
  }
  return distortion_parameters_;
}
inline ::viam::component::camera::v1::DistortionParameters* GetPropertiesResponse::mutable_distortion_parameters() {
  ::viam::component::camera::v1::DistortionParameters* _msg = _internal_mutable_distortion_parameters();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
  return _msg;
}
inline void GetPropertiesResponse::set_allocated_distortion_parameters(::viam::component::camera::v1::DistortionParameters* distortion_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete distortion_parameters_;
  }
  if (distortion_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(distortion_parameters);
    if (message_arena != submessage_arena) {
      distortion_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, distortion_parameters, submessage_arena);
    }
    
  } else {
    
  }
  distortion_parameters_ = distortion_parameters;
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.GetPropertiesResponse.distortion_parameters)
}

// -------------------------------------------------------------------

// Webcams

// repeated .viam.component.camera.v1.Webcam webcams = 1 [json_name = "webcams"];
inline int Webcams::_internal_webcams_size() const {
  return webcams_.size();
}
inline int Webcams::webcams_size() const {
  return _internal_webcams_size();
}
inline void Webcams::clear_webcams() {
  webcams_.Clear();
}
inline ::viam::component::camera::v1::Webcam* Webcams::mutable_webcams(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcams.webcams)
  return webcams_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Webcam >*
Webcams::mutable_webcams() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.Webcams.webcams)
  return &webcams_;
}
inline const ::viam::component::camera::v1::Webcam& Webcams::_internal_webcams(int index) const {
  return webcams_.Get(index);
}
inline const ::viam::component::camera::v1::Webcam& Webcams::webcams(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcams.webcams)
  return _internal_webcams(index);
}
inline ::viam::component::camera::v1::Webcam* Webcams::_internal_add_webcams() {
  return webcams_.Add();
}
inline ::viam::component::camera::v1::Webcam* Webcams::add_webcams() {
  ::viam::component::camera::v1::Webcam* _add = _internal_add_webcams();
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.Webcams.webcams)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Webcam >&
Webcams::webcams() const {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.Webcams.webcams)
  return webcams_;
}

// -------------------------------------------------------------------

// Webcam

// string label = 1 [json_name = "label"];
inline void Webcam::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& Webcam::label() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Webcam::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Webcam.label)
}
inline std::string* Webcam::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.label)
  return _s;
}
inline const std::string& Webcam::_internal_label() const {
  return label_.Get();
}
inline void Webcam::_internal_set_label(const std::string& value) {
  
  label_.Set(value, GetArenaForAllocation());
}
inline std::string* Webcam::_internal_mutable_label() {
  
  return label_.Mutable(GetArenaForAllocation());
}
inline std::string* Webcam::release_label() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Webcam.label)
  return label_.Release();
}
inline void Webcam::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(label, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (label_.IsDefault()) {
    label_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Webcam.label)
}

// string status = 2 [json_name = "status"];
inline void Webcam::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Webcam::status() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Webcam::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Webcam.status)
}
inline std::string* Webcam::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.status)
  return _s;
}
inline const std::string& Webcam::_internal_status() const {
  return status_.Get();
}
inline void Webcam::_internal_set_status(const std::string& value) {
  
  status_.Set(value, GetArenaForAllocation());
}
inline std::string* Webcam::_internal_mutable_status() {
  
  return status_.Mutable(GetArenaForAllocation());
}
inline std::string* Webcam::release_status() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Webcam.status)
  return status_.Release();
}
inline void Webcam::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(status, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault()) {
    status_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Webcam.status)
}

// repeated .viam.component.camera.v1.Property properties = 3 [json_name = "properties"];
inline int Webcam::_internal_properties_size() const {
  return properties_.size();
}
inline int Webcam::properties_size() const {
  return _internal_properties_size();
}
inline void Webcam::clear_properties() {
  properties_.Clear();
}
inline ::viam::component::camera::v1::Property* Webcam::mutable_properties(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Webcam.properties)
  return properties_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Property >*
Webcam::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.Webcam.properties)
  return &properties_;
}
inline const ::viam::component::camera::v1::Property& Webcam::_internal_properties(int index) const {
  return properties_.Get(index);
}
inline const ::viam::component::camera::v1::Property& Webcam::properties(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Webcam.properties)
  return _internal_properties(index);
}
inline ::viam::component::camera::v1::Property* Webcam::_internal_add_properties() {
  return properties_.Add();
}
inline ::viam::component::camera::v1::Property* Webcam::add_properties() {
  ::viam::component::camera::v1::Property* _add = _internal_add_properties();
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.Webcam.properties)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::camera::v1::Property >&
Webcam::properties() const {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.Webcam.properties)
  return properties_;
}

// -------------------------------------------------------------------

// Property

// int32 width_px = 1 [json_name = "widthPx"];
inline void Property::clear_width_px() {
  width_px_ = 0;
}
inline int32_t Property::_internal_width_px() const {
  return width_px_;
}
inline int32_t Property::width_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.width_px)
  return _internal_width_px();
}
inline void Property::_internal_set_width_px(int32_t value) {
  
  width_px_ = value;
}
inline void Property::set_width_px(int32_t value) {
  _internal_set_width_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.width_px)
}

// int32 height_px = 2 [json_name = "heightPx"];
inline void Property::clear_height_px() {
  height_px_ = 0;
}
inline int32_t Property::_internal_height_px() const {
  return height_px_;
}
inline int32_t Property::height_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.height_px)
  return _internal_height_px();
}
inline void Property::_internal_set_height_px(int32_t value) {
  
  height_px_ = value;
}
inline void Property::set_height_px(int32_t value) {
  _internal_set_height_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.height_px)
}

// string frame_format = 3 [json_name = "frameFormat"];
inline void Property::clear_frame_format() {
  frame_format_.ClearToEmpty();
}
inline const std::string& Property::frame_format() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.Property.frame_format)
  return _internal_frame_format();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Property::set_frame_format(ArgT0&& arg0, ArgT... args) {
 
 frame_format_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.Property.frame_format)
}
inline std::string* Property::mutable_frame_format() {
  std::string* _s = _internal_mutable_frame_format();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.Property.frame_format)
  return _s;
}
inline const std::string& Property::_internal_frame_format() const {
  return frame_format_.Get();
}
inline void Property::_internal_set_frame_format(const std::string& value) {
  
  frame_format_.Set(value, GetArenaForAllocation());
}
inline std::string* Property::_internal_mutable_frame_format() {
  
  return frame_format_.Mutable(GetArenaForAllocation());
}
inline std::string* Property::release_frame_format() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.Property.frame_format)
  return frame_format_.Release();
}
inline void Property::set_allocated_frame_format(std::string* frame_format) {
  if (frame_format != nullptr) {
    
  } else {
    
  }
  frame_format_.SetAllocated(frame_format, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (frame_format_.IsDefault()) {
    frame_format_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.Property.frame_format)
}

// -------------------------------------------------------------------

// IntrinsicParameters

// uint32 width_px = 1 [json_name = "widthPx"];
inline void IntrinsicParameters::clear_width_px() {
  width_px_ = 0u;
}
inline uint32_t IntrinsicParameters::_internal_width_px() const {
  return width_px_;
}
inline uint32_t IntrinsicParameters::width_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.width_px)
  return _internal_width_px();
}
inline void IntrinsicParameters::_internal_set_width_px(uint32_t value) {
  
  width_px_ = value;
}
inline void IntrinsicParameters::set_width_px(uint32_t value) {
  _internal_set_width_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.width_px)
}

// uint32 height_px = 2 [json_name = "heightPx"];
inline void IntrinsicParameters::clear_height_px() {
  height_px_ = 0u;
}
inline uint32_t IntrinsicParameters::_internal_height_px() const {
  return height_px_;
}
inline uint32_t IntrinsicParameters::height_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.height_px)
  return _internal_height_px();
}
inline void IntrinsicParameters::_internal_set_height_px(uint32_t value) {
  
  height_px_ = value;
}
inline void IntrinsicParameters::set_height_px(uint32_t value) {
  _internal_set_height_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.height_px)
}

// double focal_x_px = 3 [json_name = "focalXPx"];
inline void IntrinsicParameters::clear_focal_x_px() {
  focal_x_px_ = 0;
}
inline double IntrinsicParameters::_internal_focal_x_px() const {
  return focal_x_px_;
}
inline double IntrinsicParameters::focal_x_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.focal_x_px)
  return _internal_focal_x_px();
}
inline void IntrinsicParameters::_internal_set_focal_x_px(double value) {
  
  focal_x_px_ = value;
}
inline void IntrinsicParameters::set_focal_x_px(double value) {
  _internal_set_focal_x_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.focal_x_px)
}

// double focal_y_px = 4 [json_name = "focalYPx"];
inline void IntrinsicParameters::clear_focal_y_px() {
  focal_y_px_ = 0;
}
inline double IntrinsicParameters::_internal_focal_y_px() const {
  return focal_y_px_;
}
inline double IntrinsicParameters::focal_y_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.focal_y_px)
  return _internal_focal_y_px();
}
inline void IntrinsicParameters::_internal_set_focal_y_px(double value) {
  
  focal_y_px_ = value;
}
inline void IntrinsicParameters::set_focal_y_px(double value) {
  _internal_set_focal_y_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.focal_y_px)
}

// double center_x_px = 5 [json_name = "centerXPx"];
inline void IntrinsicParameters::clear_center_x_px() {
  center_x_px_ = 0;
}
inline double IntrinsicParameters::_internal_center_x_px() const {
  return center_x_px_;
}
inline double IntrinsicParameters::center_x_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.center_x_px)
  return _internal_center_x_px();
}
inline void IntrinsicParameters::_internal_set_center_x_px(double value) {
  
  center_x_px_ = value;
}
inline void IntrinsicParameters::set_center_x_px(double value) {
  _internal_set_center_x_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.center_x_px)
}

// double center_y_px = 6 [json_name = "centerYPx"];
inline void IntrinsicParameters::clear_center_y_px() {
  center_y_px_ = 0;
}
inline double IntrinsicParameters::_internal_center_y_px() const {
  return center_y_px_;
}
inline double IntrinsicParameters::center_y_px() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.IntrinsicParameters.center_y_px)
  return _internal_center_y_px();
}
inline void IntrinsicParameters::_internal_set_center_y_px(double value) {
  
  center_y_px_ = value;
}
inline void IntrinsicParameters::set_center_y_px(double value) {
  _internal_set_center_y_px(value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.IntrinsicParameters.center_y_px)
}

// -------------------------------------------------------------------

// DistortionParameters

// string model = 1 [json_name = "model"];
inline void DistortionParameters::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& DistortionParameters::model() const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.DistortionParameters.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DistortionParameters::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.DistortionParameters.model)
}
inline std::string* DistortionParameters::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:viam.component.camera.v1.DistortionParameters.model)
  return _s;
}
inline const std::string& DistortionParameters::_internal_model() const {
  return model_.Get();
}
inline void DistortionParameters::_internal_set_model(const std::string& value) {
  
  model_.Set(value, GetArenaForAllocation());
}
inline std::string* DistortionParameters::_internal_mutable_model() {
  
  return model_.Mutable(GetArenaForAllocation());
}
inline std::string* DistortionParameters::release_model() {
  // @@protoc_insertion_point(field_release:viam.component.camera.v1.DistortionParameters.model)
  return model_.Release();
}
inline void DistortionParameters::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(model, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault()) {
    model_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.camera.v1.DistortionParameters.model)
}

// repeated double parameters = 2 [json_name = "parameters"];
inline int DistortionParameters::_internal_parameters_size() const {
  return parameters_.size();
}
inline int DistortionParameters::parameters_size() const {
  return _internal_parameters_size();
}
inline void DistortionParameters::clear_parameters() {
  parameters_.Clear();
}
inline double DistortionParameters::_internal_parameters(int index) const {
  return parameters_.Get(index);
}
inline double DistortionParameters::parameters(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.camera.v1.DistortionParameters.parameters)
  return _internal_parameters(index);
}
inline void DistortionParameters::set_parameters(int index, double value) {
  parameters_.Set(index, value);
  // @@protoc_insertion_point(field_set:viam.component.camera.v1.DistortionParameters.parameters)
}
inline void DistortionParameters::_internal_add_parameters(double value) {
  parameters_.Add(value);
}
inline void DistortionParameters::add_parameters(double value) {
  _internal_add_parameters(value);
  // @@protoc_insertion_point(field_add:viam.component.camera.v1.DistortionParameters.parameters)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DistortionParameters::_internal_parameters() const {
  return parameters_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
DistortionParameters::parameters() const {
  // @@protoc_insertion_point(field_list:viam.component.camera.v1.DistortionParameters.parameters)
  return _internal_parameters();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DistortionParameters::_internal_mutable_parameters() {
  return &parameters_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
DistortionParameters::mutable_parameters() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.camera.v1.DistortionParameters.parameters)
  return _internal_mutable_parameters();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace camera
}  // namespace component
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2fcamera_2fv1_2fcamera_2eproto
