// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/movementsensor/v1/movementsensor.proto
#ifndef GRPC_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto__INCLUDED
#define GRPC_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto__INCLUDED

#include "component/movementsensor/v1/movementsensor.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace component {
namespace movementsensor {
namespace v1 {

class MovementSensorService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.component.movementsensor.v1.MovementSensorService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>> AsyncGetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>>(AsyncGetLinearVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>> PrepareAsyncGetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>>(PrepareAsyncGetLinearVelocityRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>> AsyncGetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>>(AsyncGetAngularVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>> PrepareAsyncGetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>>(PrepareAsyncGetAngularVelocityRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>> AsyncGetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>>(AsyncGetCompassHeadingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>> PrepareAsyncGetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>>(PrepareAsyncGetCompassHeadingRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::viam::component::movementsensor::v1::GetOrientationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetOrientationResponse>> AsyncGetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetOrientationResponse>>(AsyncGetOrientationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetOrientationResponse>> PrepareAsyncGetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetOrientationResponse>>(PrepareAsyncGetOrientationRaw(context, request, cq));
    }
    virtual ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::viam::component::movementsensor::v1::GetPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    virtual ::grpc::Status GetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPropertiesResponse>> AsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPropertiesResponse>>(AsyncGetPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPropertiesResponse>> PrepareAsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPropertiesResponse>>(PrepareAsyncGetPropertiesRaw(context, request, cq));
    }
    virtual ::grpc::Status GetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAccuracyResponse>> AsyncGetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAccuracyResponse>>(AsyncGetAccuracyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAccuracyResponse>> PrepareAsyncGetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAccuracyResponse>>(PrepareAsyncGetAccuracyRaw(context, request, cq));
    }
    virtual ::grpc::Status GetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>> AsyncGetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>>(AsyncGetLinearAccelerationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>> PrepareAsyncGetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>>(PrepareAsyncGetLinearAccelerationRaw(context, request, cq));
    }
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::viam::component::movementsensor::v1::GetOrientationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::viam::component::movementsensor::v1::GetOrientationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest* request, ::viam::component::movementsensor::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest* request, ::viam::component::movementsensor::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* AsyncGetLinearVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* PrepareAsyncGetLinearVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* AsyncGetAngularVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* PrepareAsyncGetAngularVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* AsyncGetCompassHeadingRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* PrepareAsyncGetCompassHeadingRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetOrientationResponse>* AsyncGetOrientationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetOrientationResponse>* PrepareAsyncGetOrientationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPropertiesResponse>* AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetPropertiesResponse>* PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAccuracyResponse>* AsyncGetAccuracyRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetAccuracyResponse>* PrepareAsyncGetAccuracyRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* AsyncGetLinearAccelerationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* PrepareAsyncGetLinearAccelerationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>> AsyncGetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>>(AsyncGetLinearVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>> PrepareAsyncGetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>>(PrepareAsyncGetLinearVelocityRaw(context, request, cq));
    }
    ::grpc::Status GetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>> AsyncGetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>>(AsyncGetAngularVelocityRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>> PrepareAsyncGetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>>(PrepareAsyncGetAngularVelocityRaw(context, request, cq));
    }
    ::grpc::Status GetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>> AsyncGetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>>(AsyncGetCompassHeadingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>> PrepareAsyncGetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>>(PrepareAsyncGetCompassHeadingRaw(context, request, cq));
    }
    ::grpc::Status GetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::viam::component::movementsensor::v1::GetOrientationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetOrientationResponse>> AsyncGetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetOrientationResponse>>(AsyncGetOrientationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetOrientationResponse>> PrepareAsyncGetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetOrientationResponse>>(PrepareAsyncGetOrientationRaw(context, request, cq));
    }
    ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::viam::component::movementsensor::v1::GetPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    ::grpc::Status GetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPropertiesResponse>> AsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPropertiesResponse>>(AsyncGetPropertiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPropertiesResponse>> PrepareAsyncGetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPropertiesResponse>>(PrepareAsyncGetPropertiesRaw(context, request, cq));
    }
    ::grpc::Status GetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAccuracyResponse>> AsyncGetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAccuracyResponse>>(AsyncGetAccuracyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAccuracyResponse>> PrepareAsyncGetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAccuracyResponse>>(PrepareAsyncGetAccuracyRaw(context, request, cq));
    }
    ::grpc::Status GetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>> AsyncGetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>>(AsyncGetLinearAccelerationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>> PrepareAsyncGetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>>(PrepareAsyncGetLinearAccelerationRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLinearVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAngularVelocity(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCompassHeading(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::viam::component::movementsensor::v1::GetOrientationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOrientation(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::viam::component::movementsensor::v1::GetOrientationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest* request, ::viam::component::movementsensor::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPosition(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest* request, ::viam::component::movementsensor::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetProperties(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response, std::function<void(::grpc::Status)>) override;
      void GetAccuracy(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLinearAcceleration(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* AsyncGetLinearVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* PrepareAsyncGetLinearVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* AsyncGetAngularVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* PrepareAsyncGetAngularVelocityRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* AsyncGetCompassHeadingRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* PrepareAsyncGetCompassHeadingRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetOrientationResponse>* AsyncGetOrientationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetOrientationResponse>* PrepareAsyncGetOrientationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPropertiesResponse>* AsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetPropertiesResponse>* PrepareAsyncGetPropertiesRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAccuracyResponse>* AsyncGetAccuracyRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetAccuracyResponse>* PrepareAsyncGetAccuracyRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* AsyncGetLinearAccelerationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* PrepareAsyncGetLinearAccelerationRaw(::grpc::ClientContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetLinearVelocity_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAngularVelocity_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCompassHeading_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOrientation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetProperties_;
    const ::grpc::internal::RpcMethod rpcmethod_GetAccuracy_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLinearAcceleration_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetLinearVelocity(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response);
    virtual ::grpc::Status GetAngularVelocity(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response);
    virtual ::grpc::Status GetCompassHeading(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response);
    virtual ::grpc::Status GetOrientation(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::viam::component::movementsensor::v1::GetOrientationResponse* response);
    virtual ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest* request, ::viam::component::movementsensor::v1::GetPositionResponse* response);
    virtual ::grpc::Status GetProperties(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response);
    virtual ::grpc::Status GetAccuracy(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response);
    virtual ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response);
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLinearVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLinearVelocity() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetLinearVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinearVelocity(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAngularVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAngularVelocity() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetAngularVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAngularVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAngularVelocity(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCompassHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCompassHeading() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCompassHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompassHeading(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompassHeading(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOrientation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrientation(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrientation(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetOrientationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPosition() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetProperties() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperties(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetPropertiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetAccuracy() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_GetAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccuracy(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccuracy(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetAccuracyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLinearAcceleration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLinearAcceleration() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_GetLinearAcceleration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinearAcceleration(::grpc::ServerContext* context, ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetLinearVelocity<WithAsyncMethod_GetAngularVelocity<WithAsyncMethod_GetCompassHeading<WithAsyncMethod_GetOrientation<WithAsyncMethod_GetPosition<WithAsyncMethod_GetProperties<WithAsyncMethod_GetAccuracy<WithAsyncMethod_GetLinearAcceleration<WithAsyncMethod_DoCommand<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetLinearVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLinearVelocity() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetLinearVelocityRequest, ::viam::component::movementsensor::v1::GetLinearVelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* request, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* response) { return this->GetLinearVelocity(context, request, response); }));}
    void SetMessageAllocatorFor_GetLinearVelocity(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetLinearVelocityRequest, ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetLinearVelocityRequest, ::viam::component::movementsensor::v1::GetLinearVelocityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLinearVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinearVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAngularVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAngularVelocity() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetAngularVelocityRequest, ::viam::component::movementsensor::v1::GetAngularVelocityResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* request, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* response) { return this->GetAngularVelocity(context, request, response); }));}
    void SetMessageAllocatorFor_GetAngularVelocity(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetAngularVelocityRequest, ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetAngularVelocityRequest, ::viam::component::movementsensor::v1::GetAngularVelocityResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAngularVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAngularVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAngularVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCompassHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCompassHeading() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetCompassHeadingRequest, ::viam::component::movementsensor::v1::GetCompassHeadingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* request, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* response) { return this->GetCompassHeading(context, request, response); }));}
    void SetMessageAllocatorFor_GetCompassHeading(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetCompassHeadingRequest, ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetCompassHeadingRequest, ::viam::component::movementsensor::v1::GetCompassHeadingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCompassHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompassHeading(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCompassHeading(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOrientation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetOrientationRequest, ::viam::component::movementsensor::v1::GetOrientationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetOrientationRequest* request, ::viam::component::movementsensor::v1::GetOrientationResponse* response) { return this->GetOrientation(context, request, response); }));}
    void SetMessageAllocatorFor_GetOrientation(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetOrientationRequest, ::viam::component::movementsensor::v1::GetOrientationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetOrientationRequest, ::viam::component::movementsensor::v1::GetOrientationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrientation(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrientation(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetPositionRequest, ::viam::component::movementsensor::v1::GetPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetPositionRequest* request, ::viam::component::movementsensor::v1::GetPositionResponse* response) { return this->GetPosition(context, request, response); }));}
    void SetMessageAllocatorFor_GetPosition(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetPositionRequest, ::viam::component::movementsensor::v1::GetPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetPositionRequest, ::viam::component::movementsensor::v1::GetPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetProperties() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetPropertiesRequest, ::viam::component::movementsensor::v1::GetPropertiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetPropertiesRequest* request, ::viam::component::movementsensor::v1::GetPropertiesResponse* response) { return this->GetProperties(context, request, response); }));}
    void SetMessageAllocatorFor_GetProperties(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetPropertiesRequest, ::viam::component::movementsensor::v1::GetPropertiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetPropertiesRequest, ::viam::component::movementsensor::v1::GetPropertiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetAccuracy() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetAccuracyRequest, ::viam::component::movementsensor::v1::GetAccuracyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetAccuracyRequest* request, ::viam::component::movementsensor::v1::GetAccuracyResponse* response) { return this->GetAccuracy(context, request, response); }));}
    void SetMessageAllocatorFor_GetAccuracy(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetAccuracyRequest, ::viam::component::movementsensor::v1::GetAccuracyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetAccuracyRequest, ::viam::component::movementsensor::v1::GetAccuracyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccuracy(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccuracy(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLinearAcceleration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLinearAcceleration() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetLinearAccelerationRequest, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* request, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* response) { return this->GetLinearAcceleration(context, request, response); }));}
    void SetMessageAllocatorFor_GetLinearAcceleration(
        ::grpc::MessageAllocator< ::viam::component::movementsensor::v1::GetLinearAccelerationRequest, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::movementsensor::v1::GetLinearAccelerationRequest, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLinearAcceleration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinearAcceleration(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetLinearVelocity<WithCallbackMethod_GetAngularVelocity<WithCallbackMethod_GetCompassHeading<WithCallbackMethod_GetOrientation<WithCallbackMethod_GetPosition<WithCallbackMethod_GetProperties<WithCallbackMethod_GetAccuracy<WithCallbackMethod_GetLinearAcceleration<WithCallbackMethod_DoCommand<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetLinearVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLinearVelocity() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetLinearVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAngularVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAngularVelocity() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetAngularVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAngularVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCompassHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCompassHeading() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCompassHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompassHeading(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOrientation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrientation(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPosition() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetProperties() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetAccuracy() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_GetAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccuracy(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLinearAcceleration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLinearAcceleration() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_GetLinearAcceleration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLinearVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLinearVelocity() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetLinearVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinearVelocity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAngularVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAngularVelocity() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetAngularVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAngularVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAngularVelocity(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCompassHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCompassHeading() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCompassHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompassHeading(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCompassHeading(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOrientation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrientation(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOrientation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPosition() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetProperties() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetProperties(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetAccuracy() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_GetAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccuracy(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetAccuracy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLinearAcceleration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLinearAcceleration() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_GetLinearAcceleration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLinearAcceleration(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLinearVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLinearVelocity() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLinearVelocity(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLinearVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinearVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAngularVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAngularVelocity() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAngularVelocity(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAngularVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAngularVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAngularVelocity(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCompassHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCompassHeading() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCompassHeading(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCompassHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCompassHeading(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCompassHeading(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOrientation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOrientation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOrientation(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOrientation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetProperties() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetProperties(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetProperties(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetAccuracy() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetAccuracy(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetAccuracy(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetAccuracy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLinearAcceleration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLinearAcceleration() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLinearAcceleration(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLinearAcceleration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLinearAcceleration(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLinearVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLinearVelocity() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetLinearVelocityRequest, ::viam::component::movementsensor::v1::GetLinearVelocityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetLinearVelocityRequest, ::viam::component::movementsensor::v1::GetLinearVelocityResponse>* streamer) {
                       return this->StreamedGetLinearVelocity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLinearVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLinearVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLinearVelocity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetLinearVelocityRequest,::viam::component::movementsensor::v1::GetLinearVelocityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAngularVelocity : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAngularVelocity() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetAngularVelocityRequest, ::viam::component::movementsensor::v1::GetAngularVelocityResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetAngularVelocityRequest, ::viam::component::movementsensor::v1::GetAngularVelocityResponse>* streamer) {
                       return this->StreamedGetAngularVelocity(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAngularVelocity() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAngularVelocity(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAngularVelocityRequest* /*request*/, ::viam::component::movementsensor::v1::GetAngularVelocityResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAngularVelocity(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetAngularVelocityRequest,::viam::component::movementsensor::v1::GetAngularVelocityResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCompassHeading : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCompassHeading() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetCompassHeadingRequest, ::viam::component::movementsensor::v1::GetCompassHeadingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetCompassHeadingRequest, ::viam::component::movementsensor::v1::GetCompassHeadingResponse>* streamer) {
                       return this->StreamedGetCompassHeading(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCompassHeading() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCompassHeading(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetCompassHeadingRequest* /*request*/, ::viam::component::movementsensor::v1::GetCompassHeadingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCompassHeading(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetCompassHeadingRequest,::viam::component::movementsensor::v1::GetCompassHeadingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOrientation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOrientation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetOrientationRequest, ::viam::component::movementsensor::v1::GetOrientationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetOrientationRequest, ::viam::component::movementsensor::v1::GetOrientationResponse>* streamer) {
                       return this->StreamedGetOrientation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOrientation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOrientation(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetOrientationRequest* /*request*/, ::viam::component::movementsensor::v1::GetOrientationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOrientation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetOrientationRequest,::viam::component::movementsensor::v1::GetOrientationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPosition() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetPositionRequest, ::viam::component::movementsensor::v1::GetPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetPositionRequest, ::viam::component::movementsensor::v1::GetPositionResponse>* streamer) {
                       return this->StreamedGetPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPositionRequest* /*request*/, ::viam::component::movementsensor::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetPositionRequest,::viam::component::movementsensor::v1::GetPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetProperties : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetProperties() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetPropertiesRequest, ::viam::component::movementsensor::v1::GetPropertiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetPropertiesRequest, ::viam::component::movementsensor::v1::GetPropertiesResponse>* streamer) {
                       return this->StreamedGetProperties(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetProperties() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetProperties(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetPropertiesRequest* /*request*/, ::viam::component::movementsensor::v1::GetPropertiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetProperties(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetPropertiesRequest,::viam::component::movementsensor::v1::GetPropertiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetAccuracy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetAccuracy() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetAccuracyRequest, ::viam::component::movementsensor::v1::GetAccuracyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetAccuracyRequest, ::viam::component::movementsensor::v1::GetAccuracyResponse>* streamer) {
                       return this->StreamedGetAccuracy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetAccuracy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetAccuracy(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetAccuracyRequest* /*request*/, ::viam::component::movementsensor::v1::GetAccuracyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetAccuracy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetAccuracyRequest,::viam::component::movementsensor::v1::GetAccuracyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLinearAcceleration : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLinearAcceleration() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::movementsensor::v1::GetLinearAccelerationRequest, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::movementsensor::v1::GetLinearAccelerationRequest, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* streamer) {
                       return this->StreamedGetLinearAcceleration(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLinearAcceleration() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLinearAcceleration(::grpc::ServerContext* /*context*/, const ::viam::component::movementsensor::v1::GetLinearAccelerationRequest* /*request*/, ::viam::component::movementsensor::v1::GetLinearAccelerationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLinearAcceleration(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::movementsensor::v1::GetLinearAccelerationRequest,::viam::component::movementsensor::v1::GetLinearAccelerationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetLinearVelocity<WithStreamedUnaryMethod_GetAngularVelocity<WithStreamedUnaryMethod_GetCompassHeading<WithStreamedUnaryMethod_GetOrientation<WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_GetProperties<WithStreamedUnaryMethod_GetAccuracy<WithStreamedUnaryMethod_GetLinearAcceleration<WithStreamedUnaryMethod_DoCommand<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetLinearVelocity<WithStreamedUnaryMethod_GetAngularVelocity<WithStreamedUnaryMethod_GetCompassHeading<WithStreamedUnaryMethod_GetOrientation<WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_GetProperties<WithStreamedUnaryMethod_GetAccuracy<WithStreamedUnaryMethod_GetLinearAcceleration<WithStreamedUnaryMethod_DoCommand<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace movementsensor
}  // namespace component
}  // namespace viam


#endif  // GRPC_component_2fmovementsensor_2fv1_2fmovementsensor_2eproto__INCLUDED
