// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: component/inputcontroller/v1/input_controller.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3020000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3020003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "common/v1/common.pb.h"
#include "google/api/annotations.pb.h"
#include <google/protobuf/struct.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
namespace viam {
namespace component {
namespace inputcontroller {
namespace v1 {
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class GetControlsRequest;
struct GetControlsRequestDefaultTypeInternal;
extern GetControlsRequestDefaultTypeInternal _GetControlsRequest_default_instance_;
class GetControlsResponse;
struct GetControlsResponseDefaultTypeInternal;
extern GetControlsResponseDefaultTypeInternal _GetControlsResponse_default_instance_;
class GetEventsRequest;
struct GetEventsRequestDefaultTypeInternal;
extern GetEventsRequestDefaultTypeInternal _GetEventsRequest_default_instance_;
class GetEventsResponse;
struct GetEventsResponseDefaultTypeInternal;
extern GetEventsResponseDefaultTypeInternal _GetEventsResponse_default_instance_;
class Status;
struct StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
class StreamEventsRequest;
struct StreamEventsRequestDefaultTypeInternal;
extern StreamEventsRequestDefaultTypeInternal _StreamEventsRequest_default_instance_;
class StreamEventsRequest_Events;
struct StreamEventsRequest_EventsDefaultTypeInternal;
extern StreamEventsRequest_EventsDefaultTypeInternal _StreamEventsRequest_Events_default_instance_;
class StreamEventsResponse;
struct StreamEventsResponseDefaultTypeInternal;
extern StreamEventsResponseDefaultTypeInternal _StreamEventsResponse_default_instance_;
class TriggerEventRequest;
struct TriggerEventRequestDefaultTypeInternal;
extern TriggerEventRequestDefaultTypeInternal _TriggerEventRequest_default_instance_;
class TriggerEventResponse;
struct TriggerEventResponseDefaultTypeInternal;
extern TriggerEventResponseDefaultTypeInternal _TriggerEventResponse_default_instance_;
}  // namespace v1
}  // namespace inputcontroller
}  // namespace component
}  // namespace viam
PROTOBUF_NAMESPACE_OPEN
template<> ::viam::component::inputcontroller::v1::Event* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::Event>(Arena*);
template<> ::viam::component::inputcontroller::v1::GetControlsRequest* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::GetControlsRequest>(Arena*);
template<> ::viam::component::inputcontroller::v1::GetControlsResponse* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::GetControlsResponse>(Arena*);
template<> ::viam::component::inputcontroller::v1::GetEventsRequest* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::GetEventsRequest>(Arena*);
template<> ::viam::component::inputcontroller::v1::GetEventsResponse* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::GetEventsResponse>(Arena*);
template<> ::viam::component::inputcontroller::v1::Status* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::Status>(Arena*);
template<> ::viam::component::inputcontroller::v1::StreamEventsRequest* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::StreamEventsRequest>(Arena*);
template<> ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::StreamEventsRequest_Events>(Arena*);
template<> ::viam::component::inputcontroller::v1::StreamEventsResponse* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::StreamEventsResponse>(Arena*);
template<> ::viam::component::inputcontroller::v1::TriggerEventRequest* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::TriggerEventRequest>(Arena*);
template<> ::viam::component::inputcontroller::v1::TriggerEventResponse* Arena::CreateMaybeMessage<::viam::component::inputcontroller::v1::TriggerEventResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace viam {
namespace component {
namespace inputcontroller {
namespace v1 {

// ===================================================================

class GetControlsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.GetControlsRequest) */ {
 public:
  inline GetControlsRequest() : GetControlsRequest(nullptr) {}
  ~GetControlsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetControlsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetControlsRequest(const GetControlsRequest& from);
  GetControlsRequest(GetControlsRequest&& from) noexcept
    : GetControlsRequest() {
    *this = ::std::move(from);
  }

  inline GetControlsRequest& operator=(const GetControlsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetControlsRequest& operator=(GetControlsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetControlsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetControlsRequest* internal_default_instance() {
    return reinterpret_cast<const GetControlsRequest*>(
               &_GetControlsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetControlsRequest& a, GetControlsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetControlsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetControlsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetControlsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetControlsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetControlsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetControlsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetControlsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.GetControlsRequest";
  }
  protected:
  explicit GetControlsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string controller = 1 [json_name = "controller"];
  void clear_controller();
  const std::string& controller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller();
  PROTOBUF_NODISCARD std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.GetControlsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class GetControlsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.GetControlsResponse) */ {
 public:
  inline GetControlsResponse() : GetControlsResponse(nullptr) {}
  ~GetControlsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetControlsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetControlsResponse(const GetControlsResponse& from);
  GetControlsResponse(GetControlsResponse&& from) noexcept
    : GetControlsResponse() {
    *this = ::std::move(from);
  }

  inline GetControlsResponse& operator=(const GetControlsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetControlsResponse& operator=(GetControlsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetControlsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetControlsResponse* internal_default_instance() {
    return reinterpret_cast<const GetControlsResponse*>(
               &_GetControlsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetControlsResponse& a, GetControlsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetControlsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetControlsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetControlsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetControlsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetControlsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetControlsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetControlsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.GetControlsResponse";
  }
  protected:
  explicit GetControlsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlsFieldNumber = 1,
  };
  // repeated string controls = 1 [json_name = "controls"];
  int controls_size() const;
  private:
  int _internal_controls_size() const;
  public:
  void clear_controls();
  const std::string& controls(int index) const;
  std::string* mutable_controls(int index);
  void set_controls(int index, const std::string& value);
  void set_controls(int index, std::string&& value);
  void set_controls(int index, const char* value);
  void set_controls(int index, const char* value, size_t size);
  std::string* add_controls();
  void add_controls(const std::string& value);
  void add_controls(std::string&& value);
  void add_controls(const char* value);
  void add_controls(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& controls() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_controls();
  private:
  const std::string& _internal_controls(int index) const;
  std::string* _internal_add_controls();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.GetControlsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> controls_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class GetEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.GetEventsRequest) */ {
 public:
  inline GetEventsRequest() : GetEventsRequest(nullptr) {}
  ~GetEventsRequest() override;
  explicit PROTOBUF_CONSTEXPR GetEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEventsRequest(const GetEventsRequest& from);
  GetEventsRequest(GetEventsRequest&& from) noexcept
    : GetEventsRequest() {
    *this = ::std::move(from);
  }

  inline GetEventsRequest& operator=(const GetEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsRequest& operator=(GetEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsRequest* internal_default_instance() {
    return reinterpret_cast<const GetEventsRequest*>(
               &_GetEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetEventsRequest& a, GetEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetEventsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.GetEventsRequest";
  }
  protected:
  explicit GetEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // string controller = 1 [json_name = "controller"];
  void clear_controller();
  const std::string& controller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller();
  PROTOBUF_NODISCARD std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.GetEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class GetEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.GetEventsResponse) */ {
 public:
  inline GetEventsResponse() : GetEventsResponse(nullptr) {}
  ~GetEventsResponse() override;
  explicit PROTOBUF_CONSTEXPR GetEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetEventsResponse(const GetEventsResponse& from);
  GetEventsResponse(GetEventsResponse&& from) noexcept
    : GetEventsResponse() {
    *this = ::std::move(from);
  }

  inline GetEventsResponse& operator=(const GetEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetEventsResponse& operator=(GetEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetEventsResponse* internal_default_instance() {
    return reinterpret_cast<const GetEventsResponse*>(
               &_GetEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetEventsResponse& a, GetEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetEventsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetEventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetEventsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetEventsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetEventsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.GetEventsResponse";
  }
  protected:
  explicit GetEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .viam.component.inputcontroller.v1.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::viam::component::inputcontroller::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >*
      mutable_events();
  private:
  const ::viam::component::inputcontroller::v1::Event& _internal_events(int index) const;
  ::viam::component::inputcontroller::v1::Event* _internal_add_events();
  public:
  const ::viam::component::inputcontroller::v1::Event& events(int index) const;
  ::viam::component::inputcontroller::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.GetEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class TriggerEventRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.TriggerEventRequest) */ {
 public:
  inline TriggerEventRequest() : TriggerEventRequest(nullptr) {}
  ~TriggerEventRequest() override;
  explicit PROTOBUF_CONSTEXPR TriggerEventRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TriggerEventRequest(const TriggerEventRequest& from);
  TriggerEventRequest(TriggerEventRequest&& from) noexcept
    : TriggerEventRequest() {
    *this = ::std::move(from);
  }

  inline TriggerEventRequest& operator=(const TriggerEventRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerEventRequest& operator=(TriggerEventRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TriggerEventRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const TriggerEventRequest* internal_default_instance() {
    return reinterpret_cast<const TriggerEventRequest*>(
               &_TriggerEventRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TriggerEventRequest& a, TriggerEventRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerEventRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerEventRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TriggerEventRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TriggerEventRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TriggerEventRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TriggerEventRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TriggerEventRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.TriggerEventRequest";
  }
  protected:
  explicit TriggerEventRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllerFieldNumber = 1,
    kEventFieldNumber = 2,
    kExtraFieldNumber = 99,
  };
  // string controller = 1 [json_name = "controller"];
  void clear_controller();
  const std::string& controller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller();
  PROTOBUF_NODISCARD std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // .viam.component.inputcontroller.v1.Event event = 2 [json_name = "event"];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::viam::component::inputcontroller::v1::Event& event() const;
  PROTOBUF_NODISCARD ::viam::component::inputcontroller::v1::Event* release_event();
  ::viam::component::inputcontroller::v1::Event* mutable_event();
  void set_allocated_event(::viam::component::inputcontroller::v1::Event* event);
  private:
  const ::viam::component::inputcontroller::v1::Event& _internal_event() const;
  ::viam::component::inputcontroller::v1::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::viam::component::inputcontroller::v1::Event* event);
  ::viam::component::inputcontroller::v1::Event* unsafe_arena_release_event();

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.TriggerEventRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::viam::component::inputcontroller::v1::Event* event_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class TriggerEventResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.TriggerEventResponse) */ {
 public:
  inline TriggerEventResponse() : TriggerEventResponse(nullptr) {}
  explicit PROTOBUF_CONSTEXPR TriggerEventResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TriggerEventResponse(const TriggerEventResponse& from);
  TriggerEventResponse(TriggerEventResponse&& from) noexcept
    : TriggerEventResponse() {
    *this = ::std::move(from);
  }

  inline TriggerEventResponse& operator=(const TriggerEventResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline TriggerEventResponse& operator=(TriggerEventResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TriggerEventResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const TriggerEventResponse* internal_default_instance() {
    return reinterpret_cast<const TriggerEventResponse*>(
               &_TriggerEventResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TriggerEventResponse& a, TriggerEventResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(TriggerEventResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TriggerEventResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TriggerEventResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TriggerEventResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const TriggerEventResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const TriggerEventResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.TriggerEventResponse";
  }
  protected:
  explicit TriggerEventResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.TriggerEventResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit PROTOBUF_CONSTEXPR Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 2,
    kControlFieldNumber = 3,
    kTimeFieldNumber = 1,
    kValueFieldNumber = 4,
  };
  // string event = 2 [json_name = "event"];
  void clear_event();
  const std::string& event() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_event(ArgT0&& arg0, ArgT... args);
  std::string* mutable_event();
  PROTOBUF_NODISCARD std::string* release_event();
  void set_allocated_event(std::string* event);
  private:
  const std::string& _internal_event() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_event(const std::string& value);
  std::string* _internal_mutable_event();
  public:

  // string control = 3 [json_name = "control"];
  void clear_control();
  const std::string& control() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_control(ArgT0&& arg0, ArgT... args);
  std::string* mutable_control();
  PROTOBUF_NODISCARD std::string* release_control();
  void set_allocated_control(std::string* control);
  private:
  const std::string& _internal_control() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control(const std::string& value);
  std::string* _internal_mutable_control();
  public:

  // .google.protobuf.Timestamp time = 1 [json_name = "time"];
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // double value = 4 [json_name = "value"];
  void clear_value();
  double value() const;
  void set_value(double value);
  private:
  double _internal_value() const;
  void _internal_set_value(double value);
  public:

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  double value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class StreamEventsRequest_Events final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.StreamEventsRequest.Events) */ {
 public:
  inline StreamEventsRequest_Events() : StreamEventsRequest_Events(nullptr) {}
  ~StreamEventsRequest_Events() override;
  explicit PROTOBUF_CONSTEXPR StreamEventsRequest_Events(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamEventsRequest_Events(const StreamEventsRequest_Events& from);
  StreamEventsRequest_Events(StreamEventsRequest_Events&& from) noexcept
    : StreamEventsRequest_Events() {
    *this = ::std::move(from);
  }

  inline StreamEventsRequest_Events& operator=(const StreamEventsRequest_Events& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsRequest_Events& operator=(StreamEventsRequest_Events&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamEventsRequest_Events& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamEventsRequest_Events* internal_default_instance() {
    return reinterpret_cast<const StreamEventsRequest_Events*>(
               &_StreamEventsRequest_Events_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(StreamEventsRequest_Events& a, StreamEventsRequest_Events& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsRequest_Events* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsRequest_Events* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamEventsRequest_Events* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamEventsRequest_Events>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamEventsRequest_Events& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamEventsRequest_Events& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsRequest_Events* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.StreamEventsRequest.Events";
  }
  protected:
  explicit StreamEventsRequest_Events(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kCancelledEventsFieldNumber = 3,
    kControlFieldNumber = 1,
  };
  // repeated string events = 2 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  const std::string& events(int index) const;
  std::string* mutable_events(int index);
  void set_events(int index, const std::string& value);
  void set_events(int index, std::string&& value);
  void set_events(int index, const char* value);
  void set_events(int index, const char* value, size_t size);
  std::string* add_events();
  void add_events(const std::string& value);
  void add_events(std::string&& value);
  void add_events(const char* value);
  void add_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_events();
  private:
  const std::string& _internal_events(int index) const;
  std::string* _internal_add_events();
  public:

  // repeated string cancelled_events = 3 [json_name = "cancelledEvents"];
  int cancelled_events_size() const;
  private:
  int _internal_cancelled_events_size() const;
  public:
  void clear_cancelled_events();
  const std::string& cancelled_events(int index) const;
  std::string* mutable_cancelled_events(int index);
  void set_cancelled_events(int index, const std::string& value);
  void set_cancelled_events(int index, std::string&& value);
  void set_cancelled_events(int index, const char* value);
  void set_cancelled_events(int index, const char* value, size_t size);
  std::string* add_cancelled_events();
  void add_cancelled_events(const std::string& value);
  void add_cancelled_events(std::string&& value);
  void add_cancelled_events(const char* value);
  void add_cancelled_events(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& cancelled_events() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_cancelled_events();
  private:
  const std::string& _internal_cancelled_events(int index) const;
  std::string* _internal_add_cancelled_events();
  public:

  // string control = 1 [json_name = "control"];
  void clear_control();
  const std::string& control() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_control(ArgT0&& arg0, ArgT... args);
  std::string* mutable_control();
  PROTOBUF_NODISCARD std::string* release_control();
  void set_allocated_control(std::string* control);
  private:
  const std::string& _internal_control() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_control(const std::string& value);
  std::string* _internal_mutable_control();
  public:

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.StreamEventsRequest.Events)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> events_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> cancelled_events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr control_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class StreamEventsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.StreamEventsRequest) */ {
 public:
  inline StreamEventsRequest() : StreamEventsRequest(nullptr) {}
  ~StreamEventsRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamEventsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamEventsRequest(const StreamEventsRequest& from);
  StreamEventsRequest(StreamEventsRequest&& from) noexcept
    : StreamEventsRequest() {
    *this = ::std::move(from);
  }

  inline StreamEventsRequest& operator=(const StreamEventsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsRequest& operator=(StreamEventsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamEventsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamEventsRequest* internal_default_instance() {
    return reinterpret_cast<const StreamEventsRequest*>(
               &_StreamEventsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(StreamEventsRequest& a, StreamEventsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamEventsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamEventsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamEventsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamEventsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.StreamEventsRequest";
  }
  protected:
  explicit StreamEventsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StreamEventsRequest_Events Events;

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 2,
    kControllerFieldNumber = 1,
    kExtraFieldNumber = 99,
  };
  // repeated .viam.component.inputcontroller.v1.StreamEventsRequest.Events events = 2 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::StreamEventsRequest_Events >*
      mutable_events();
  private:
  const ::viam::component::inputcontroller::v1::StreamEventsRequest_Events& _internal_events(int index) const;
  ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* _internal_add_events();
  public:
  const ::viam::component::inputcontroller::v1::StreamEventsRequest_Events& events(int index) const;
  ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::StreamEventsRequest_Events >&
      events() const;

  // string controller = 1 [json_name = "controller"];
  void clear_controller();
  const std::string& controller() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_controller(ArgT0&& arg0, ArgT... args);
  std::string* mutable_controller();
  PROTOBUF_NODISCARD std::string* release_controller();
  void set_allocated_controller(std::string* controller);
  private:
  const std::string& _internal_controller() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_controller(const std::string& value);
  std::string* _internal_mutable_controller();
  public:

  // .google.protobuf.Struct extra = 99 [json_name = "extra"];
  bool has_extra() const;
  private:
  bool _internal_has_extra() const;
  public:
  void clear_extra();
  const ::PROTOBUF_NAMESPACE_ID::Struct& extra() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Struct* release_extra();
  ::PROTOBUF_NAMESPACE_ID::Struct* mutable_extra();
  void set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Struct& _internal_extra() const;
  ::PROTOBUF_NAMESPACE_ID::Struct* _internal_mutable_extra();
  public:
  void unsafe_arena_set_allocated_extra(
      ::PROTOBUF_NAMESPACE_ID::Struct* extra);
  ::PROTOBUF_NAMESPACE_ID::Struct* unsafe_arena_release_extra();

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.StreamEventsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::StreamEventsRequest_Events > events_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr controller_;
  ::PROTOBUF_NAMESPACE_ID::Struct* extra_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class StreamEventsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.StreamEventsResponse) */ {
 public:
  inline StreamEventsResponse() : StreamEventsResponse(nullptr) {}
  ~StreamEventsResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamEventsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamEventsResponse(const StreamEventsResponse& from);
  StreamEventsResponse(StreamEventsResponse&& from) noexcept
    : StreamEventsResponse() {
    *this = ::std::move(from);
  }

  inline StreamEventsResponse& operator=(const StreamEventsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamEventsResponse& operator=(StreamEventsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamEventsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamEventsResponse* internal_default_instance() {
    return reinterpret_cast<const StreamEventsResponse*>(
               &_StreamEventsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(StreamEventsResponse& a, StreamEventsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamEventsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamEventsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamEventsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamEventsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamEventsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StreamEventsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamEventsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.StreamEventsResponse";
  }
  protected:
  explicit StreamEventsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .viam.component.inputcontroller.v1.Event event = 1 [json_name = "event"];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::viam::component::inputcontroller::v1::Event& event() const;
  PROTOBUF_NODISCARD ::viam::component::inputcontroller::v1::Event* release_event();
  ::viam::component::inputcontroller::v1::Event* mutable_event();
  void set_allocated_event(::viam::component::inputcontroller::v1::Event* event);
  private:
  const ::viam::component::inputcontroller::v1::Event& _internal_event() const;
  ::viam::component::inputcontroller::v1::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::viam::component::inputcontroller::v1::Event* event);
  ::viam::component::inputcontroller::v1::Event* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.StreamEventsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::viam::component::inputcontroller::v1::Event* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// -------------------------------------------------------------------

class Status final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:viam.component.inputcontroller.v1.Status) */ {
 public:
  inline Status() : Status(nullptr) {}
  ~Status() override;
  explicit PROTOBUF_CONSTEXPR Status(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Status(const Status& from);
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  inline Status& operator=(Status&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Status& default_instance() {
    return *internal_default_instance();
  }
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }
  inline void Swap(Status* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Status* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Status* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Status& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Status& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "viam.component.inputcontroller.v1.Status";
  }
  protected:
  explicit Status(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventsFieldNumber = 1,
  };
  // repeated .viam.component.inputcontroller.v1.Event events = 1 [json_name = "events"];
  int events_size() const;
  private:
  int _internal_events_size() const;
  public:
  void clear_events();
  ::viam::component::inputcontroller::v1::Event* mutable_events(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >*
      mutable_events();
  private:
  const ::viam::component::inputcontroller::v1::Event& _internal_events(int index) const;
  ::viam::component::inputcontroller::v1::Event* _internal_add_events();
  public:
  const ::viam::component::inputcontroller::v1::Event& events(int index) const;
  ::viam::component::inputcontroller::v1::Event* add_events();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >&
      events() const;

  // @@protoc_insertion_point(class_scope:viam.component.inputcontroller.v1.Status)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event > events_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetControlsRequest

// string controller = 1 [json_name = "controller"];
inline void GetControlsRequest::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& GetControlsRequest::controller() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.GetControlsRequest.controller)
  return _internal_controller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetControlsRequest::set_controller(ArgT0&& arg0, ArgT... args) {
 
 controller_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.GetControlsRequest.controller)
}
inline std::string* GetControlsRequest::mutable_controller() {
  std::string* _s = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.GetControlsRequest.controller)
  return _s;
}
inline const std::string& GetControlsRequest::_internal_controller() const {
  return controller_.Get();
}
inline void GetControlsRequest::_internal_set_controller(const std::string& value) {
  
  controller_.Set(value, GetArenaForAllocation());
}
inline std::string* GetControlsRequest::_internal_mutable_controller() {
  
  return controller_.Mutable(GetArenaForAllocation());
}
inline std::string* GetControlsRequest::release_controller() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.GetControlsRequest.controller)
  return controller_.Release();
}
inline void GetControlsRequest::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(controller, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_.IsDefault()) {
    controller_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.GetControlsRequest.controller)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetControlsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetControlsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetControlsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetControlsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.GetControlsRequest.extra)
  return _internal_extra();
}
inline void GetControlsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.GetControlsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetControlsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetControlsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.GetControlsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetControlsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetControlsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.GetControlsRequest.extra)
  return _msg;
}
inline void GetControlsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.GetControlsRequest.extra)
}

// -------------------------------------------------------------------

// GetControlsResponse

// repeated string controls = 1 [json_name = "controls"];
inline int GetControlsResponse::_internal_controls_size() const {
  return controls_.size();
}
inline int GetControlsResponse::controls_size() const {
  return _internal_controls_size();
}
inline void GetControlsResponse::clear_controls() {
  controls_.Clear();
}
inline std::string* GetControlsResponse::add_controls() {
  std::string* _s = _internal_add_controls();
  // @@protoc_insertion_point(field_add_mutable:viam.component.inputcontroller.v1.GetControlsResponse.controls)
  return _s;
}
inline const std::string& GetControlsResponse::_internal_controls(int index) const {
  return controls_.Get(index);
}
inline const std::string& GetControlsResponse::controls(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.GetControlsResponse.controls)
  return _internal_controls(index);
}
inline std::string* GetControlsResponse::mutable_controls(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.GetControlsResponse.controls)
  return controls_.Mutable(index);
}
inline void GetControlsResponse::set_controls(int index, const std::string& value) {
  controls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline void GetControlsResponse::set_controls(int index, std::string&& value) {
  controls_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline void GetControlsResponse::set_controls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  controls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline void GetControlsResponse::set_controls(int index, const char* value, size_t size) {
  controls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline std::string* GetControlsResponse::_internal_add_controls() {
  return controls_.Add();
}
inline void GetControlsResponse::add_controls(const std::string& value) {
  controls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline void GetControlsResponse::add_controls(std::string&& value) {
  controls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline void GetControlsResponse::add_controls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  controls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline void GetControlsResponse::add_controls(const char* value, size_t size) {
  controls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.component.inputcontroller.v1.GetControlsResponse.controls)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetControlsResponse::controls() const {
  // @@protoc_insertion_point(field_list:viam.component.inputcontroller.v1.GetControlsResponse.controls)
  return controls_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetControlsResponse::mutable_controls() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.inputcontroller.v1.GetControlsResponse.controls)
  return &controls_;
}

// -------------------------------------------------------------------

// GetEventsRequest

// string controller = 1 [json_name = "controller"];
inline void GetEventsRequest::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& GetEventsRequest::controller() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.GetEventsRequest.controller)
  return _internal_controller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetEventsRequest::set_controller(ArgT0&& arg0, ArgT... args) {
 
 controller_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.GetEventsRequest.controller)
}
inline std::string* GetEventsRequest::mutable_controller() {
  std::string* _s = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.GetEventsRequest.controller)
  return _s;
}
inline const std::string& GetEventsRequest::_internal_controller() const {
  return controller_.Get();
}
inline void GetEventsRequest::_internal_set_controller(const std::string& value) {
  
  controller_.Set(value, GetArenaForAllocation());
}
inline std::string* GetEventsRequest::_internal_mutable_controller() {
  
  return controller_.Mutable(GetArenaForAllocation());
}
inline std::string* GetEventsRequest::release_controller() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.GetEventsRequest.controller)
  return controller_.Release();
}
inline void GetEventsRequest::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(controller, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_.IsDefault()) {
    controller_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.GetEventsRequest.controller)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool GetEventsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool GetEventsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetEventsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& GetEventsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.GetEventsRequest.extra)
  return _internal_extra();
}
inline void GetEventsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.GetEventsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEventsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEventsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.GetEventsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEventsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* GetEventsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.GetEventsRequest.extra)
  return _msg;
}
inline void GetEventsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.GetEventsRequest.extra)
}

// -------------------------------------------------------------------

// GetEventsResponse

// repeated .viam.component.inputcontroller.v1.Event events = 1 [json_name = "events"];
inline int GetEventsResponse::_internal_events_size() const {
  return events_.size();
}
inline int GetEventsResponse::events_size() const {
  return _internal_events_size();
}
inline void GetEventsResponse::clear_events() {
  events_.Clear();
}
inline ::viam::component::inputcontroller::v1::Event* GetEventsResponse::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.GetEventsResponse.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >*
GetEventsResponse::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.inputcontroller.v1.GetEventsResponse.events)
  return &events_;
}
inline const ::viam::component::inputcontroller::v1::Event& GetEventsResponse::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::viam::component::inputcontroller::v1::Event& GetEventsResponse::events(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.GetEventsResponse.events)
  return _internal_events(index);
}
inline ::viam::component::inputcontroller::v1::Event* GetEventsResponse::_internal_add_events() {
  return events_.Add();
}
inline ::viam::component::inputcontroller::v1::Event* GetEventsResponse::add_events() {
  ::viam::component::inputcontroller::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.GetEventsResponse.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >&
GetEventsResponse::events() const {
  // @@protoc_insertion_point(field_list:viam.component.inputcontroller.v1.GetEventsResponse.events)
  return events_;
}

// -------------------------------------------------------------------

// TriggerEventRequest

// string controller = 1 [json_name = "controller"];
inline void TriggerEventRequest::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& TriggerEventRequest::controller() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.TriggerEventRequest.controller)
  return _internal_controller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TriggerEventRequest::set_controller(ArgT0&& arg0, ArgT... args) {
 
 controller_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.TriggerEventRequest.controller)
}
inline std::string* TriggerEventRequest::mutable_controller() {
  std::string* _s = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.TriggerEventRequest.controller)
  return _s;
}
inline const std::string& TriggerEventRequest::_internal_controller() const {
  return controller_.Get();
}
inline void TriggerEventRequest::_internal_set_controller(const std::string& value) {
  
  controller_.Set(value, GetArenaForAllocation());
}
inline std::string* TriggerEventRequest::_internal_mutable_controller() {
  
  return controller_.Mutable(GetArenaForAllocation());
}
inline std::string* TriggerEventRequest::release_controller() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.TriggerEventRequest.controller)
  return controller_.Release();
}
inline void TriggerEventRequest::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(controller, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_.IsDefault()) {
    controller_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.TriggerEventRequest.controller)
}

// .viam.component.inputcontroller.v1.Event event = 2 [json_name = "event"];
inline bool TriggerEventRequest::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool TriggerEventRequest::has_event() const {
  return _internal_has_event();
}
inline void TriggerEventRequest::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::viam::component::inputcontroller::v1::Event& TriggerEventRequest::_internal_event() const {
  const ::viam::component::inputcontroller::v1::Event* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::inputcontroller::v1::Event&>(
      ::viam::component::inputcontroller::v1::_Event_default_instance_);
}
inline const ::viam::component::inputcontroller::v1::Event& TriggerEventRequest::event() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.TriggerEventRequest.event)
  return _internal_event();
}
inline void TriggerEventRequest::unsafe_arena_set_allocated_event(
    ::viam::component::inputcontroller::v1::Event* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.TriggerEventRequest.event)
}
inline ::viam::component::inputcontroller::v1::Event* TriggerEventRequest::release_event() {
  
  ::viam::component::inputcontroller::v1::Event* temp = event_;
  event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::inputcontroller::v1::Event* TriggerEventRequest::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.TriggerEventRequest.event)
  
  ::viam::component::inputcontroller::v1::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::viam::component::inputcontroller::v1::Event* TriggerEventRequest::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::inputcontroller::v1::Event>(GetArenaForAllocation());
    event_ = p;
  }
  return event_;
}
inline ::viam::component::inputcontroller::v1::Event* TriggerEventRequest::mutable_event() {
  ::viam::component::inputcontroller::v1::Event* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.TriggerEventRequest.event)
  return _msg;
}
inline void TriggerEventRequest::set_allocated_event(::viam::component::inputcontroller::v1::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.TriggerEventRequest.event)
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool TriggerEventRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool TriggerEventRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TriggerEventRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& TriggerEventRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.TriggerEventRequest.extra)
  return _internal_extra();
}
inline void TriggerEventRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.TriggerEventRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TriggerEventRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TriggerEventRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.TriggerEventRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TriggerEventRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* TriggerEventRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.TriggerEventRequest.extra)
  return _msg;
}
inline void TriggerEventRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.TriggerEventRequest.extra)
}

// -------------------------------------------------------------------

// TriggerEventResponse

// -------------------------------------------------------------------

// Event

// .google.protobuf.Timestamp time = 1 [json_name = "time"];
inline bool Event::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Event::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Event::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Event::time() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.Event.time)
  return _internal_time();
}
inline void Event::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.Event.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.Event.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Event::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.Event.time)
  return _msg;
}
inline void Event::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.Event.time)
}

// string event = 2 [json_name = "event"];
inline void Event::clear_event() {
  event_.ClearToEmpty();
}
inline const std::string& Event::event() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.Event.event)
  return _internal_event();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_event(ArgT0&& arg0, ArgT... args) {
 
 event_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.Event.event)
}
inline std::string* Event::mutable_event() {
  std::string* _s = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.Event.event)
  return _s;
}
inline const std::string& Event::_internal_event() const {
  return event_.Get();
}
inline void Event::_internal_set_event(const std::string& value) {
  
  event_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_event() {
  
  return event_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_event() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.Event.event)
  return event_.Release();
}
inline void Event::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocated(event, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (event_.IsDefault()) {
    event_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.Event.event)
}

// string control = 3 [json_name = "control"];
inline void Event::clear_control() {
  control_.ClearToEmpty();
}
inline const std::string& Event::control() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.Event.control)
  return _internal_control();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Event::set_control(ArgT0&& arg0, ArgT... args) {
 
 control_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.Event.control)
}
inline std::string* Event::mutable_control() {
  std::string* _s = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.Event.control)
  return _s;
}
inline const std::string& Event::_internal_control() const {
  return control_.Get();
}
inline void Event::_internal_set_control(const std::string& value) {
  
  control_.Set(value, GetArenaForAllocation());
}
inline std::string* Event::_internal_mutable_control() {
  
  return control_.Mutable(GetArenaForAllocation());
}
inline std::string* Event::release_control() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.Event.control)
  return control_.Release();
}
inline void Event::set_allocated_control(std::string* control) {
  if (control != nullptr) {
    
  } else {
    
  }
  control_.SetAllocated(control, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (control_.IsDefault()) {
    control_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.Event.control)
}

// double value = 4 [json_name = "value"];
inline void Event::clear_value() {
  value_ = 0;
}
inline double Event::_internal_value() const {
  return value_;
}
inline double Event::value() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.Event.value)
  return _internal_value();
}
inline void Event::_internal_set_value(double value) {
  
  value_ = value;
}
inline void Event::set_value(double value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.Event.value)
}

// -------------------------------------------------------------------

// StreamEventsRequest_Events

// string control = 1 [json_name = "control"];
inline void StreamEventsRequest_Events::clear_control() {
  control_.ClearToEmpty();
}
inline const std::string& StreamEventsRequest_Events::control() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsRequest.Events.control)
  return _internal_control();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamEventsRequest_Events::set_control(ArgT0&& arg0, ArgT... args) {
 
 control_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.StreamEventsRequest.Events.control)
}
inline std::string* StreamEventsRequest_Events::mutable_control() {
  std::string* _s = _internal_mutable_control();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.Events.control)
  return _s;
}
inline const std::string& StreamEventsRequest_Events::_internal_control() const {
  return control_.Get();
}
inline void StreamEventsRequest_Events::_internal_set_control(const std::string& value) {
  
  control_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamEventsRequest_Events::_internal_mutable_control() {
  
  return control_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamEventsRequest_Events::release_control() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.StreamEventsRequest.Events.control)
  return control_.Release();
}
inline void StreamEventsRequest_Events::set_allocated_control(std::string* control) {
  if (control != nullptr) {
    
  } else {
    
  }
  control_.SetAllocated(control, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (control_.IsDefault()) {
    control_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.StreamEventsRequest.Events.control)
}

// repeated string events = 2 [json_name = "events"];
inline int StreamEventsRequest_Events::_internal_events_size() const {
  return events_.size();
}
inline int StreamEventsRequest_Events::events_size() const {
  return _internal_events_size();
}
inline void StreamEventsRequest_Events::clear_events() {
  events_.Clear();
}
inline std::string* StreamEventsRequest_Events::add_events() {
  std::string* _s = _internal_add_events();
  // @@protoc_insertion_point(field_add_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
  return _s;
}
inline const std::string& StreamEventsRequest_Events::_internal_events(int index) const {
  return events_.Get(index);
}
inline const std::string& StreamEventsRequest_Events::events(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
  return _internal_events(index);
}
inline std::string* StreamEventsRequest_Events::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
  return events_.Mutable(index);
}
inline void StreamEventsRequest_Events::set_events(int index, const std::string& value) {
  events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline void StreamEventsRequest_Events::set_events(int index, std::string&& value) {
  events_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline void StreamEventsRequest_Events::set_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline void StreamEventsRequest_Events::set_events(int index, const char* value, size_t size) {
  events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline std::string* StreamEventsRequest_Events::_internal_add_events() {
  return events_.Add();
}
inline void StreamEventsRequest_Events::add_events(const std::string& value) {
  events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline void StreamEventsRequest_Events::add_events(std::string&& value) {
  events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline void StreamEventsRequest_Events::add_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline void StreamEventsRequest_Events::add_events(const char* value, size_t size) {
  events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamEventsRequest_Events::events() const {
  // @@protoc_insertion_point(field_list:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
  return events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamEventsRequest_Events::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.inputcontroller.v1.StreamEventsRequest.Events.events)
  return &events_;
}

// repeated string cancelled_events = 3 [json_name = "cancelledEvents"];
inline int StreamEventsRequest_Events::_internal_cancelled_events_size() const {
  return cancelled_events_.size();
}
inline int StreamEventsRequest_Events::cancelled_events_size() const {
  return _internal_cancelled_events_size();
}
inline void StreamEventsRequest_Events::clear_cancelled_events() {
  cancelled_events_.Clear();
}
inline std::string* StreamEventsRequest_Events::add_cancelled_events() {
  std::string* _s = _internal_add_cancelled_events();
  // @@protoc_insertion_point(field_add_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
  return _s;
}
inline const std::string& StreamEventsRequest_Events::_internal_cancelled_events(int index) const {
  return cancelled_events_.Get(index);
}
inline const std::string& StreamEventsRequest_Events::cancelled_events(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
  return _internal_cancelled_events(index);
}
inline std::string* StreamEventsRequest_Events::mutable_cancelled_events(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
  return cancelled_events_.Mutable(index);
}
inline void StreamEventsRequest_Events::set_cancelled_events(int index, const std::string& value) {
  cancelled_events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline void StreamEventsRequest_Events::set_cancelled_events(int index, std::string&& value) {
  cancelled_events_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline void StreamEventsRequest_Events::set_cancelled_events(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cancelled_events_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline void StreamEventsRequest_Events::set_cancelled_events(int index, const char* value, size_t size) {
  cancelled_events_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline std::string* StreamEventsRequest_Events::_internal_add_cancelled_events() {
  return cancelled_events_.Add();
}
inline void StreamEventsRequest_Events::add_cancelled_events(const std::string& value) {
  cancelled_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline void StreamEventsRequest_Events::add_cancelled_events(std::string&& value) {
  cancelled_events_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline void StreamEventsRequest_Events::add_cancelled_events(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  cancelled_events_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline void StreamEventsRequest_Events::add_cancelled_events(const char* value, size_t size) {
  cancelled_events_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
StreamEventsRequest_Events::cancelled_events() const {
  // @@protoc_insertion_point(field_list:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
  return cancelled_events_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
StreamEventsRequest_Events::mutable_cancelled_events() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.inputcontroller.v1.StreamEventsRequest.Events.cancelled_events)
  return &cancelled_events_;
}

// -------------------------------------------------------------------

// StreamEventsRequest

// string controller = 1 [json_name = "controller"];
inline void StreamEventsRequest::clear_controller() {
  controller_.ClearToEmpty();
}
inline const std::string& StreamEventsRequest::controller() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsRequest.controller)
  return _internal_controller();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamEventsRequest::set_controller(ArgT0&& arg0, ArgT... args) {
 
 controller_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:viam.component.inputcontroller.v1.StreamEventsRequest.controller)
}
inline std::string* StreamEventsRequest::mutable_controller() {
  std::string* _s = _internal_mutable_controller();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.controller)
  return _s;
}
inline const std::string& StreamEventsRequest::_internal_controller() const {
  return controller_.Get();
}
inline void StreamEventsRequest::_internal_set_controller(const std::string& value) {
  
  controller_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamEventsRequest::_internal_mutable_controller() {
  
  return controller_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamEventsRequest::release_controller() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.StreamEventsRequest.controller)
  return controller_.Release();
}
inline void StreamEventsRequest::set_allocated_controller(std::string* controller) {
  if (controller != nullptr) {
    
  } else {
    
  }
  controller_.SetAllocated(controller, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (controller_.IsDefault()) {
    controller_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.StreamEventsRequest.controller)
}

// repeated .viam.component.inputcontroller.v1.StreamEventsRequest.Events events = 2 [json_name = "events"];
inline int StreamEventsRequest::_internal_events_size() const {
  return events_.size();
}
inline int StreamEventsRequest::events_size() const {
  return _internal_events_size();
}
inline void StreamEventsRequest::clear_events() {
  events_.Clear();
}
inline ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* StreamEventsRequest::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::StreamEventsRequest_Events >*
StreamEventsRequest::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.inputcontroller.v1.StreamEventsRequest.events)
  return &events_;
}
inline const ::viam::component::inputcontroller::v1::StreamEventsRequest_Events& StreamEventsRequest::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::viam::component::inputcontroller::v1::StreamEventsRequest_Events& StreamEventsRequest::events(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsRequest.events)
  return _internal_events(index);
}
inline ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* StreamEventsRequest::_internal_add_events() {
  return events_.Add();
}
inline ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* StreamEventsRequest::add_events() {
  ::viam::component::inputcontroller::v1::StreamEventsRequest_Events* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.StreamEventsRequest.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::StreamEventsRequest_Events >&
StreamEventsRequest::events() const {
  // @@protoc_insertion_point(field_list:viam.component.inputcontroller.v1.StreamEventsRequest.events)
  return events_;
}

// .google.protobuf.Struct extra = 99 [json_name = "extra"];
inline bool StreamEventsRequest::_internal_has_extra() const {
  return this != internal_default_instance() && extra_ != nullptr;
}
inline bool StreamEventsRequest::has_extra() const {
  return _internal_has_extra();
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StreamEventsRequest::_internal_extra() const {
  const ::PROTOBUF_NAMESPACE_ID::Struct* p = extra_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Struct&>(
      ::PROTOBUF_NAMESPACE_ID::_Struct_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Struct& StreamEventsRequest::extra() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsRequest.extra)
  return _internal_extra();
}
inline void StreamEventsRequest::unsafe_arena_set_allocated_extra(
    ::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  extra_ = extra;
  if (extra) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.StreamEventsRequest.extra)
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamEventsRequest::release_extra() {
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamEventsRequest::unsafe_arena_release_extra() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.StreamEventsRequest.extra)
  
  ::PROTOBUF_NAMESPACE_ID::Struct* temp = extra_;
  extra_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamEventsRequest::_internal_mutable_extra() {
  
  if (extra_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Struct>(GetArenaForAllocation());
    extra_ = p;
  }
  return extra_;
}
inline ::PROTOBUF_NAMESPACE_ID::Struct* StreamEventsRequest::mutable_extra() {
  ::PROTOBUF_NAMESPACE_ID::Struct* _msg = _internal_mutable_extra();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsRequest.extra)
  return _msg;
}
inline void StreamEventsRequest::set_allocated_extra(::PROTOBUF_NAMESPACE_ID::Struct* extra) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra_);
  }
  if (extra) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(extra));
    if (message_arena != submessage_arena) {
      extra = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, extra, submessage_arena);
    }
    
  } else {
    
  }
  extra_ = extra;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.StreamEventsRequest.extra)
}

// -------------------------------------------------------------------

// StreamEventsResponse

// .viam.component.inputcontroller.v1.Event event = 1 [json_name = "event"];
inline bool StreamEventsResponse::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool StreamEventsResponse::has_event() const {
  return _internal_has_event();
}
inline void StreamEventsResponse::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::viam::component::inputcontroller::v1::Event& StreamEventsResponse::_internal_event() const {
  const ::viam::component::inputcontroller::v1::Event* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::viam::component::inputcontroller::v1::Event&>(
      ::viam::component::inputcontroller::v1::_Event_default_instance_);
}
inline const ::viam::component::inputcontroller::v1::Event& StreamEventsResponse::event() const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.StreamEventsResponse.event)
  return _internal_event();
}
inline void StreamEventsResponse::unsafe_arena_set_allocated_event(
    ::viam::component::inputcontroller::v1::Event* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:viam.component.inputcontroller.v1.StreamEventsResponse.event)
}
inline ::viam::component::inputcontroller::v1::Event* StreamEventsResponse::release_event() {
  
  ::viam::component::inputcontroller::v1::Event* temp = event_;
  event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::viam::component::inputcontroller::v1::Event* StreamEventsResponse::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:viam.component.inputcontroller.v1.StreamEventsResponse.event)
  
  ::viam::component::inputcontroller::v1::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::viam::component::inputcontroller::v1::Event* StreamEventsResponse::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::viam::component::inputcontroller::v1::Event>(GetArenaForAllocation());
    event_ = p;
  }
  return event_;
}
inline ::viam::component::inputcontroller::v1::Event* StreamEventsResponse::mutable_event() {
  ::viam::component::inputcontroller::v1::Event* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.StreamEventsResponse.event)
  return _msg;
}
inline void StreamEventsResponse::set_allocated_event(::viam::component::inputcontroller::v1::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:viam.component.inputcontroller.v1.StreamEventsResponse.event)
}

// -------------------------------------------------------------------

// Status

// repeated .viam.component.inputcontroller.v1.Event events = 1 [json_name = "events"];
inline int Status::_internal_events_size() const {
  return events_.size();
}
inline int Status::events_size() const {
  return _internal_events_size();
}
inline void Status::clear_events() {
  events_.Clear();
}
inline ::viam::component::inputcontroller::v1::Event* Status::mutable_events(int index) {
  // @@protoc_insertion_point(field_mutable:viam.component.inputcontroller.v1.Status.events)
  return events_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >*
Status::mutable_events() {
  // @@protoc_insertion_point(field_mutable_list:viam.component.inputcontroller.v1.Status.events)
  return &events_;
}
inline const ::viam::component::inputcontroller::v1::Event& Status::_internal_events(int index) const {
  return events_.Get(index);
}
inline const ::viam::component::inputcontroller::v1::Event& Status::events(int index) const {
  // @@protoc_insertion_point(field_get:viam.component.inputcontroller.v1.Status.events)
  return _internal_events(index);
}
inline ::viam::component::inputcontroller::v1::Event* Status::_internal_add_events() {
  return events_.Add();
}
inline ::viam::component::inputcontroller::v1::Event* Status::add_events() {
  ::viam::component::inputcontroller::v1::Event* _add = _internal_add_events();
  // @@protoc_insertion_point(field_add:viam.component.inputcontroller.v1.Status.events)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::viam::component::inputcontroller::v1::Event >&
Status::events() const {
  // @@protoc_insertion_point(field_list:viam.component.inputcontroller.v1.Status.events)
  return events_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace inputcontroller
}  // namespace component
}  // namespace viam

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto
