// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/inputcontroller/v1/input_controller.proto
#ifndef GRPC_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto__INCLUDED
#define GRPC_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto__INCLUDED

#include "component/inputcontroller/v1/input_controller.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace component {
namespace inputcontroller {
namespace v1 {

// InputControllerService servicestains all input controller associated with a robot
class InputControllerService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.component.inputcontroller.v1.InputControllerService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetControls returns a list of GetControls provided by the Controller
    virtual ::grpc::Status GetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::viam::component::inputcontroller::v1::GetControlsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetControlsResponse>> AsyncGetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetControlsResponse>>(AsyncGetControlsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetControlsResponse>> PrepareAsyncGetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetControlsResponse>>(PrepareAsyncGetControlsRaw(context, request, cq));
    }
    // GetEvents returns a list of events representing the last event on each control of a give Input Controller
    virtual ::grpc::Status GetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::viam::component::inputcontroller::v1::GetEventsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetEventsResponse>> AsyncGetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetEventsResponse>>(AsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetEventsResponse>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetEventsResponse>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    // StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller
    std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>> StreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>>(StreamEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>> AsyncStreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>>(AsyncStreamEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>> PrepareAsyncStreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>>(PrepareAsyncStreamEventsRaw(context, request, cq));
    }
    // TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events
    // like button presses or axis movements
    virtual ::grpc::Status TriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::TriggerEventResponse>> AsyncTriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::TriggerEventResponse>>(AsyncTriggerEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::TriggerEventResponse>> PrepareAsyncTriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::TriggerEventResponse>>(PrepareAsyncTriggerEventRaw(context, request, cq));
    }
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetControls returns a list of GetControls provided by the Controller
      virtual void GetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::viam::component::inputcontroller::v1::GetControlsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::viam::component::inputcontroller::v1::GetControlsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetEvents returns a list of events representing the last event on each control of a give Input Controller
      virtual void GetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::viam::component::inputcontroller::v1::GetEventsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::viam::component::inputcontroller::v1::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller
      virtual void StreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest* request, ::grpc::ClientReadReactor< ::viam::component::inputcontroller::v1::StreamEventsResponse>* reactor) = 0;
      // TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events
      // like button presses or axis movements
      virtual void TriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void TriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DoCommand sends/receives arbitrary commands
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetControlsResponse>* AsyncGetControlsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetControlsResponse>* PrepareAsyncGetControlsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetEventsResponse>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::GetEventsResponse>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>* StreamEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>* AsyncStreamEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::viam::component::inputcontroller::v1::StreamEventsResponse>* PrepareAsyncStreamEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::TriggerEventResponse>* AsyncTriggerEventRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::inputcontroller::v1::TriggerEventResponse>* PrepareAsyncTriggerEventRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::viam::component::inputcontroller::v1::GetControlsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetControlsResponse>> AsyncGetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetControlsResponse>>(AsyncGetControlsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetControlsResponse>> PrepareAsyncGetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetControlsResponse>>(PrepareAsyncGetControlsRaw(context, request, cq));
    }
    ::grpc::Status GetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::viam::component::inputcontroller::v1::GetEventsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetEventsResponse>> AsyncGetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetEventsResponse>>(AsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetEventsResponse>> PrepareAsyncGetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetEventsResponse>>(PrepareAsyncGetEventsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>> StreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>>(StreamEventsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>> AsyncStreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>>(AsyncStreamEventsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>> PrepareAsyncStreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>>(PrepareAsyncStreamEventsRaw(context, request, cq));
    }
    ::grpc::Status TriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::TriggerEventResponse>> AsyncTriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::TriggerEventResponse>>(AsyncTriggerEventRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::TriggerEventResponse>> PrepareAsyncTriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::TriggerEventResponse>>(PrepareAsyncTriggerEventRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::viam::component::inputcontroller::v1::GetControlsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetControls(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::viam::component::inputcontroller::v1::GetControlsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::viam::component::inputcontroller::v1::GetEventsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::viam::component::inputcontroller::v1::GetEventsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StreamEvents(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest* request, ::grpc::ClientReadReactor< ::viam::component::inputcontroller::v1::StreamEventsResponse>* reactor) override;
      void TriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response, std::function<void(::grpc::Status)>) override;
      void TriggerEvent(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetControlsResponse>* AsyncGetControlsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetControlsResponse>* PrepareAsyncGetControlsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetEventsResponse>* AsyncGetEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::GetEventsResponse>* PrepareAsyncGetEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>* StreamEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request) override;
    ::grpc::ClientAsyncReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>* AsyncStreamEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::viam::component::inputcontroller::v1::StreamEventsResponse>* PrepareAsyncStreamEventsRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::TriggerEventResponse>* AsyncTriggerEventRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::inputcontroller::v1::TriggerEventResponse>* PrepareAsyncTriggerEventRaw(::grpc::ClientContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetControls_;
    const ::grpc::internal::RpcMethod rpcmethod_GetEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_StreamEvents_;
    const ::grpc::internal::RpcMethod rpcmethod_TriggerEvent_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetControls returns a list of GetControls provided by the Controller
    virtual ::grpc::Status GetControls(::grpc::ServerContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::viam::component::inputcontroller::v1::GetControlsResponse* response);
    // GetEvents returns a list of events representing the last event on each control of a give Input Controller
    virtual ::grpc::Status GetEvents(::grpc::ServerContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::viam::component::inputcontroller::v1::GetEventsResponse* response);
    // StreamEvents starts a stream of InputControllerEvents for the given controls (buttons/axes) on a robot's input controller
    virtual ::grpc::Status StreamEvents(::grpc::ServerContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest* request, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* writer);
    // TriggerEvent, where supported, injects an InputControllerEvent into an input controller to (virtually) generate events
    // like button presses or axis movements
    virtual ::grpc::Status TriggerEvent(::grpc::ServerContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response);
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetControls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetControls() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetControls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControls(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetControls(::grpc::ServerContext* context, ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::inputcontroller::v1::GetControlsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetEvents() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::inputcontroller::v1::GetEventsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StreamEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StreamEvents() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_StreamEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamEvents(::grpc::ServerContext* context, ::viam::component::inputcontroller::v1::StreamEventsRequest* request, ::grpc::ServerAsyncWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TriggerEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TriggerEvent() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_TriggerEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerEvent(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerEvent(::grpc::ServerContext* context, ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::inputcontroller::v1::TriggerEventResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetControls<WithAsyncMethod_GetEvents<WithAsyncMethod_StreamEvents<WithAsyncMethod_TriggerEvent<WithAsyncMethod_DoCommand<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetControls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetControls() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::inputcontroller::v1::GetControlsRequest, ::viam::component::inputcontroller::v1::GetControlsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::inputcontroller::v1::GetControlsRequest* request, ::viam::component::inputcontroller::v1::GetControlsResponse* response) { return this->GetControls(context, request, response); }));}
    void SetMessageAllocatorFor_GetControls(
        ::grpc::MessageAllocator< ::viam::component::inputcontroller::v1::GetControlsRequest, ::viam::component::inputcontroller::v1::GetControlsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::inputcontroller::v1::GetControlsRequest, ::viam::component::inputcontroller::v1::GetControlsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetControls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControls(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetControls(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::inputcontroller::v1::GetEventsRequest, ::viam::component::inputcontroller::v1::GetEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::inputcontroller::v1::GetEventsRequest* request, ::viam::component::inputcontroller::v1::GetEventsResponse* response) { return this->GetEvents(context, request, response); }));}
    void SetMessageAllocatorFor_GetEvents(
        ::grpc::MessageAllocator< ::viam::component::inputcontroller::v1::GetEventsRequest, ::viam::component::inputcontroller::v1::GetEventsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::inputcontroller::v1::GetEventsRequest, ::viam::component::inputcontroller::v1::GetEventsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StreamEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StreamEvents() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::viam::component::inputcontroller::v1::StreamEventsRequest, ::viam::component::inputcontroller::v1::StreamEventsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::inputcontroller::v1::StreamEventsRequest* request) { return this->StreamEvents(context, request); }));
    }
    ~WithCallbackMethod_StreamEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::viam::component::inputcontroller::v1::StreamEventsResponse>* StreamEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TriggerEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TriggerEvent() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::inputcontroller::v1::TriggerEventRequest, ::viam::component::inputcontroller::v1::TriggerEventResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::inputcontroller::v1::TriggerEventRequest* request, ::viam::component::inputcontroller::v1::TriggerEventResponse* response) { return this->TriggerEvent(context, request, response); }));}
    void SetMessageAllocatorFor_TriggerEvent(
        ::grpc::MessageAllocator< ::viam::component::inputcontroller::v1::TriggerEventRequest, ::viam::component::inputcontroller::v1::TriggerEventResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::inputcontroller::v1::TriggerEventRequest, ::viam::component::inputcontroller::v1::TriggerEventResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_TriggerEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerEvent(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetControls<WithCallbackMethod_GetEvents<WithCallbackMethod_StreamEvents<WithCallbackMethod_TriggerEvent<WithCallbackMethod_DoCommand<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetControls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetControls() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetControls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControls(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetEvents() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StreamEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StreamEvents() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_StreamEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TriggerEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TriggerEvent() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_TriggerEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerEvent(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetControls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetControls() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetControls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControls(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetControls(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetEvents() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StreamEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StreamEvents() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_StreamEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStreamEvents(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TriggerEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TriggerEvent() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_TriggerEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerEvent(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTriggerEvent(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetControls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetControls() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetControls(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetControls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetControls(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetControls(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetEvents() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetEvents(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StreamEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StreamEvents() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->StreamEvents(context, request); }));
    }
    ~WithRawCallbackMethod_StreamEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StreamEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* StreamEvents(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TriggerEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TriggerEvent() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->TriggerEvent(context, request, response); }));
    }
    ~WithRawCallbackMethod_TriggerEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TriggerEvent(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* TriggerEvent(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetControls : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetControls() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::inputcontroller::v1::GetControlsRequest, ::viam::component::inputcontroller::v1::GetControlsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::inputcontroller::v1::GetControlsRequest, ::viam::component::inputcontroller::v1::GetControlsResponse>* streamer) {
                       return this->StreamedGetControls(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetControls() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetControls(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetControlsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetControlsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetControls(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::inputcontroller::v1::GetControlsRequest,::viam::component::inputcontroller::v1::GetControlsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetEvents() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::inputcontroller::v1::GetEventsRequest, ::viam::component::inputcontroller::v1::GetEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::inputcontroller::v1::GetEventsRequest, ::viam::component::inputcontroller::v1::GetEventsResponse>* streamer) {
                       return this->StreamedGetEvents(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::GetEventsRequest* /*request*/, ::viam::component::inputcontroller::v1::GetEventsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetEvents(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::inputcontroller::v1::GetEventsRequest,::viam::component::inputcontroller::v1::GetEventsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_TriggerEvent : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_TriggerEvent() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::inputcontroller::v1::TriggerEventRequest, ::viam::component::inputcontroller::v1::TriggerEventResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::inputcontroller::v1::TriggerEventRequest, ::viam::component::inputcontroller::v1::TriggerEventResponse>* streamer) {
                       return this->StreamedTriggerEvent(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_TriggerEvent() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status TriggerEvent(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::TriggerEventRequest* /*request*/, ::viam::component::inputcontroller::v1::TriggerEventResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedTriggerEvent(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::inputcontroller::v1::TriggerEventRequest,::viam::component::inputcontroller::v1::TriggerEventResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetControls<WithStreamedUnaryMethod_GetEvents<WithStreamedUnaryMethod_TriggerEvent<WithStreamedUnaryMethod_DoCommand<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_StreamEvents : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_StreamEvents() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::viam::component::inputcontroller::v1::StreamEventsRequest, ::viam::component::inputcontroller::v1::StreamEventsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::viam::component::inputcontroller::v1::StreamEventsRequest, ::viam::component::inputcontroller::v1::StreamEventsResponse>* streamer) {
                       return this->StreamedStreamEvents(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_StreamEvents() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StreamEvents(::grpc::ServerContext* /*context*/, const ::viam::component::inputcontroller::v1::StreamEventsRequest* /*request*/, ::grpc::ServerWriter< ::viam::component::inputcontroller::v1::StreamEventsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedStreamEvents(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::viam::component::inputcontroller::v1::StreamEventsRequest,::viam::component::inputcontroller::v1::StreamEventsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_StreamEvents<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetControls<WithStreamedUnaryMethod_GetEvents<WithSplitStreamingMethod_StreamEvents<WithStreamedUnaryMethod_TriggerEvent<WithStreamedUnaryMethod_DoCommand<Service > > > > > StreamedService;
};

}  // namespace v1
}  // namespace inputcontroller
}  // namespace component
}  // namespace viam


#endif  // GRPC_component_2finputcontroller_2fv1_2finput_5fcontroller_2eproto__INCLUDED
