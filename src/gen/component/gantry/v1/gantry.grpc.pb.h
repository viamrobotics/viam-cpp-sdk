// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/gantry/v1/gantry.proto
#ifndef GRPC_component_2fgantry_2fv1_2fgantry_2eproto__INCLUDED
#define GRPC_component_2fgantry_2fv1_2fgantry_2eproto__INCLUDED

#include "component/gantry/v1/gantry.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace component {
namespace gantry {
namespace v1 {

// An GantryService services all gantries associated with a robot
class GantryService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.component.gantry.v1.GantryService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetPosition gets the current position of a gantry of the underlying robot.
    virtual ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::viam::component::gantry::v1::GetPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    // MoveToPosition moves a gantry of the underlying robot to the requested position.
    virtual ::grpc::Status MoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::viam::component::gantry::v1::MoveToPositionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::MoveToPositionResponse>> AsyncMoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::MoveToPositionResponse>>(AsyncMoveToPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::MoveToPositionResponse>> PrepareAsyncMoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::MoveToPositionResponse>>(PrepareAsyncMoveToPositionRaw(context, request, cq));
    }
    // GetLengths gets the lengths of a gantry of the underlying robot.
    virtual ::grpc::Status GetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::viam::component::gantry::v1::GetLengthsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetLengthsResponse>> AsyncGetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetLengthsResponse>>(AsyncGetLengthsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetLengthsResponse>> PrepareAsyncGetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetLengthsResponse>>(PrepareAsyncGetLengthsRaw(context, request, cq));
    }
    // Stop stops a robot's gantry
    virtual ::grpc::Status Stop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::viam::component::gantry::v1::StopResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    // IsMoving reports if a component is in motion
    virtual ::grpc::Status IsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::viam::component::gantry::v1::IsMovingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::IsMovingResponse>> AsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::IsMovingResponse>>(AsyncIsMovingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::IsMovingResponse>> PrepareAsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::IsMovingResponse>>(PrepareAsyncIsMovingRaw(context, request, cq));
    }
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetPosition gets the current position of a gantry of the underlying robot.
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest* request, ::viam::component::gantry::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest* request, ::viam::component::gantry::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // MoveToPosition moves a gantry of the underlying robot to the requested position.
      virtual void MoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest* request, ::viam::component::gantry::v1::MoveToPositionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void MoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest* request, ::viam::component::gantry::v1::MoveToPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetLengths gets the lengths of a gantry of the underlying robot.
      virtual void GetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest* request, ::viam::component::gantry::v1::GetLengthsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest* request, ::viam::component::gantry::v1::GetLengthsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Stop stops a robot's gantry
      virtual void Stop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest* request, ::viam::component::gantry::v1::StopResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Stop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest* request, ::viam::component::gantry::v1::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // IsMoving reports if a component is in motion
      virtual void IsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest* request, ::viam::component::gantry::v1::IsMovingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void IsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest* request, ::viam::component::gantry::v1::IsMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DoCommand sends/receives arbitrary commands
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::MoveToPositionResponse>* AsyncMoveToPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::MoveToPositionResponse>* PrepareAsyncMoveToPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetLengthsResponse>* AsyncGetLengthsRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::GetLengthsResponse>* PrepareAsyncGetLengthsRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::IsMovingResponse>* AsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::gantry::v1::IsMovingResponse>* PrepareAsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::viam::component::gantry::v1::GetPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetPositionResponse>> AsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetPositionResponse>>(AsyncGetPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetPositionResponse>> PrepareAsyncGetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetPositionResponse>>(PrepareAsyncGetPositionRaw(context, request, cq));
    }
    ::grpc::Status MoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::viam::component::gantry::v1::MoveToPositionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::MoveToPositionResponse>> AsyncMoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::MoveToPositionResponse>>(AsyncMoveToPositionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::MoveToPositionResponse>> PrepareAsyncMoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::MoveToPositionResponse>>(PrepareAsyncMoveToPositionRaw(context, request, cq));
    }
    ::grpc::Status GetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::viam::component::gantry::v1::GetLengthsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetLengthsResponse>> AsyncGetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetLengthsResponse>>(AsyncGetLengthsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetLengthsResponse>> PrepareAsyncGetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetLengthsResponse>>(PrepareAsyncGetLengthsRaw(context, request, cq));
    }
    ::grpc::Status Stop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::viam::component::gantry::v1::StopResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::StopResponse>> AsyncStop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::StopResponse>>(AsyncStopRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::StopResponse>> PrepareAsyncStop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::StopResponse>>(PrepareAsyncStopRaw(context, request, cq));
    }
    ::grpc::Status IsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::viam::component::gantry::v1::IsMovingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::IsMovingResponse>> AsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::IsMovingResponse>>(AsyncIsMovingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::IsMovingResponse>> PrepareAsyncIsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::IsMovingResponse>>(PrepareAsyncIsMovingRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest* request, ::viam::component::gantry::v1::GetPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest* request, ::viam::component::gantry::v1::GetPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void MoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest* request, ::viam::component::gantry::v1::MoveToPositionResponse* response, std::function<void(::grpc::Status)>) override;
      void MoveToPosition(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest* request, ::viam::component::gantry::v1::MoveToPositionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest* request, ::viam::component::gantry::v1::GetLengthsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetLengths(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest* request, ::viam::component::gantry::v1::GetLengthsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Stop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest* request, ::viam::component::gantry::v1::StopResponse* response, std::function<void(::grpc::Status)>) override;
      void Stop(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest* request, ::viam::component::gantry::v1::StopResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void IsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest* request, ::viam::component::gantry::v1::IsMovingResponse* response, std::function<void(::grpc::Status)>) override;
      void IsMoving(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest* request, ::viam::component::gantry::v1::IsMovingResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetPositionResponse>* AsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetPositionResponse>* PrepareAsyncGetPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::MoveToPositionResponse>* AsyncMoveToPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::MoveToPositionResponse>* PrepareAsyncMoveToPositionRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetLengthsResponse>* AsyncGetLengthsRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::GetLengthsResponse>* PrepareAsyncGetLengthsRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::GetLengthsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::StopResponse>* AsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::StopResponse>* PrepareAsyncStopRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::StopRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::IsMovingResponse>* AsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::gantry::v1::IsMovingResponse>* PrepareAsyncIsMovingRaw(::grpc::ClientContext* context, const ::viam::component::gantry::v1::IsMovingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_MoveToPosition_;
    const ::grpc::internal::RpcMethod rpcmethod_GetLengths_;
    const ::grpc::internal::RpcMethod rpcmethod_Stop_;
    const ::grpc::internal::RpcMethod rpcmethod_IsMoving_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetPosition gets the current position of a gantry of the underlying robot.
    virtual ::grpc::Status GetPosition(::grpc::ServerContext* context, const ::viam::component::gantry::v1::GetPositionRequest* request, ::viam::component::gantry::v1::GetPositionResponse* response);
    // MoveToPosition moves a gantry of the underlying robot to the requested position.
    virtual ::grpc::Status MoveToPosition(::grpc::ServerContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest* request, ::viam::component::gantry::v1::MoveToPositionResponse* response);
    // GetLengths gets the lengths of a gantry of the underlying robot.
    virtual ::grpc::Status GetLengths(::grpc::ServerContext* context, const ::viam::component::gantry::v1::GetLengthsRequest* request, ::viam::component::gantry::v1::GetLengthsResponse* response);
    // Stop stops a robot's gantry
    virtual ::grpc::Status Stop(::grpc::ServerContext* context, const ::viam::component::gantry::v1::StopRequest* request, ::viam::component::gantry::v1::StopResponse* response);
    // IsMoving reports if a component is in motion
    virtual ::grpc::Status IsMoving(::grpc::ServerContext* context, const ::viam::component::gantry::v1::IsMovingRequest* request, ::viam::component::gantry::v1::IsMovingResponse* response);
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetPosition() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::viam::component::gantry::v1::GetPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::gantry::v1::GetPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_MoveToPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_MoveToPosition() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_MoveToPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveToPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveToPosition(::grpc::ServerContext* context, ::viam::component::gantry::v1::MoveToPositionRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::gantry::v1::MoveToPositionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetLengths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetLengths() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetLengths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLengths(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLengths(::grpc::ServerContext* context, ::viam::component::gantry::v1::GetLengthsRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::gantry::v1::GetLengthsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stop() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::viam::component::gantry::v1::StopRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::gantry::v1::StopResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_IsMoving() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMoving(::grpc::ServerContext* context, ::viam::component::gantry::v1::IsMovingRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::gantry::v1::IsMovingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetPosition<WithAsyncMethod_MoveToPosition<WithAsyncMethod_GetLengths<WithAsyncMethod_Stop<WithAsyncMethod_IsMoving<WithAsyncMethod_DoCommand<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::GetPositionRequest, ::viam::component::gantry::v1::GetPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::gantry::v1::GetPositionRequest* request, ::viam::component::gantry::v1::GetPositionResponse* response) { return this->GetPosition(context, request, response); }));}
    void SetMessageAllocatorFor_GetPosition(
        ::grpc::MessageAllocator< ::viam::component::gantry::v1::GetPositionRequest, ::viam::component::gantry::v1::GetPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::GetPositionRequest, ::viam::component::gantry::v1::GetPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_MoveToPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_MoveToPosition() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::MoveToPositionRequest, ::viam::component::gantry::v1::MoveToPositionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::gantry::v1::MoveToPositionRequest* request, ::viam::component::gantry::v1::MoveToPositionResponse* response) { return this->MoveToPosition(context, request, response); }));}
    void SetMessageAllocatorFor_MoveToPosition(
        ::grpc::MessageAllocator< ::viam::component::gantry::v1::MoveToPositionRequest, ::viam::component::gantry::v1::MoveToPositionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::MoveToPositionRequest, ::viam::component::gantry::v1::MoveToPositionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_MoveToPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveToPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveToPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetLengths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetLengths() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::GetLengthsRequest, ::viam::component::gantry::v1::GetLengthsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::gantry::v1::GetLengthsRequest* request, ::viam::component::gantry::v1::GetLengthsResponse* response) { return this->GetLengths(context, request, response); }));}
    void SetMessageAllocatorFor_GetLengths(
        ::grpc::MessageAllocator< ::viam::component::gantry::v1::GetLengthsRequest, ::viam::component::gantry::v1::GetLengthsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::GetLengthsRequest, ::viam::component::gantry::v1::GetLengthsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetLengths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLengths(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLengths(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::StopRequest, ::viam::component::gantry::v1::StopResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::gantry::v1::StopRequest* request, ::viam::component::gantry::v1::StopResponse* response) { return this->Stop(context, request, response); }));}
    void SetMessageAllocatorFor_Stop(
        ::grpc::MessageAllocator< ::viam::component::gantry::v1::StopRequest, ::viam::component::gantry::v1::StopResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::StopRequest, ::viam::component::gantry::v1::StopResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_IsMoving() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::IsMovingRequest, ::viam::component::gantry::v1::IsMovingResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::gantry::v1::IsMovingRequest* request, ::viam::component::gantry::v1::IsMovingResponse* response) { return this->IsMoving(context, request, response); }));}
    void SetMessageAllocatorFor_IsMoving(
        ::grpc::MessageAllocator< ::viam::component::gantry::v1::IsMovingRequest, ::viam::component::gantry::v1::IsMovingResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::gantry::v1::IsMovingRequest, ::viam::component::gantry::v1::IsMovingResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsMoving(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetPosition<WithCallbackMethod_MoveToPosition<WithCallbackMethod_GetLengths<WithCallbackMethod_Stop<WithCallbackMethod_IsMoving<WithCallbackMethod_DoCommand<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetPosition() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_MoveToPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_MoveToPosition() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_MoveToPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveToPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetLengths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetLengths() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetLengths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLengths(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stop() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_IsMoving() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetPosition() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_MoveToPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_MoveToPosition() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_MoveToPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveToPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestMoveToPosition(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetLengths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetLengths() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetLengths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLengths(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetLengths(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stop() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStop(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_IsMoving() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestIsMoving(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetPosition() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_MoveToPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_MoveToPosition() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->MoveToPosition(context, request, response); }));
    }
    ~WithRawCallbackMethod_MoveToPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status MoveToPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* MoveToPosition(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetLengths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetLengths() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetLengths(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetLengths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetLengths(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetLengths(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stop() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Stop(context, request, response); }));
    }
    ~WithRawCallbackMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Stop(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_IsMoving() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->IsMoving(context, request, response); }));
    }
    ~WithRawCallbackMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* IsMoving(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetPosition() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::gantry::v1::GetPositionRequest, ::viam::component::gantry::v1::GetPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::gantry::v1::GetPositionRequest, ::viam::component::gantry::v1::GetPositionResponse>* streamer) {
                       return this->StreamedGetPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetPositionRequest* /*request*/, ::viam::component::gantry::v1::GetPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::gantry::v1::GetPositionRequest,::viam::component::gantry::v1::GetPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_MoveToPosition : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_MoveToPosition() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::gantry::v1::MoveToPositionRequest, ::viam::component::gantry::v1::MoveToPositionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::gantry::v1::MoveToPositionRequest, ::viam::component::gantry::v1::MoveToPositionResponse>* streamer) {
                       return this->StreamedMoveToPosition(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_MoveToPosition() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status MoveToPosition(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::MoveToPositionRequest* /*request*/, ::viam::component::gantry::v1::MoveToPositionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedMoveToPosition(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::gantry::v1::MoveToPositionRequest,::viam::component::gantry::v1::MoveToPositionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetLengths : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetLengths() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::gantry::v1::GetLengthsRequest, ::viam::component::gantry::v1::GetLengthsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::gantry::v1::GetLengthsRequest, ::viam::component::gantry::v1::GetLengthsResponse>* streamer) {
                       return this->StreamedGetLengths(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetLengths() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetLengths(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::GetLengthsRequest* /*request*/, ::viam::component::gantry::v1::GetLengthsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetLengths(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::gantry::v1::GetLengthsRequest,::viam::component::gantry::v1::GetLengthsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Stop : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Stop() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::gantry::v1::StopRequest, ::viam::component::gantry::v1::StopResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::gantry::v1::StopRequest, ::viam::component::gantry::v1::StopResponse>* streamer) {
                       return this->StreamedStop(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Stop() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Stop(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::StopRequest* /*request*/, ::viam::component::gantry::v1::StopResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStop(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::gantry::v1::StopRequest,::viam::component::gantry::v1::StopResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_IsMoving : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_IsMoving() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::gantry::v1::IsMovingRequest, ::viam::component::gantry::v1::IsMovingResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::gantry::v1::IsMovingRequest, ::viam::component::gantry::v1::IsMovingResponse>* streamer) {
                       return this->StreamedIsMoving(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_IsMoving() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status IsMoving(::grpc::ServerContext* /*context*/, const ::viam::component::gantry::v1::IsMovingRequest* /*request*/, ::viam::component::gantry::v1::IsMovingResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedIsMoving(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::gantry::v1::IsMovingRequest,::viam::component::gantry::v1::IsMovingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_MoveToPosition<WithStreamedUnaryMethod_GetLengths<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_IsMoving<WithStreamedUnaryMethod_DoCommand<Service > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetPosition<WithStreamedUnaryMethod_MoveToPosition<WithStreamedUnaryMethod_GetLengths<WithStreamedUnaryMethod_Stop<WithStreamedUnaryMethod_IsMoving<WithStreamedUnaryMethod_DoCommand<Service > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace gantry
}  // namespace component
}  // namespace viam


#endif  // GRPC_component_2fgantry_2fv1_2fgantry_2eproto__INCLUDED
