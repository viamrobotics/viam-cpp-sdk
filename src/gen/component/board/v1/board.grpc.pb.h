// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: component/board/v1/board.proto
#ifndef GRPC_component_2fboard_2fv1_2fboard_2eproto__INCLUDED
#define GRPC_component_2fboard_2fv1_2fboard_2eproto__INCLUDED

#include "component/board/v1/board.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace viam {
namespace component {
namespace board {
namespace v1 {

// BoardService services all Boards associated with a robot
class BoardService final {
 public:
  static constexpr char const* service_full_name() {
    return "viam.component.board.v1.BoardService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status Status(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::viam::component::board::v1::StatusResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    virtual ::grpc::Status SetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::viam::component::board::v1::SetGPIOResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetGPIOResponse>> AsyncSetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetGPIOResponse>>(AsyncSetGPIORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetGPIOResponse>> PrepareAsyncSetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetGPIOResponse>>(PrepareAsyncSetGPIORaw(context, request, cq));
    }
    // GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
    virtual ::grpc::Status GetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::viam::component::board::v1::GetGPIOResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetGPIOResponse>> AsyncGetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetGPIOResponse>>(AsyncGetGPIORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetGPIOResponse>> PrepareAsyncGetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetGPIOResponse>>(PrepareAsyncGetGPIORaw(context, request, cq));
    }
    // PWM gets the duty cycle of the given pin of a board of the underlying robot.
    virtual ::grpc::Status PWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::viam::component::board::v1::PWMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMResponse>> AsyncPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMResponse>>(AsyncPWMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMResponse>> PrepareAsyncPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMResponse>>(PrepareAsyncPWMRaw(context, request, cq));
    }
    // SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
    virtual ::grpc::Status SetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::viam::component::board::v1::SetPWMResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMResponse>> AsyncSetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMResponse>>(AsyncSetPWMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMResponse>> PrepareAsyncSetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMResponse>>(PrepareAsyncSetPWMRaw(context, request, cq));
    }
    // PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
    virtual ::grpc::Status PWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::viam::component::board::v1::PWMFrequencyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMFrequencyResponse>> AsyncPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMFrequencyResponse>>(AsyncPWMFrequencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMFrequencyResponse>> PrepareAsyncPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMFrequencyResponse>>(PrepareAsyncPWMFrequencyRaw(context, request, cq));
    }
    // SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
    virtual ::grpc::Status SetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::viam::component::board::v1::SetPWMFrequencyResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMFrequencyResponse>> AsyncSetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMFrequencyResponse>>(AsyncSetPWMFrequencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMFrequencyResponse>> PrepareAsyncSetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMFrequencyResponse>>(PrepareAsyncSetPWMFrequencyRaw(context, request, cq));
    }
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    // Analog Reader
    //
    // ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
    virtual ::grpc::Status ReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::viam::component::board::v1::ReadAnalogReaderResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::ReadAnalogReaderResponse>> AsyncReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::ReadAnalogReaderResponse>>(AsyncReadAnalogReaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::ReadAnalogReaderResponse>> PrepareAsyncReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::ReadAnalogReaderResponse>>(PrepareAsyncReadAnalogReaderRaw(context, request, cq));
    }
    // Digital Interrupt
    //
    // GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
    virtual ::grpc::Status GetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetDigitalInterruptValueResponse>> AsyncGetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetDigitalInterruptValueResponse>>(AsyncGetDigitalInterruptValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetDigitalInterruptValueResponse>> PrepareAsyncGetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetDigitalInterruptValueResponse>>(PrepareAsyncGetDigitalInterruptValueRaw(context, request, cq));
    }
    // Power Management
    //
    // `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
    virtual ::grpc::Status SetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::viam::component::board::v1::SetPowerModeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPowerModeResponse>> AsyncSetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPowerModeResponse>>(AsyncSetPowerModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPowerModeResponse>> PrepareAsyncSetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPowerModeResponse>>(PrepareAsyncSetPowerModeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Status(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest* request, ::viam::component::board::v1::StatusResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Status(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest* request, ::viam::component::board::v1::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void SetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest* request, ::viam::component::board::v1::SetGPIOResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest* request, ::viam::component::board::v1::SetGPIOResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
      virtual void GetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest* request, ::viam::component::board::v1::GetGPIOResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest* request, ::viam::component::board::v1::GetGPIOResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PWM gets the duty cycle of the given pin of a board of the underlying robot.
      virtual void PWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest* request, ::viam::component::board::v1::PWMResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest* request, ::viam::component::board::v1::PWMResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
      virtual void SetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest* request, ::viam::component::board::v1::SetPWMResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest* request, ::viam::component::board::v1::SetPWMResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
      virtual void PWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest* request, ::viam::component::board::v1::PWMFrequencyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest* request, ::viam::component::board::v1::PWMFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
      virtual void SetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::viam::component::board::v1::SetPWMFrequencyResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::viam::component::board::v1::SetPWMFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // DoCommand sends/receives arbitrary commands
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Analog Reader
      //
      // ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
      virtual void ReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::viam::component::board::v1::ReadAnalogReaderResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::viam::component::board::v1::ReadAnalogReaderResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Digital Interrupt
      //
      // GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
      virtual void GetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Power Management
      //
      // `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
      virtual void SetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest* request, ::viam::component::board::v1::SetPowerModeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest* request, ::viam::component::board::v1::SetPowerModeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetGPIOResponse>* AsyncSetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetGPIOResponse>* PrepareAsyncSetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetGPIOResponse>* AsyncGetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetGPIOResponse>* PrepareAsyncGetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMResponse>* AsyncPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMResponse>* PrepareAsyncPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMResponse>* AsyncSetPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMResponse>* PrepareAsyncSetPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMFrequencyResponse>* AsyncPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::PWMFrequencyResponse>* PrepareAsyncPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMFrequencyResponse>* AsyncSetPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPWMFrequencyResponse>* PrepareAsyncSetPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::ReadAnalogReaderResponse>* AsyncReadAnalogReaderRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::ReadAnalogReaderResponse>* PrepareAsyncReadAnalogReaderRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetDigitalInterruptValueResponse>* AsyncGetDigitalInterruptValueRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::GetDigitalInterruptValueResponse>* PrepareAsyncGetDigitalInterruptValueRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPowerModeResponse>* AsyncSetPowerModeRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::viam::component::board::v1::SetPowerModeResponse>* PrepareAsyncSetPowerModeRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Status(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::viam::component::board::v1::StatusResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::StatusResponse>> AsyncStatus(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::StatusResponse>>(AsyncStatusRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::StatusResponse>> PrepareAsyncStatus(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::StatusResponse>>(PrepareAsyncStatusRaw(context, request, cq));
    }
    ::grpc::Status SetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::viam::component::board::v1::SetGPIOResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetGPIOResponse>> AsyncSetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetGPIOResponse>>(AsyncSetGPIORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetGPIOResponse>> PrepareAsyncSetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetGPIOResponse>>(PrepareAsyncSetGPIORaw(context, request, cq));
    }
    ::grpc::Status GetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::viam::component::board::v1::GetGPIOResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetGPIOResponse>> AsyncGetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetGPIOResponse>>(AsyncGetGPIORaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetGPIOResponse>> PrepareAsyncGetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetGPIOResponse>>(PrepareAsyncGetGPIORaw(context, request, cq));
    }
    ::grpc::Status PWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::viam::component::board::v1::PWMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMResponse>> AsyncPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMResponse>>(AsyncPWMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMResponse>> PrepareAsyncPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMResponse>>(PrepareAsyncPWMRaw(context, request, cq));
    }
    ::grpc::Status SetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::viam::component::board::v1::SetPWMResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMResponse>> AsyncSetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMResponse>>(AsyncSetPWMRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMResponse>> PrepareAsyncSetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMResponse>>(PrepareAsyncSetPWMRaw(context, request, cq));
    }
    ::grpc::Status PWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::viam::component::board::v1::PWMFrequencyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMFrequencyResponse>> AsyncPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMFrequencyResponse>>(AsyncPWMFrequencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMFrequencyResponse>> PrepareAsyncPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMFrequencyResponse>>(PrepareAsyncPWMFrequencyRaw(context, request, cq));
    }
    ::grpc::Status SetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::viam::component::board::v1::SetPWMFrequencyResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMFrequencyResponse>> AsyncSetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMFrequencyResponse>>(AsyncSetPWMFrequencyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMFrequencyResponse>> PrepareAsyncSetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMFrequencyResponse>>(PrepareAsyncSetPWMFrequencyRaw(context, request, cq));
    }
    ::grpc::Status DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::viam::common::v1::DoCommandResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> AsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(AsyncDoCommandRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>> PrepareAsyncDoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>>(PrepareAsyncDoCommandRaw(context, request, cq));
    }
    ::grpc::Status ReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::viam::component::board::v1::ReadAnalogReaderResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::ReadAnalogReaderResponse>> AsyncReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::ReadAnalogReaderResponse>>(AsyncReadAnalogReaderRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::ReadAnalogReaderResponse>> PrepareAsyncReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::ReadAnalogReaderResponse>>(PrepareAsyncReadAnalogReaderRaw(context, request, cq));
    }
    ::grpc::Status GetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetDigitalInterruptValueResponse>> AsyncGetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetDigitalInterruptValueResponse>>(AsyncGetDigitalInterruptValueRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetDigitalInterruptValueResponse>> PrepareAsyncGetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetDigitalInterruptValueResponse>>(PrepareAsyncGetDigitalInterruptValueRaw(context, request, cq));
    }
    ::grpc::Status SetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::viam::component::board::v1::SetPowerModeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPowerModeResponse>> AsyncSetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPowerModeResponse>>(AsyncSetPowerModeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPowerModeResponse>> PrepareAsyncSetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPowerModeResponse>>(PrepareAsyncSetPowerModeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Status(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest* request, ::viam::component::board::v1::StatusResponse* response, std::function<void(::grpc::Status)>) override;
      void Status(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest* request, ::viam::component::board::v1::StatusResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest* request, ::viam::component::board::v1::SetGPIOResponse* response, std::function<void(::grpc::Status)>) override;
      void SetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest* request, ::viam::component::board::v1::SetGPIOResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest* request, ::viam::component::board::v1::GetGPIOResponse* response, std::function<void(::grpc::Status)>) override;
      void GetGPIO(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest* request, ::viam::component::board::v1::GetGPIOResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest* request, ::viam::component::board::v1::PWMResponse* response, std::function<void(::grpc::Status)>) override;
      void PWM(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest* request, ::viam::component::board::v1::PWMResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest* request, ::viam::component::board::v1::SetPWMResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPWM(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest* request, ::viam::component::board::v1::SetPWMResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest* request, ::viam::component::board::v1::PWMFrequencyResponse* response, std::function<void(::grpc::Status)>) override;
      void PWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest* request, ::viam::component::board::v1::PWMFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::viam::component::board::v1::SetPWMFrequencyResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPWMFrequency(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::viam::component::board::v1::SetPWMFrequencyResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, std::function<void(::grpc::Status)>) override;
      void DoCommand(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::viam::component::board::v1::ReadAnalogReaderResponse* response, std::function<void(::grpc::Status)>) override;
      void ReadAnalogReader(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::viam::component::board::v1::ReadAnalogReaderResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response, std::function<void(::grpc::Status)>) override;
      void GetDigitalInterruptValue(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest* request, ::viam::component::board::v1::SetPowerModeResponse* response, std::function<void(::grpc::Status)>) override;
      void SetPowerMode(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest* request, ::viam::component::board::v1::SetPowerModeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::StatusResponse>* AsyncStatusRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::StatusResponse>* PrepareAsyncStatusRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::StatusRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetGPIOResponse>* AsyncSetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetGPIOResponse>* PrepareAsyncSetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetGPIORequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetGPIOResponse>* AsyncGetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetGPIOResponse>* PrepareAsyncGetGPIORaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetGPIORequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMResponse>* AsyncPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMResponse>* PrepareAsyncPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMResponse>* AsyncSetPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMResponse>* PrepareAsyncSetPWMRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMFrequencyResponse>* AsyncPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::PWMFrequencyResponse>* PrepareAsyncPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::PWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMFrequencyResponse>* AsyncSetPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPWMFrequencyResponse>* PrepareAsyncSetPWMFrequencyRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* AsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::common::v1::DoCommandResponse>* PrepareAsyncDoCommandRaw(::grpc::ClientContext* context, const ::viam::common::v1::DoCommandRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::ReadAnalogReaderResponse>* AsyncReadAnalogReaderRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::ReadAnalogReaderResponse>* PrepareAsyncReadAnalogReaderRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetDigitalInterruptValueResponse>* AsyncGetDigitalInterruptValueRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::GetDigitalInterruptValueResponse>* PrepareAsyncGetDigitalInterruptValueRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPowerModeResponse>* AsyncSetPowerModeRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::viam::component::board::v1::SetPowerModeResponse>* PrepareAsyncSetPowerModeRaw(::grpc::ClientContext* context, const ::viam::component::board::v1::SetPowerModeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Status_;
    const ::grpc::internal::RpcMethod rpcmethod_SetGPIO_;
    const ::grpc::internal::RpcMethod rpcmethod_GetGPIO_;
    const ::grpc::internal::RpcMethod rpcmethod_PWM_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPWM_;
    const ::grpc::internal::RpcMethod rpcmethod_PWMFrequency_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPWMFrequency_;
    const ::grpc::internal::RpcMethod rpcmethod_DoCommand_;
    const ::grpc::internal::RpcMethod rpcmethod_ReadAnalogReader_;
    const ::grpc::internal::RpcMethod rpcmethod_GetDigitalInterruptValue_;
    const ::grpc::internal::RpcMethod rpcmethod_SetPowerMode_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Status(::grpc::ServerContext* context, const ::viam::component::board::v1::StatusRequest* request, ::viam::component::board::v1::StatusResponse* response);
    virtual ::grpc::Status SetGPIO(::grpc::ServerContext* context, const ::viam::component::board::v1::SetGPIORequest* request, ::viam::component::board::v1::SetGPIOResponse* response);
    // GetGPIO gets the high/low state of the given pin of a board of the underlying robot.
    virtual ::grpc::Status GetGPIO(::grpc::ServerContext* context, const ::viam::component::board::v1::GetGPIORequest* request, ::viam::component::board::v1::GetGPIOResponse* response);
    // PWM gets the duty cycle of the given pin of a board of the underlying robot.
    virtual ::grpc::Status PWM(::grpc::ServerContext* context, const ::viam::component::board::v1::PWMRequest* request, ::viam::component::board::v1::PWMResponse* response);
    // SetPWM sets the given pin of a board of the underlying robot to the given duty cycle.
    virtual ::grpc::Status SetPWM(::grpc::ServerContext* context, const ::viam::component::board::v1::SetPWMRequest* request, ::viam::component::board::v1::SetPWMResponse* response);
    // PWMFrequency gets the PWM frequency of the given pin of a board of the underlying robot.
    virtual ::grpc::Status PWMFrequency(::grpc::ServerContext* context, const ::viam::component::board::v1::PWMFrequencyRequest* request, ::viam::component::board::v1::PWMFrequencyResponse* response);
    // SetPWMFrequency sets the given pin of a board of the underlying robot to the given PWM frequency. 0 will use the board's default PWM frequency.
    virtual ::grpc::Status SetPWMFrequency(::grpc::ServerContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::viam::component::board::v1::SetPWMFrequencyResponse* response);
    // DoCommand sends/receives arbitrary commands
    virtual ::grpc::Status DoCommand(::grpc::ServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response);
    // Analog Reader
    //
    // ReadAnalogReader reads off the current value of an analog reader of a board of the underlying robot.
    virtual ::grpc::Status ReadAnalogReader(::grpc::ServerContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::viam::component::board::v1::ReadAnalogReaderResponse* response);
    // Digital Interrupt
    //
    // GetDigitalInterruptValue returns the current value of the interrupt which is based on the type of interrupt.
    virtual ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response);
    // Power Management
    //
    // `SetPowerMode` sets the power consumption mode of the board to the requested setting for the given duration.
    virtual ::grpc::Status SetPowerMode(::grpc::ServerContext* context, const ::viam::component::board::v1::SetPowerModeRequest* request, ::viam::component::board::v1::SetPowerModeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Status() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::viam::component::board::v1::StatusRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::StatusResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetGPIO() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_SetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGPIO(::grpc::ServerContext* context, ::viam::component::board::v1::SetGPIORequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::SetGPIOResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetGPIO() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGPIO(::grpc::ServerContext* context, ::viam::component::board::v1::GetGPIORequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::GetGPIOResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PWM() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPWM(::grpc::ServerContext* context, ::viam::component::board::v1::PWMRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::PWMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPWM() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SetPWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPWM(::grpc::ServerContext* context, ::viam::component::board::v1::SetPWMRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::SetPWMResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PWMFrequency() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_PWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPWMFrequency(::grpc::ServerContext* context, ::viam::component::board::v1::PWMFrequencyRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::PWMFrequencyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetPWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetPWMFrequency() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetPWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPWMFrequency(::grpc::ServerContext* context, ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::SetPWMFrequencyResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DoCommand() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::viam::common::v1::DoCommandRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::common::v1::DoCommandResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ReadAnalogReader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ReadAnalogReader() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_ReadAnalogReader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAnalogReader(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAnalogReader(::grpc::ServerContext* context, ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::ReadAnalogReaderResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetDigitalInterruptValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetDigitalInterruptValue() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_GetDigitalInterruptValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDigitalInterruptValue(::grpc::ServerContext* context, ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::grpc::ServerAsyncResponseWriter< ::viam::component::board::v1::GetDigitalInterruptValueResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Status<WithAsyncMethod_SetGPIO<WithAsyncMethod_GetGPIO<WithAsyncMethod_PWM<WithAsyncMethod_SetPWM<WithAsyncMethod_PWMFrequency<WithAsyncMethod_SetPWMFrequency<WithAsyncMethod_ReadAnalogReader<WithAsyncMethod_GetDigitalInterruptValue<Service > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Status() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::StatusRequest, ::viam::component::board::v1::StatusResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::StatusRequest* request, ::viam::component::board::v1::StatusResponse* response) { return this->Status(context, request, response); }));}
    void SetMessageAllocatorFor_Status(
        ::grpc::MessageAllocator< ::viam::component::board::v1::StatusRequest, ::viam::component::board::v1::StatusResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::StatusRequest, ::viam::component::board::v1::StatusResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetGPIO() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::SetGPIORequest, ::viam::component::board::v1::SetGPIOResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::SetGPIORequest* request, ::viam::component::board::v1::SetGPIOResponse* response) { return this->SetGPIO(context, request, response); }));}
    void SetMessageAllocatorFor_SetGPIO(
        ::grpc::MessageAllocator< ::viam::component::board::v1::SetGPIORequest, ::viam::component::board::v1::SetGPIOResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::SetGPIORequest, ::viam::component::board::v1::SetGPIOResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGPIO(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetGPIO() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::GetGPIORequest, ::viam::component::board::v1::GetGPIOResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::GetGPIORequest* request, ::viam::component::board::v1::GetGPIOResponse* response) { return this->GetGPIO(context, request, response); }));}
    void SetMessageAllocatorFor_GetGPIO(
        ::grpc::MessageAllocator< ::viam::component::board::v1::GetGPIORequest, ::viam::component::board::v1::GetGPIOResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::GetGPIORequest, ::viam::component::board::v1::GetGPIOResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGPIO(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PWM() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::PWMRequest, ::viam::component::board::v1::PWMResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::PWMRequest* request, ::viam::component::board::v1::PWMResponse* response) { return this->PWM(context, request, response); }));}
    void SetMessageAllocatorFor_PWM(
        ::grpc::MessageAllocator< ::viam::component::board::v1::PWMRequest, ::viam::component::board::v1::PWMResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::PWMRequest, ::viam::component::board::v1::PWMResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PWM(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPWM() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::SetPWMRequest, ::viam::component::board::v1::SetPWMResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::SetPWMRequest* request, ::viam::component::board::v1::SetPWMResponse* response) { return this->SetPWM(context, request, response); }));}
    void SetMessageAllocatorFor_SetPWM(
        ::grpc::MessageAllocator< ::viam::component::board::v1::SetPWMRequest, ::viam::component::board::v1::SetPWMResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::SetPWMRequest, ::viam::component::board::v1::SetPWMResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPWM(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PWMFrequency() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::PWMFrequencyRequest, ::viam::component::board::v1::PWMFrequencyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::PWMFrequencyRequest* request, ::viam::component::board::v1::PWMFrequencyResponse* response) { return this->PWMFrequency(context, request, response); }));}
    void SetMessageAllocatorFor_PWMFrequency(
        ::grpc::MessageAllocator< ::viam::component::board::v1::PWMFrequencyRequest, ::viam::component::board::v1::PWMFrequencyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::PWMFrequencyRequest, ::viam::component::board::v1::PWMFrequencyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PWMFrequency(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetPWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetPWMFrequency() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::SetPWMFrequencyRequest, ::viam::component::board::v1::SetPWMFrequencyResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::SetPWMFrequencyRequest* request, ::viam::component::board::v1::SetPWMFrequencyResponse* response) { return this->SetPWMFrequency(context, request, response); }));}
    void SetMessageAllocatorFor_SetPWMFrequency(
        ::grpc::MessageAllocator< ::viam::component::board::v1::SetPWMFrequencyRequest, ::viam::component::board::v1::SetPWMFrequencyResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::SetPWMFrequencyRequest, ::viam::component::board::v1::SetPWMFrequencyResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetPWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPWMFrequency(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::common::v1::DoCommandRequest* request, ::viam::common::v1::DoCommandResponse* response) { return this->DoCommand(context, request, response); }));}
    void SetMessageAllocatorFor_DoCommand(
        ::grpc::MessageAllocator< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ReadAnalogReader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ReadAnalogReader() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::ReadAnalogReaderRequest, ::viam::component::board::v1::ReadAnalogReaderResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::ReadAnalogReaderRequest* request, ::viam::component::board::v1::ReadAnalogReaderResponse* response) { return this->ReadAnalogReader(context, request, response); }));}
    void SetMessageAllocatorFor_ReadAnalogReader(
        ::grpc::MessageAllocator< ::viam::component::board::v1::ReadAnalogReaderRequest, ::viam::component::board::v1::ReadAnalogReaderResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::ReadAnalogReaderRequest, ::viam::component::board::v1::ReadAnalogReaderResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ReadAnalogReader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAnalogReader(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAnalogReader(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetDigitalInterruptValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetDigitalInterruptValue() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::GetDigitalInterruptValueRequest, ::viam::component::board::v1::GetDigitalInterruptValueResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* request, ::viam::component::board::v1::GetDigitalInterruptValueResponse* response) { return this->GetDigitalInterruptValue(context, request, response); }));}
    void SetMessageAllocatorFor_GetDigitalInterruptValue(
        ::grpc::MessageAllocator< ::viam::component::board::v1::GetDigitalInterruptValueRequest, ::viam::component::board::v1::GetDigitalInterruptValueResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::viam::component::board::v1::GetDigitalInterruptValueRequest, ::viam::component::board::v1::GetDigitalInterruptValueResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetDigitalInterruptValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDigitalInterruptValue(
      ::grpc::CallbackServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Status<WithCallbackMethod_SetGPIO<WithCallbackMethod_GetGPIO<WithCallbackMethod_PWM<WithCallbackMethod_SetPWM<WithCallbackMethod_PWMFrequency<WithCallbackMethod_SetPWMFrequency<WithCallbackMethod_ReadAnalogReader<WithCallbackMethod_GetDigitalInterruptValue<Service > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Status() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetGPIO() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_SetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetGPIO() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PWM() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPWM() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SetPWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PWMFrequency() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_PWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPWMFrequency() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetPWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DoCommand() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ReadAnalogReader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ReadAnalogReader() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_ReadAnalogReader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAnalogReader(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetDigitalInterruptValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetDigitalInterruptValue() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_GetDigitalInterruptValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetPowerMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetPowerMode() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SetPowerMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPowerMode(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPowerModeRequest* /*request*/, ::viam::component::board::v1::SetPowerModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Status() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStatus(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetGPIO() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_SetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetGPIO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetGPIO() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetGPIO(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PWM() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPWM(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPWM() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SetPWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPWM(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PWMFrequency() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_PWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPWMFrequency(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetPWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetPWMFrequency() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetPWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetPWMFrequency(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DoCommand() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDoCommand(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ReadAnalogReader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ReadAnalogReader() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_ReadAnalogReader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAnalogReader(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestReadAnalogReader(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetDigitalInterruptValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetDigitalInterruptValue() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_GetDigitalInterruptValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetDigitalInterruptValue(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Status() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Status(context, request, response); }));
    }
    ~WithRawCallbackMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Status(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetGPIO() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetGPIO(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetGPIO(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetGPIO() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetGPIO(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetGPIO(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PWM() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PWM(context, request, response); }));
    }
    ~WithRawCallbackMethod_PWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PWM(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPWM() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPWM(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPWM(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PWMFrequency() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PWMFrequency(context, request, response); }));
    }
    ~WithRawCallbackMethod_PWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PWMFrequency(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPWMFrequency() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPWMFrequency(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPWMFrequency(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DoCommand() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DoCommand(context, request, response); }));
    }
    ~WithRawCallbackMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DoCommand(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ReadAnalogReader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ReadAnalogReader() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ReadAnalogReader(context, request, response); }));
    }
    ~WithRawCallbackMethod_ReadAnalogReader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ReadAnalogReader(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ReadAnalogReader(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetDigitalInterruptValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetDigitalInterruptValue() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetDigitalInterruptValue(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetDigitalInterruptValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetDigitalInterruptValue(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetPowerMode : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetPowerMode() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetPowerMode(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetPowerMode() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetPowerMode(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPowerModeRequest* /*request*/, ::viam::component::board::v1::SetPowerModeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetPowerMode(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Status : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Status() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::StatusRequest, ::viam::component::board::v1::StatusResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::StatusRequest, ::viam::component::board::v1::StatusResponse>* streamer) {
                       return this->StreamedStatus(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Status() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Status(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::StatusRequest* /*request*/, ::viam::component::board::v1::StatusResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStatus(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::StatusRequest,::viam::component::board::v1::StatusResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetGPIO() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::SetGPIORequest, ::viam::component::board::v1::SetGPIOResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::SetGPIORequest, ::viam::component::board::v1::SetGPIOResponse>* streamer) {
                       return this->StreamedSetGPIO(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetGPIORequest* /*request*/, ::viam::component::board::v1::SetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetGPIO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::SetGPIORequest,::viam::component::board::v1::SetGPIOResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetGPIO : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetGPIO() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::GetGPIORequest, ::viam::component::board::v1::GetGPIOResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::GetGPIORequest, ::viam::component::board::v1::GetGPIOResponse>* streamer) {
                       return this->StreamedGetGPIO(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetGPIO() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetGPIO(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetGPIORequest* /*request*/, ::viam::component::board::v1::GetGPIOResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetGPIO(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::GetGPIORequest,::viam::component::board::v1::GetGPIOResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PWM() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::PWMRequest, ::viam::component::board::v1::PWMResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::PWMRequest, ::viam::component::board::v1::PWMResponse>* streamer) {
                       return this->StreamedPWM(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMRequest* /*request*/, ::viam::component::board::v1::PWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPWM(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::PWMRequest,::viam::component::board::v1::PWMResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPWM : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPWM() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::SetPWMRequest, ::viam::component::board::v1::SetPWMResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::SetPWMRequest, ::viam::component::board::v1::SetPWMResponse>* streamer) {
                       return this->StreamedSetPWM(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPWM() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPWM(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMRequest* /*request*/, ::viam::component::board::v1::SetPWMResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPWM(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::SetPWMRequest,::viam::component::board::v1::SetPWMResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PWMFrequency() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::PWMFrequencyRequest, ::viam::component::board::v1::PWMFrequencyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::PWMFrequencyRequest, ::viam::component::board::v1::PWMFrequencyResponse>* streamer) {
                       return this->StreamedPWMFrequency(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::PWMFrequencyRequest* /*request*/, ::viam::component::board::v1::PWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPWMFrequency(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::PWMFrequencyRequest,::viam::component::board::v1::PWMFrequencyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetPWMFrequency : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetPWMFrequency() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::SetPWMFrequencyRequest, ::viam::component::board::v1::SetPWMFrequencyResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::SetPWMFrequencyRequest, ::viam::component::board::v1::SetPWMFrequencyResponse>* streamer) {
                       return this->StreamedSetPWMFrequency(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetPWMFrequency() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetPWMFrequency(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::SetPWMFrequencyRequest* /*request*/, ::viam::component::board::v1::SetPWMFrequencyResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetPWMFrequency(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::SetPWMFrequencyRequest,::viam::component::board::v1::SetPWMFrequencyResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DoCommand : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DoCommand() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::common::v1::DoCommandRequest, ::viam::common::v1::DoCommandResponse>* streamer) {
                       return this->StreamedDoCommand(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DoCommand() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DoCommand(::grpc::ServerContext* /*context*/, const ::viam::common::v1::DoCommandRequest* /*request*/, ::viam::common::v1::DoCommandResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDoCommand(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::common::v1::DoCommandRequest,::viam::common::v1::DoCommandResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ReadAnalogReader : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ReadAnalogReader() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::ReadAnalogReaderRequest, ::viam::component::board::v1::ReadAnalogReaderResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::ReadAnalogReaderRequest, ::viam::component::board::v1::ReadAnalogReaderResponse>* streamer) {
                       return this->StreamedReadAnalogReader(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ReadAnalogReader() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ReadAnalogReader(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::ReadAnalogReaderRequest* /*request*/, ::viam::component::board::v1::ReadAnalogReaderResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedReadAnalogReader(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::ReadAnalogReaderRequest,::viam::component::board::v1::ReadAnalogReaderResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetDigitalInterruptValue : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetDigitalInterruptValue() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::viam::component::board::v1::GetDigitalInterruptValueRequest, ::viam::component::board::v1::GetDigitalInterruptValueResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::viam::component::board::v1::GetDigitalInterruptValueRequest, ::viam::component::board::v1::GetDigitalInterruptValueResponse>* streamer) {
                       return this->StreamedGetDigitalInterruptValue(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetDigitalInterruptValue() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetDigitalInterruptValue(::grpc::ServerContext* /*context*/, const ::viam::component::board::v1::GetDigitalInterruptValueRequest* /*request*/, ::viam::component::board::v1::GetDigitalInterruptValueResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetDigitalInterruptValue(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::viam::component::board::v1::GetDigitalInterruptValueRequest,::viam::component::board::v1::GetDigitalInterruptValueResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_SetGPIO<WithStreamedUnaryMethod_GetGPIO<WithStreamedUnaryMethod_PWM<WithStreamedUnaryMethod_SetPWM<WithStreamedUnaryMethod_PWMFrequency<WithStreamedUnaryMethod_SetPWMFrequency<WithStreamedUnaryMethod_ReadAnalogReader<WithStreamedUnaryMethod_GetDigitalInterruptValue<Service > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Status<WithStreamedUnaryMethod_SetGPIO<WithStreamedUnaryMethod_GetGPIO<WithStreamedUnaryMethod_PWM<WithStreamedUnaryMethod_SetPWM<WithStreamedUnaryMethod_PWMFrequency<WithStreamedUnaryMethod_SetPWMFrequency<WithStreamedUnaryMethod_ReadAnalogReader<WithStreamedUnaryMethod_GetDigitalInterruptValue<Service > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace board
}  // namespace component
}  // namespace viam


#endif  // GRPC_component_2fboard_2fv1_2fboard_2eproto__INCLUDED
